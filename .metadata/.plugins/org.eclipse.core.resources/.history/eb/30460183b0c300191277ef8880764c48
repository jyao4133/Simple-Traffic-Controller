#include <stdio.h>
#include "sys/alt_alarm.h"
#include <system.h>
#include <altera_avalon_pio_regs.h>

#define LIGHT_TRANSITION_TIME 1000

enum OpperationMode {Mode1 = 1, Mode2 = 2, Mode3 = 3, Mode4 = 4};
enum LightColour {Red = 1, Yellow = 2, Green = 3};

void Mode1Handler(void);
alt_u32 timer_isr_function(void* context);
void button_interrupts_function(void* context, alt_u32 id);
void lcd_set_mode(OpperationMode currentMode);

volatile alt_alarm timer;
volatile uint8 timer_has_started = 0;


alt_u32 timer_isr_function(void* context) {
	OpperationMode *currentMode = (unsigned int*) context;
	UpdateMode();
//	printf("timer value %d\n", *timeCount);

	unsigned int modeSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);

	if (!(uiButtonsValue & 1<<1)) {
		(*timeCount)++;
	} else {
		timer_has_started = 0;
		return 0;
	}
	return LIGHT_TRANSITION_TIME;
}

//void button_interrupts_function(void* context, alt_u32 id) {
//
//	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
//	unsigned int *timeCount = (unsigned int*) context;
//
//	void* timerContext = (void*) timeCount;
//
//	if (!(uiButtonsValue & 1<<0)) {
//		(*timeCount)++;
//		printf("Button 0\n");
//	} else if (!(uiButtonsValue & 1<<1)) {
//		// start the timer, with timeout of 1000 milli-seconds
//		if (!timer_has_started) {
//			alt_alarm_start(&timer, LIGHT_TRANSITION_TIME, timer_isr_function, timerContext);
//			timer_has_started = 1;
//		}
//		printf("Button 1\n");
//
//	} else {
//		printf("Didn't work");
//	}
//	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
//}


int main() {

	//void* context_going_to_be_passed = (void*) &count;

	alt_alarm_start(&timer, LIGHT_TRANSITION_TIME, timer_isr_function, timerContext); //Start the timer


	//IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0); // enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x3); // enable interrupts for all buttons

	//alt_irq_register(KEYS_IRQ,context_going_to_be_passed, button_interrupts_function);

	while(1){
	}
	return 0;
}


void UpdateMode(OpperationMode  *currentMode){
	if (InSafeState()) {
		unsigned int modeSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
		if (!(modeSwitchValue & 1<<0)) {
			(*currentMode) = Mode1;
		} else if (!(modeSwitchValue & 1<<1)) {
			(*currentMode) = Mode2;
		} else if (!(modeSwitchValue & 1<<2)) {
			(*currentMode) = Mode3;
		} else if (!(modeSwitchValue & 1<<1)) {
			(*currentMode) = Mode2;

		}
	}
	return;
}

uint8 InSafeState (void) {

	return 0;
}

void lcd_set_mode(OpperationMode currentMode) {
	// Write the current mode to the lcd
	#define ESC 27
	#define CLEAR_LCD_STRING "[2J"
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
	if(lcd != NULL){
		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
		fprintf(lcd, "MODE: %d\n", currentMode);
	}
	return;
}
