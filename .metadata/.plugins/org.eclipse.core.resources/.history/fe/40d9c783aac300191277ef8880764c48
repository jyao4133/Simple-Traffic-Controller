#include <stdio.h>
#include "sys/alt_alarm.h"
#include <system.h>
#include <altera_avalon_pio_regs.h>

#define LIGHT_TRANSITION_TIME 1000

volatile alt_alarm timer;
volatile uint8 timer_has_started = 0;

alt_u32 timer_isr_function(void* context) {
	unsigned int *timeCount = (unsigned int*) context;
	printf("timer value %d\n", *timeCount);

	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);

	if (!(uiButtonsValue & 1<<1)) {
		(*timeCount)++;
	} else {
		timer_has_started = 0;
		return 0;
	}
	return LIGHT_TRANSITION_TIME;
}

void button_interrupts_function(void* context, alt_u32 id) {
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
	unsigned int *timeCount = (unsigned int*) context;

	void* timerContext = (void*) timeCount;

	if (!(uiButtonsValue & 1<<0)) {
		(*timeCount)++;
		printf("Button 0\n");
	} else if (!(uiButtonsValue & 1<<1)) {
		// start the timer, with timeout of 1000 milli-seconds
		if (!timer_has_started) {
			alt_alarm_start(&timer, 500, timer_isr_function, timerContext);
			timer_has_started = 1;
		}
		printf("Button 1\n");

	} else {
		printf("Didn't work");
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
}


int main() {
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
	uint8 current_mode = 0;
	uint8 previous_mode = null;


	void* context_going_to_be_passed = (void*) &count;

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0); // enable interrupts for all buttons
	//IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x3); // enable interrupts for all buttons

	alt_irq_register(KEYS_IRQ,context_going_to_be_passed, button_interrupts_function);

	while(1) {
		if(lcd != NULL){
			if (current_mode != previous_mode) {
				#define ESC 27
				#define CLEAR_LCD_STRING "[2J"
				fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
				fprintf(lcd, "MODE: %d\n", current_mode);
				previous_mode = current_mode;
			}
		}
	}
	return 0;
}
