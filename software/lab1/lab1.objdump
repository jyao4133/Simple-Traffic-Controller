
lab1.elf:     file format elf32-littlenios2
lab1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00012590 memsz 0x00012590 flags r-x
    LOAD off    0x000135b0 vaddr 0x008125b0 paddr 0x008142a0 align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x00015f90 vaddr 0x00815f90 paddr 0x00815f90 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011da0  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005cc  00811fe4  00811fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  008125b0  008142a0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00815f90  00815f90  00015f90  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00816120  00816120  000152a0  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  000152a0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000152a0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001120  00000000  00000000  000152c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002b067  00000000  00000000  000163e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000afb2  00000000  00000000  0004144f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d4d0  00000000  00000000  0004c401  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000028b4  00000000  00000000  000598d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000041ba  00000000  00000000  0005c188  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001848c  00000000  00000000  00060342  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000787d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a50  00000000  00000000  00078830  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007dd01  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007dd04  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007dd07  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007dd08  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0007dd09  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0007dd12  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0007dd1b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0007dd24  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000014  00000000  00000000  0007dd30  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006766a  00000000  00000000  0007dd44  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00811fe4 l    d  .rodata	00000000 .rodata
008125b0 l    d  .rwdata	00000000 .rwdata
00815f90 l    d  .bss	00000000 .bss
00816120 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab1_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00800d50 l     F .text	00000008 __fp_unlock
00800d64 l     F .text	0000019c __sinit.part.1
00800f00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008125b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
00802468 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081206a l     O .rodata	00000010 zeroes.4404
00804a84 l     F .text	000000bc __sbprintf
0081207a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00804d48 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00812dfc l     O .rwdata	00000020 lc_ctype_charset
00812ddc l     O .rwdata	00000020 lc_message_charset
00812e1c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
008120a8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080845c l     F .text	000000fc __sprint_r.part.0
008121dc l     O .rodata	00000010 blanks.4348
008121cc l     O .rodata	00000010 zeroes.4349
008099e8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080de70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080df7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080dfa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080e214 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080e2f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e3e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080e5b4 l     F .text	0000003c alt_get_errno
0080e5f0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080e808 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081428c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080ebf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080ed2c l     F .text	00000034 alt_dev_reg
00812ffc l     O .rwdata	00001060 jtag_uart
0081405c l     O .rwdata	00000120 lcd
0081417c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080f054 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080f260 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00814298 l     O .rwdata	00000004 colstart
0080f898 l     F .text	000000b8 lcd_write_command
0080f950 l     F .text	000000d8 lcd_write_data
0080fa28 l     F .text	000000d0 lcd_clear_screen
0080faf8 l     F .text	000001ec lcd_repaint_screen
0080fce4 l     F .text	000000cc lcd_scroll_up
0080fdb0 l     F .text	000002ac lcd_handle_escape
00810534 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00810774 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00810a24 l     F .text	0000009c altera_avalon_uart_irq
00810ac0 l     F .text	000000e4 altera_avalon_uart_rxirq
00810ba4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00810d40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00810f58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811188 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811838 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081242f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00815fdc g     O .bss	00000004 alt_instruction_exception_handler
0080809c g     F .text	00000074 _mprec_log10
008004f0 g     F .text	00000080 lcd_set_mode
00808188 g     F .text	0000008c __any_on
00806e5c g     F .text	00000054 _isatty_r
008120b4 g     O .rodata	00000028 __mprec_tinytens
0080e4f0 g     F .text	0000007c alt_main
00816020 g     O .bss	00000100 alt_irq
00815f98 g     O .bss	00000004 mode2State
00806f8c g     F .text	00000060 _lseek_r
0081424c g     O .rwdata	00000004 t3
008142a0 g       *ABS*	00000000 __flash_rwdata_start
0080697c g     F .text	000000ac __sflags
0080c870 g     F .text	00000088 .hidden __eqdf2
008004b4 g     F .text	0000003c InSafeState
00816120 g       *ABS*	00000000 __alt_heap_start
0080242c g     F .text	0000003c printf
0080aa44 g     F .text	0000009c _wcrtomb_r
0080280c g     F .text	0000005c __sseek
008010a0 g     F .text	00000010 __sinit
0080a8ec g     F .text	00000140 __swbuf_r
00806eb0 g     F .text	0000007c _setlocale_r
00800f08 g     F .text	00000068 __sfmoreglue
0080e590 g     F .text	00000024 __malloc_unlock
0080a22c g     F .text	0000015c memmove
00801088 g     F .text	00000018 _cleanup
00807218 g     F .text	000000a8 _Balloc
00816008 g     O .bss	00000018 timer
0080c8f8 g     F .text	000000dc .hidden __gtdf2
008119a8 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00814254 g     O .rwdata	00000004 t5
008016c8 g     F .text	0000005c _fstat_r
00815fa8 g     O .bss	00000004 errno
008026cc g     F .text	00000014 __srget
00802788 g     F .text	00000008 __seofread
00815fcc g     O .bss	00000004 alt_argv
0081c240 g       *ABS*	00000000 _gp
00811978 g     F .text	00000030 usleep
00800290 g     F .text	00000084 tlc_timer_isr
00812e7c g     O .rwdata	00000180 alt_fd_list
00811328 g     F .text	00000090 alt_find_dev
008070d0 g     F .text	00000148 memcpy
00800d58 g     F .text	0000000c _cleanup_r
0080db5c g     F .text	000000dc .hidden __floatsidf
008118fc g     F .text	0000007c alt_io_redirect
0080c9d4 g     F .text	000000f4 .hidden __ltdf2
00811fe4 g       *ABS*	00000000 __DTOR_END__
00811bb4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00808274 g     F .text	00000074 __fpclassifyd
00807ff8 g     F .text	000000a4 __ratio
008099cc g     F .text	0000001c __vfiprintf_internal
008006f8 g     F .text	00000204 pedestrian_tlc
0080f458 g     F .text	0000021c altera_avalon_jtag_uart_read
008023fc g     F .text	00000030 _printf_r
00800b9c g     F .text	00000064 .hidden __udivsi3
0080e250 g     F .text	000000a4 isatty
00812104 g     O .rodata	000000c8 __mprec_tens
00800368 g     F .text	00000028 ResetAllStates
00806f2c g     F .text	0000000c __locale_charset
00811b24 g     F .text	00000090 alt_icache_flush
00815fb4 g     O .bss	00000004 __malloc_top_pad
00814268 g     O .rwdata	00000004 __mb_cur_max
00806f5c g     F .text	0000000c _localeconv_r
00809d70 g     F .text	000004bc __sfvwrite_r
00807624 g     F .text	0000003c __i2b
008026e0 g     F .text	00000054 _sbrk_r
008009e8 g     F .text	0000002c configurable_tlc
00808214 g     F .text	00000060 _read_r
00814280 g     O .rwdata	00000004 alt_max_fd
008065d0 g     F .text	000000f0 _fclose_r
00814248 g     O .rwdata	00000004 t2
0080694c g     F .text	00000030 fflush
00815fb0 g     O .bss	00000004 __malloc_max_sbrked_mem
0080e094 g     F .text	00000180 alt_irq_register
00800c58 g     F .text	00000070 _fgetc_r
0080b6dc g     F .text	000008ac .hidden __adddf3
00807da0 g     F .text	0000010c __b2d
0080b1a4 g     F .text	00000538 .hidden __umoddi3
0080e41c g     F .text	000000d4 lseek
00814258 g     O .rwdata	00000004 _global_impure_ptr
0080a388 g     F .text	00000564 _realloc_r
00816120 g       *ABS*	00000000 __bss_end
00811748 g     F .text	000000f0 alt_iic_isr_register
0080eaf0 g     F .text	00000108 alt_tick
0080ac2c g     F .text	00000578 .hidden __udivdi3
00809ccc g     F .text	00000024 _fputwc_r
008120dc g     O .rodata	00000028 __mprec_bigtens
00807408 g     F .text	00000104 __s2b
0080dc38 g     F .text	000000a8 .hidden __floatunsidf
00807ae0 g     F .text	00000060 __mcmp
00810978 g     F .text	000000ac altera_avalon_uart_init
008010c0 g     F .text	00000018 __fp_lock_all
008116fc g     F .text	0000004c alt_ic_irq_enabled
0080ea54 g     F .text	0000009c alt_alarm_stop
00815fc4 g     O .bss	00000004 alt_irq_active
00801268 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00812e54 g     O .rwdata	00000028 alt_dev_null
00815fa4 g     O .bss	00000004 NS_Ped
00811140 g     F .text	00000048 alt_dcache_flush_all
0080750c g     F .text	00000068 __hi0bits
0080dadc g     F .text	00000080 .hidden __fixdfsi
00814250 g     O .rwdata	00000004 t4
008142a0 g       *ABS*	00000000 __ram_rwdata_end
00814278 g     O .rwdata	00000008 alt_dev_list
0080ec34 g     F .text	000000f8 write
008125b0 g       *ABS*	00000000 __ram_rodata_end
0080dfe4 g     F .text	000000b0 fstat
00801224 g     F .text	00000024 fprintf
0080c9d4 g     F .text	000000f4 .hidden __ledf2
00807858 g     F .text	00000140 __pow5mult
00808570 g     F .text	0000145c ___vfiprintf_internal_r
00815fc0 g     O .bss	00000004 __nlocale_changed
00800c00 g     F .text	00000058 .hidden __umodsi3
00816120 g       *ABS*	00000000 end
0081005c g     F .text	000004d8 altera_avalon_lcd_16207_write
008016ac g     F .text	0000001c fseeko
00810f94 g     F .text	000001ac altera_avalon_uart_write
0080124c g     F .text	0000001c fseek
0080ef94 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00811fe4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008107ec g     F .text	0000007c alt_avalon_timer_sc_init
008108c8 g     F .text	00000060 altera_avalon_uart_write_fd
0080dce0 g     F .text	00000064 .hidden __clzsi2
00810928 g     F .text	00000050 altera_avalon_uart_close_fd
0080f674 g     F .text	00000224 altera_avalon_jtag_uart_write
008010b0 g     F .text	00000004 __sfp_lock_acquire
00806fec g     F .text	000000e4 memchr
00802870 g     F .text	000021f8 ___vfprintf_internal_r
00806b4c g     F .text	00000310 _free_r
00806f38 g     F .text	00000010 __locale_mb_cur_max
00811e30 g     F .text	00000180 __call_exitprocs
00802658 g     F .text	00000074 __srget_r
00815fbc g     O .bss	00000004 __mlocale_changed
00814260 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00815fd4 g     O .bss	00000004 _alt_tick_rate
00807998 g     F .text	00000148 __lshift
00815fd8 g     O .bss	00000004 _alt_nticks
0080e844 g     F .text	000000fc read
0080ed98 g     F .text	00000098 alt_sys_init
0080239c g     F .text	00000060 _open_r
00811d18 g     F .text	00000118 __register_exitproc
00807660 g     F .text	000001f8 __multiply
0080f300 g     F .text	00000068 altera_avalon_jtag_uart_close
008125b0 g       *ABS*	00000000 __ram_rwdata_start
00811fe4 g       *ABS*	00000000 __ram_rodata_start
00815fe0 g     O .bss	00000028 __malloc_current_mallinfo
00807eac g     F .text	0000014c __d2b
0080ee30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008114c0 g     F .text	000000a4 alt_get_fd
008119cc g     F .text	00000158 alt_busy_sleep
00804cf4 g     F .text	00000054 _close_r
00811c9c g     F .text	0000007c memcmp
0080eef0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00816120 g       *ABS*	00000000 __alt_stack_base
0080ef40 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00815f94 g     O .bss	00000004 mode1State
00804ba0 g     F .text	00000154 __swsetup_r
0080bf88 g     F .text	000008e8 .hidden __divdf3
00800f70 g     F .text	00000118 __sfp
00808110 g     F .text	00000078 __copybits
008129d4 g     O .rwdata	00000408 __malloc_av_
008010bc g     F .text	00000004 __sinit_lock_release
0080cac8 g     F .text	00000718 .hidden __muldf3
00802734 g     F .text	00000054 __sread
008113b8 g     F .text	00000108 alt_find_file
008111c4 g     F .text	000000a4 alt_dev_llist_insert
0080e56c g     F .text	00000024 __malloc_lock
008011fc g     F .text	00000028 _fprintf_r
0080e9a4 g     F .text	000000b0 sbrk
008068f0 g     F .text	0000005c _fflush_r
00809aa4 g     F .text	000000c4 _calloc_r
00814244 g     O .rwdata	00000004 t1
008011e4 g     F .text	00000018 fopen
00815f90 g       *ABS*	00000000 __bss_start
00802274 g     F .text	00000128 memset
00800314 g     F .text	00000054 main
00815fd0 g     O .bss	00000004 alt_envp
00815fac g     O .bss	00000004 __malloc_max_total_mem
0080ee90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080aa2c g     F .text	00000018 __swbuf
008105e0 g     F .text	00000134 altera_avalon_lcd_16207_init
00802868 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008066c0 g     F .text	00000014 fclose
00804f48 g     F .text	00001688 _dtoa_r
00801a68 g     F .text	0000080c _malloc_r
00815f90 g     O .bss	00000004 timer_has_started
0080aba0 g     F .text	00000030 __ascii_wctomb
00814284 g     O .rwdata	00000004 alt_errno
008008fc g     F .text	000000ec NSEW_ped_isr
00801724 g     F .text	000000c4 _fwalk
00800aa4 g     F .text	00000084 .hidden __divsi3
00806a28 g     F .text	00000124 _malloc_trim_r
00811fe4 g       *ABS*	00000000 __CTOR_END__
008082e8 g     F .text	000000dc strcmp
00811fe4 g       *ABS*	00000000 __flash_rodata_start
00811fe4 g       *ABS*	00000000 __DTOR_LIST__
0080c870 g     F .text	00000088 .hidden __nedf2
0080ed60 g     F .text	00000038 alt_irq_init
0080e940 g     F .text	00000064 alt_release_fd
00815fa0 g     O .bss	00000004 EW_Ped
00800cc8 g     F .text	00000088 fgetc
008121ec g     O .rodata	00000100 .hidden __clz_tab
00815fb8 g     O .bss	00000004 _PathLocale
00811c50 g     F .text	00000014 atexit
00804b40 g     F .text	00000060 _write_r
00806f68 g     F .text	00000018 setlocale
0081425c g     O .rwdata	00000004 _impure_ptr
00815fc8 g     O .bss	00000004 alt_argc
008066d4 g     F .text	0000021c __sflush_r
00814240 g     O .rwdata	00000004 t0
008112c8 g     F .text	00000060 _do_dtors
00806f54 g     F .text	00000008 __locale_cjk_lang
00801248 g     F .text	00000004 _fseek_r
00800a14 g     F .text	00000090 timeout_data_handler
00802484 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00807d3c g     F .text	00000064 __ulp
008010d8 g     F .text	00000018 __fp_unlock_all
00810714 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00814270 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806f80 g     F .text	0000000c localeconv
00811598 g     F .text	00000050 alt_ic_isr_register
008142a0 g       *ABS*	00000000 _edata
00810868 g     F .text	00000060 altera_avalon_uart_read_fd
00816120 g       *ABS*	00000000 _end
00809b68 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080f368 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00815f9c g     O .bss	00000004 currentTimeOut
00811670 g     F .text	0000008c alt_ic_irq_disable
00802790 g     F .text	0000007c __swrite
00814264 g     O .rwdata	00000004 __malloc_trim_threshold
00806f48 g     F .text	0000000c __locale_msgcharset
00811c64 g     F .text	00000038 exit
008017e8 g     F .text	000000c4 _fwalk_reent
00800390 g     F .text	00000124 UpdateMode
00807b40 g     F .text	000001fc __mdiff
00800570 g     F .text	0000012c simple_tlc
00800b28 g     F .text	00000074 .hidden __modsi3
0081429c g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008010b4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081232e g     O .rodata	00000101 _ctype_
00810cec g     F .text	00000054 altera_avalon_uart_close
008010f0 g     F .text	000000f4 _fopen_r
00811fb0 g     F .text	00000034 _exit
0080dd44 g     F .text	0000012c alt_alarm_start
008018ac g     F .text	000001bc __smakebuf_r
008083c4 g     F .text	00000098 strlen
0080e6b4 g     F .text	00000154 open
0080c8f8 g     F .text	000000dc .hidden __gedf2
0081426c g     O .rwdata	00000004 __wctomb
00808558 g     F .text	00000018 __sprint_r
00811564 g     F .text	00000034 alt_icache_flush_all
00814288 g     O .rwdata	00000004 alt_priority_mask
008115e8 g     F .text	00000088 alt_ic_irq_enable
00804a68 g     F .text	0000001c __vfprintf_internal
00810d7c g     F .text	000001dc altera_avalon_uart_read
0080abd0 g     F .text	0000005c _wctomb_r
0080d1e0 g     F .text	000008fc .hidden __subdf3
00807574 g     F .text	000000b0 __lo0bits
00814290 g     O .rwdata	00000008 alt_alarm_list
00811268 g     F .text	00000060 _do_ctors
0080aae0 g     F .text	000000c0 wcrtomb
0080deac g     F .text	000000d0 close
0080069c g     F .text	0000005c init_buttons_pio
0080e35c g     F .text	00000084 alt_load
00809cf0 g     F .text	00000080 fputwc
008010b8 g     F .text	00000004 __sinit_lock_acquire
008072e8 g     F .text	00000120 __multadd
008072c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10980804 	addi	r2,r2,24608
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10980804 	addi	r2,r2,24608
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76717 	ldw	r2,-25188(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76717 	ldw	r2,-25188(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b09014 	ori	gp,gp,49728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	1097e414 	ori	r2,r2,24464

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18d84814 	ori	r3,r3,24864

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080e35c0 	call	80e35c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080e4f00 	call	80e4f0 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <tlc_timer_isr>:
// Pedestrian flags
volatile int EW_Ped = 0;
volatile int NS_Ped = 0;


alt_u32 tlc_timer_isr(void* context) {
  800290:	defffc04 	addi	sp,sp,-16
  800294:	dfc00315 	stw	ra,12(sp)
  800298:	df000215 	stw	fp,8(sp)
  80029c:	df000204 	addi	fp,sp,8
  8002a0:	e13fff15 	stw	r4,-4(fp)
	enum OpperationMode *currentMode = (unsigned int*) context;
  8002a4:	e0bfff17 	ldw	r2,-4(fp)
  8002a8:	e0bffe15 	stw	r2,-8(fp)

	UpdateMode(currentMode);
  8002ac:	e13ffe17 	ldw	r4,-8(fp)
  8002b0:	08003900 	call	800390 <UpdateMode>

	switch ((*currentMode)) {
  8002b4:	e0bffe17 	ldw	r2,-8(fp)
  8002b8:	10800017 	ldw	r2,0(r2)
  8002bc:	10c000a0 	cmpeqi	r3,r2,2
  8002c0:	18000a1e 	bne	r3,zero,8002ec <tlc_timer_isr+0x5c>
  8002c4:	10c000e8 	cmpgeui	r3,r2,3
  8002c8:	1800031e 	bne	r3,zero,8002d8 <tlc_timer_isr+0x48>
  8002cc:	10800060 	cmpeqi	r2,r2,1
  8002d0:	1000041e 	bne	r2,zero,8002e4 <tlc_timer_isr+0x54>
  8002d4:	00000906 	br	8002fc <tlc_timer_isr+0x6c>
  8002d8:	108000e0 	cmpeqi	r2,r2,3
  8002dc:	1000051e 	bne	r2,zero,8002f4 <tlc_timer_isr+0x64>
		break;
	case Mode3:
		configurable_tlc();
		break;
	case Mode4:
		break;
  8002e0:	00000606 	br	8002fc <tlc_timer_isr+0x6c>

	UpdateMode(currentMode);

	switch ((*currentMode)) {
	case Mode1:
		simple_tlc();
  8002e4:	08005700 	call	800570 <simple_tlc>
		break;
  8002e8:	00000406 	br	8002fc <tlc_timer_isr+0x6c>
	case Mode2:
		pedestrian_tlc();
  8002ec:	08006f80 	call	8006f8 <pedestrian_tlc>
		break;
  8002f0:	00000206 	br	8002fc <tlc_timer_isr+0x6c>
	case Mode3:
		configurable_tlc();
  8002f4:	08009e80 	call	8009e8 <configurable_tlc>
		break;
  8002f8:	0001883a 	nop
	case Mode4:
		break;
	}

	return currentTimeOut;
  8002fc:	d0a75717 	ldw	r2,-25252(gp)
}
  800300:	e037883a 	mov	sp,fp
  800304:	dfc00117 	ldw	ra,4(sp)
  800308:	df000017 	ldw	fp,0(sp)
  80030c:	dec00204 	addi	sp,sp,8
  800310:	f800283a 	ret

00800314 <main>:



int main() {
  800314:	defffc04 	addi	sp,sp,-16
  800318:	dfc00315 	stw	ra,12(sp)
  80031c:	df000215 	stw	fp,8(sp)
  800320:	df000204 	addi	fp,sp,8

	enum OpperationMode currentMode = Mode1;
  800324:	00800044 	movi	r2,1
  800328:	e0bfff15 	stw	r2,-4(fp)
	lcd_set_mode(currentMode);
  80032c:	e0bfff17 	ldw	r2,-4(fp)
  800330:	1009883a 	mov	r4,r2
  800334:	08004f00 	call	8004f0 <lcd_set_mode>
	void* timerContext = (void*) &currentMode;
  800338:	e0bfff04 	addi	r2,fp,-4
  80033c:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_start(&timer, LIGHT_TRANSITION_TIME, tlc_timer_isr, timerContext); //Start the timer
  800340:	e1fffe17 	ldw	r7,-8(fp)
  800344:	01802034 	movhi	r6,128
  800348:	3180a404 	addi	r6,r6,656
  80034c:	0140fa04 	movi	r5,1000
  800350:	01002074 	movhi	r4,129
  800354:	21180204 	addi	r4,r4,24584
  800358:	080dd440 	call	80dd44 <alt_alarm_start>
	init_buttons_pio();
  80035c:	080069c0 	call	80069c <init_buttons_pio>
	//printf("currentMode %d\n", *currentMode);
	timeout_data_handler();
  800360:	0800a140 	call	800a14 <timeout_data_handler>

	while(1){
	}
  800364:	003fff06 	br	800364 <__alt_mem_onchip_mem+0xff7f8364>

00800368 <ResetAllStates>:
	return 0;
}

void ResetAllStates(void){
  800368:	deffff04 	addi	sp,sp,-4
  80036c:	df000015 	stw	fp,0(sp)
  800370:	d839883a 	mov	fp,sp
	mode1State = 0;
  800374:	d0275515 	stw	zero,-25260(gp)
	mode2State = 0;
  800378:	d0275615 	stw	zero,-25256(gp)
}
  80037c:	0001883a 	nop
  800380:	e037883a 	mov	sp,fp
  800384:	df000017 	ldw	fp,0(sp)
  800388:	dec00104 	addi	sp,sp,4
  80038c:	f800283a 	ret

00800390 <UpdateMode>:

void UpdateMode(enum OpperationMode *currentMode){
  800390:	defffc04 	addi	sp,sp,-16
  800394:	dfc00315 	stw	ra,12(sp)
  800398:	df000215 	stw	fp,8(sp)
  80039c:	df000204 	addi	fp,sp,8
  8003a0:	e13fff15 	stw	r4,-4(fp)

	if (InSafeState()) { //Only change mode when in a safe state.
  8003a4:	08004b40 	call	8004b4 <InSafeState>
  8003a8:	10003c26 	beq	r2,zero,80049c <UpdateMode+0x10c>
		unsigned int modeSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8003ac:	00804074 	movhi	r2,257
  8003b0:	10842404 	addi	r2,r2,4240
  8003b4:	10800037 	ldwio	r2,0(r2)
  8003b8:	e0bffe15 	stw	r2,-8(fp)
		if ((modeSwitchValue & 1<<0)) {
  8003bc:	e0bffe17 	ldw	r2,-8(fp)
  8003c0:	1080004c 	andi	r2,r2,1
  8003c4:	10000b26 	beq	r2,zero,8003f4 <UpdateMode+0x64>
			if (*currentMode != Mode1){
  8003c8:	e0bfff17 	ldw	r2,-4(fp)
  8003cc:	10800017 	ldw	r2,0(r2)
  8003d0:	10800060 	cmpeqi	r2,r2,1
  8003d4:	1000031e 	bne	r2,zero,8003e4 <UpdateMode+0x54>
				lcd_set_mode(Mode1);
  8003d8:	01000044 	movi	r4,1
  8003dc:	08004f00 	call	8004f0 <lcd_set_mode>
				ResetAllStates();
  8003e0:	08003680 	call	800368 <ResetAllStates>
			}
			(*currentMode) = Mode1;
  8003e4:	e0bfff17 	ldw	r2,-4(fp)
  8003e8:	00c00044 	movi	r3,1
  8003ec:	10c00015 	stw	r3,0(r2)
				ResetAllStates();
			}
			(*currentMode) = Mode4;
		}
	}
	return;
  8003f0:	00002a06 	br	80049c <UpdateMode+0x10c>
				lcd_set_mode(Mode1);
				ResetAllStates();
			}
			(*currentMode) = Mode1;

		} else if ((modeSwitchValue & 1<<1)) {
  8003f4:	e0bffe17 	ldw	r2,-8(fp)
  8003f8:	1080008c 	andi	r2,r2,2
  8003fc:	10000b26 	beq	r2,zero,80042c <UpdateMode+0x9c>
			if (*currentMode != Mode2){
  800400:	e0bfff17 	ldw	r2,-4(fp)
  800404:	10800017 	ldw	r2,0(r2)
  800408:	108000a0 	cmpeqi	r2,r2,2
  80040c:	1000031e 	bne	r2,zero,80041c <UpdateMode+0x8c>
				lcd_set_mode(Mode2);
  800410:	01000084 	movi	r4,2
  800414:	08004f00 	call	8004f0 <lcd_set_mode>
				ResetAllStates();
  800418:	08003680 	call	800368 <ResetAllStates>
			}
			(*currentMode) = Mode2;
  80041c:	e0bfff17 	ldw	r2,-4(fp)
  800420:	00c00084 	movi	r3,2
  800424:	10c00015 	stw	r3,0(r2)
				ResetAllStates();
			}
			(*currentMode) = Mode4;
		}
	}
	return;
  800428:	00001c06 	br	80049c <UpdateMode+0x10c>
			if (*currentMode != Mode2){
				lcd_set_mode(Mode2);
				ResetAllStates();
			}
			(*currentMode) = Mode2;
		} else if ((modeSwitchValue & 1<<2)) {
  80042c:	e0bffe17 	ldw	r2,-8(fp)
  800430:	1080010c 	andi	r2,r2,4
  800434:	10000b26 	beq	r2,zero,800464 <UpdateMode+0xd4>
			if (*currentMode != Mode3){
  800438:	e0bfff17 	ldw	r2,-4(fp)
  80043c:	10800017 	ldw	r2,0(r2)
  800440:	108000e0 	cmpeqi	r2,r2,3
  800444:	1000031e 	bne	r2,zero,800454 <UpdateMode+0xc4>
				lcd_set_mode(Mode3);
  800448:	010000c4 	movi	r4,3
  80044c:	08004f00 	call	8004f0 <lcd_set_mode>
				ResetAllStates();
  800450:	08003680 	call	800368 <ResetAllStates>
			}
			(*currentMode) = Mode3;
  800454:	e0bfff17 	ldw	r2,-4(fp)
  800458:	00c000c4 	movi	r3,3
  80045c:	10c00015 	stw	r3,0(r2)
				ResetAllStates();
			}
			(*currentMode) = Mode4;
		}
	}
	return;
  800460:	00000e06 	br	80049c <UpdateMode+0x10c>
			if (*currentMode != Mode3){
				lcd_set_mode(Mode3);
				ResetAllStates();
			}
			(*currentMode) = Mode3;
		} else if ((modeSwitchValue & 1<<3)) {
  800464:	e0bffe17 	ldw	r2,-8(fp)
  800468:	1080020c 	andi	r2,r2,8
  80046c:	10000b26 	beq	r2,zero,80049c <UpdateMode+0x10c>
			if (*currentMode != Mode4){
  800470:	e0bfff17 	ldw	r2,-4(fp)
  800474:	10800017 	ldw	r2,0(r2)
  800478:	10800120 	cmpeqi	r2,r2,4
  80047c:	1000031e 	bne	r2,zero,80048c <UpdateMode+0xfc>
				lcd_set_mode(Mode4);
  800480:	01000104 	movi	r4,4
  800484:	08004f00 	call	8004f0 <lcd_set_mode>
				ResetAllStates();
  800488:	08003680 	call	800368 <ResetAllStates>
			}
			(*currentMode) = Mode4;
  80048c:	e0bfff17 	ldw	r2,-4(fp)
  800490:	00c00104 	movi	r3,4
  800494:	10c00015 	stw	r3,0(r2)
		}
	}
	return;
  800498:	0001883a 	nop
  80049c:	0001883a 	nop
}
  8004a0:	e037883a 	mov	sp,fp
  8004a4:	dfc00117 	ldw	ra,4(sp)
  8004a8:	df000017 	ldw	fp,0(sp)
  8004ac:	dec00204 	addi	sp,sp,8
  8004b0:	f800283a 	ret

008004b4 <InSafeState>:

int InSafeState (void) {
  8004b4:	deffff04 	addi	sp,sp,-4
  8004b8:	df000015 	stw	fp,0(sp)
  8004bc:	d839883a 	mov	fp,sp
	if(mode1State == 0 || mode1State == 3){
  8004c0:	d0a75517 	ldw	r2,-25260(gp)
  8004c4:	10000326 	beq	r2,zero,8004d4 <InSafeState+0x20>
  8004c8:	d0a75517 	ldw	r2,-25260(gp)
  8004cc:	108000d8 	cmpnei	r2,r2,3
  8004d0:	1000021e 	bne	r2,zero,8004dc <InSafeState+0x28>
		//printf("Mode 1 state %d\n", mode1State);
		return 1;
  8004d4:	00800044 	movi	r2,1
  8004d8:	00000106 	br	8004e0 <InSafeState+0x2c>
	}
	else {
		return 0;
  8004dc:	0005883a 	mov	r2,zero
	}
}
  8004e0:	e037883a 	mov	sp,fp
  8004e4:	df000017 	ldw	fp,0(sp)
  8004e8:	dec00104 	addi	sp,sp,4
  8004ec:	f800283a 	ret

008004f0 <lcd_set_mode>:

void lcd_set_mode(enum OpperationMode currentMode) {
  8004f0:	defffc04 	addi	sp,sp,-16
  8004f4:	dfc00315 	stw	ra,12(sp)
  8004f8:	df000215 	stw	fp,8(sp)
  8004fc:	df000204 	addi	fp,sp,8
  800500:	e13fff15 	stw	r4,-4(fp)
	// Write the current mode to the lcd
	#define ESC 27
	#define CLEAR_LCD_STRING "[2J"
	FILE *lcd;
	lcd = fopen(LCD_NAME, "w");
  800504:	01402074 	movhi	r5,129
  800508:	2947f904 	addi	r5,r5,8164
  80050c:	01002074 	movhi	r4,129
  800510:	2107fa04 	addi	r4,r4,8168
  800514:	08011e40 	call	8011e4 <fopen>
  800518:	e0bffe15 	stw	r2,-8(fp)
	if(lcd != NULL){
  80051c:	e0bffe17 	ldw	r2,-8(fp)
  800520:	10000d26 	beq	r2,zero,800558 <lcd_set_mode+0x68>
		fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800524:	01c02074 	movhi	r7,129
  800528:	39c7fd04 	addi	r7,r7,8180
  80052c:	018006c4 	movi	r6,27
  800530:	01402074 	movhi	r5,129
  800534:	2947fe04 	addi	r5,r5,8184
  800538:	e13ffe17 	ldw	r4,-8(fp)
  80053c:	08012240 	call	801224 <fprintf>
		fprintf(lcd, "MODE: %d\n", currentMode);
  800540:	e1bfff17 	ldw	r6,-4(fp)
  800544:	01402074 	movhi	r5,129
  800548:	29480004 	addi	r5,r5,8192
  80054c:	e13ffe17 	ldw	r4,-8(fp)
  800550:	08012240 	call	801224 <fprintf>
	}
	return;
  800554:	0001883a 	nop
  800558:	0001883a 	nop
}
  80055c:	e037883a 	mov	sp,fp
  800560:	dfc00117 	ldw	ra,4(sp)
  800564:	df000017 	ldw	fp,0(sp)
  800568:	dec00204 	addi	sp,sp,8
  80056c:	f800283a 	ret

00800570 <simple_tlc>:

void simple_tlc() {
  800570:	defffe04 	addi	sp,sp,-8
  800574:	dfc00115 	stw	ra,4(sp)
  800578:	df000015 	stw	fp,0(sp)
  80057c:	d839883a 	mov	fp,sp
	switch ((mode1State)) {
  800580:	d0a75517 	ldw	r2,-25260(gp)
  800584:	10c001a8 	cmpgeui	r3,r2,6
  800588:	1800361e 	bne	r3,zero,800664 <simple_tlc+0xf4>
  80058c:	100690ba 	slli	r3,r2,2
  800590:	00802034 	movhi	r2,128
  800594:	10816904 	addi	r2,r2,1444
  800598:	1885883a 	add	r2,r3,r2
  80059c:	10800017 	ldw	r2,0(r2)
  8005a0:	1000683a 	jmp	r2
  8005a4:	008005bc 	xorhi	r2,zero,22
  8005a8:	008005d8 	cmpnei	r2,zero,23
  8005ac:	008005f4 	movhi	r2,23
  8005b0:	00800610 	cmplti	r2,zero,24
  8005b4:	0080062c 	andhi	r2,zero,24
  8005b8:	00800648 	cmpgei	r2,zero,25
	case 0:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //NS:Red EW:Red (safe state)
  8005bc:	00c00904 	movi	r3,36
  8005c0:	00804074 	movhi	r2,257
  8005c4:	10841c04 	addi	r2,r2,4208
  8005c8:	10c00035 	stwio	r3,0(r2)
		currentTimeOut = t0;
  8005cc:	d0a00017 	ldw	r2,-32768(gp)
  8005d0:	d0a75715 	stw	r2,-25252(gp)

		break;
  8005d4:	00002306 	br	800664 <simple_tlc+0xf4>
	case 1:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //NS:Green EW:Red
  8005d8:	00c00304 	movi	r3,12
  8005dc:	00804074 	movhi	r2,257
  8005e0:	10841c04 	addi	r2,r2,4208
  8005e4:	10c00035 	stwio	r3,0(r2)
		currentTimeOut = t1;
  8005e8:	d0a00117 	ldw	r2,-32764(gp)
  8005ec:	d0a75715 	stw	r2,-25252(gp)
		break;
  8005f0:	00001c06 	br	800664 <simple_tlc+0xf4>
	case 2:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //NS:Yellow EW:Red
  8005f4:	00c00504 	movi	r3,20
  8005f8:	00804074 	movhi	r2,257
  8005fc:	10841c04 	addi	r2,r2,4208
  800600:	10c00035 	stwio	r3,0(r2)
		currentTimeOut = t2;
  800604:	d0a00217 	ldw	r2,-32760(gp)
  800608:	d0a75715 	stw	r2,-25252(gp)

		break;
  80060c:	00001506 	br	800664 <simple_tlc+0xf4>
	case 3:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //NS:Red EW:Red (safe state)
  800610:	00c00904 	movi	r3,36
  800614:	00804074 	movhi	r2,257
  800618:	10841c04 	addi	r2,r2,4208
  80061c:	10c00035 	stwio	r3,0(r2)
		currentTimeOut = t3;
  800620:	d0a00317 	ldw	r2,-32756(gp)
  800624:	d0a75715 	stw	r2,-25252(gp)
		break;
  800628:	00000e06 	br	800664 <simple_tlc+0xf4>
	case 4:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //NS:Red EW:Green
  80062c:	00c00844 	movi	r3,33
  800630:	00804074 	movhi	r2,257
  800634:	10841c04 	addi	r2,r2,4208
  800638:	10c00035 	stwio	r3,0(r2)
		currentTimeOut = t4;
  80063c:	d0a00417 	ldw	r2,-32752(gp)
  800640:	d0a75715 	stw	r2,-25252(gp)
		break;
  800644:	00000706 	br	800664 <simple_tlc+0xf4>
	case 5:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //NS:Red EW:Yellow
  800648:	00c00884 	movi	r3,34
  80064c:	00804074 	movhi	r2,257
  800650:	10841c04 	addi	r2,r2,4208
  800654:	10c00035 	stwio	r3,0(r2)
		currentTimeOut = t5;
  800658:	d0a00517 	ldw	r2,-32748(gp)
  80065c:	d0a75715 	stw	r2,-25252(gp)
		break;
  800660:	0001883a 	nop
	}
	mode1State++;
  800664:	d0a75517 	ldw	r2,-25260(gp)
  800668:	10800044 	addi	r2,r2,1
  80066c:	d0a75515 	stw	r2,-25260(gp)
	mode1State = mode1State%6;
  800670:	d0a75517 	ldw	r2,-25260(gp)
  800674:	01400184 	movi	r5,6
  800678:	1009883a 	mov	r4,r2
  80067c:	0800b280 	call	800b28 <__modsi3>
  800680:	d0a75515 	stw	r2,-25260(gp)
}
  800684:	0001883a 	nop
  800688:	e037883a 	mov	sp,fp
  80068c:	dfc00117 	ldw	ra,4(sp)
  800690:	df000017 	ldw	fp,0(sp)
  800694:	dec00204 	addi	sp,sp,8
  800698:	f800283a 	ret

0080069c <init_buttons_pio>:

void init_buttons_pio(void) {
  80069c:	defffe04 	addi	sp,sp,-8
  8006a0:	dfc00115 	stw	ra,4(sp)
  8006a4:	df000015 	stw	fp,0(sp)
  8006a8:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0); // enable interrupts for buttons
  8006ac:	0007883a 	mov	r3,zero
  8006b0:	00804074 	movhi	r2,257
  8006b4:	10842b04 	addi	r2,r2,4268
  8006b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x3); // enable interrupts for two right buttons.
  8006bc:	00c000c4 	movi	r3,3
  8006c0:	00804074 	movhi	r2,257
  8006c4:	10842a04 	addi	r2,r2,4264
  8006c8:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(KEYS_IRQ,0, NSEW_ped_isr);
  8006cc:	01802034 	movhi	r6,128
  8006d0:	31823f04 	addi	r6,r6,2300
  8006d4:	000b883a 	mov	r5,zero
  8006d8:	01000104 	movi	r4,4
  8006dc:	080e0940 	call	80e094 <alt_irq_register>
}
  8006e0:	0001883a 	nop
  8006e4:	e037883a 	mov	sp,fp
  8006e8:	dfc00117 	ldw	ra,4(sp)
  8006ec:	df000017 	ldw	fp,0(sp)
  8006f0:	dec00204 	addi	sp,sp,8
  8006f4:	f800283a 	ret

008006f8 <pedestrian_tlc>:

void pedestrian_tlc(void) {
  8006f8:	defffd04 	addi	sp,sp,-12
  8006fc:	dfc00215 	stw	ra,8(sp)
  800700:	df000115 	stw	fp,4(sp)
  800704:	df000104 	addi	fp,sp,4
	int current_red_led = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800708:	00804074 	movhi	r2,257
  80070c:	10842004 	addi	r2,r2,4224
  800710:	10800037 	ldwio	r2,0(r2)
  800714:	e0bfff15 	stw	r2,-4(fp)
	switch ((mode2State)) {
  800718:	d0a75617 	ldw	r2,-25256(gp)
  80071c:	10c001a8 	cmpgeui	r3,r2,6
  800720:	1800681e 	bne	r3,zero,8008c4 <pedestrian_tlc+0x1cc>
  800724:	100690ba 	slli	r3,r2,2
  800728:	00802034 	movhi	r2,128
  80072c:	1081cf04 	addi	r2,r2,1852
  800730:	1885883a 	add	r2,r3,r2
  800734:	10800017 	ldw	r2,0(r2)
  800738:	1000683a 	jmp	r2
  80073c:	00800754 	movui	r2,29
  800740:	00800770 	cmpltui	r2,zero,29
  800744:	008007cc 	andi	r2,zero,31
  800748:	0080080c 	andi	r2,zero,32
  80074c:	00800828 	cmpgeui	r2,zero,32
  800750:	00800884 	movi	r2,34
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //NS:Red EW:Red (safe state)
  800754:	00c00904 	movi	r3,36
  800758:	00804074 	movhi	r2,257
  80075c:	10841c04 	addi	r2,r2,4208
  800760:	10c00035 	stwio	r3,0(r2)
			currentTimeOut = t0;
  800764:	d0a00017 	ldw	r2,-32768(gp)
  800768:	d0a75715 	stw	r2,-25252(gp)
			break;
  80076c:	00005506 	br	8008c4 <pedestrian_tlc+0x1cc>
		case 1:
			current_red_led = current_red_led & ~(1<<1);
  800770:	e0ffff17 	ldw	r3,-4(fp)
  800774:	00bfff44 	movi	r2,-3
  800778:	1884703a 	and	r2,r3,r2
  80077c:	e0bfff15 	stw	r2,-4(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, current_red_led);
  800780:	00804074 	movhi	r2,257
  800784:	10842004 	addi	r2,r2,4224
  800788:	e0ffff17 	ldw	r3,-4(fp)
  80078c:	10c00035 	stwio	r3,0(r2)
			if (NS_Ped == 1){
  800790:	d0a75917 	ldw	r2,-25244(gp)
  800794:	10800058 	cmpnei	r2,r2,1
  800798:	1000051e 	bne	r2,zero,8007b0 <pedestrian_tlc+0xb8>
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //NS:Green EW:Red
  80079c:	00c02304 	movi	r3,140
  8007a0:	00804074 	movhi	r2,257
  8007a4:	10841c04 	addi	r2,r2,4208
  8007a8:	10c00035 	stwio	r3,0(r2)
  8007ac:	00000406 	br	8007c0 <pedestrian_tlc+0xc8>
			}else {
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //NS:Green EW:Red
  8007b0:	00c00304 	movi	r3,12
  8007b4:	00804074 	movhi	r2,257
  8007b8:	10841c04 	addi	r2,r2,4208
  8007bc:	10c00035 	stwio	r3,0(r2)
			}
			currentTimeOut = t1;
  8007c0:	d0a00117 	ldw	r2,-32764(gp)
  8007c4:	d0a75715 	stw	r2,-25252(gp)
			break;
  8007c8:	00003e06 	br	8008c4 <pedestrian_tlc+0x1cc>
		case 2:

			if (NS_Ped == 1){
  8007cc:	d0a75917 	ldw	r2,-25244(gp)
  8007d0:	10800058 	cmpnei	r2,r2,1
  8007d4:	1000061e 	bne	r2,zero,8007f0 <pedestrian_tlc+0xf8>
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10010100); //NS:Yellow EW:Red
  8007d8:	00c02504 	movi	r3,148
  8007dc:	00804074 	movhi	r2,257
  8007e0:	10841c04 	addi	r2,r2,4208
  8007e4:	10c00035 	stwio	r3,0(r2)

				NS_Ped = 0;
  8007e8:	d0275915 	stw	zero,-25244(gp)
  8007ec:	00000406 	br	800800 <pedestrian_tlc+0x108>
			} else {
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //NS:Yellow EW:Red
  8007f0:	00c00504 	movi	r3,20
  8007f4:	00804074 	movhi	r2,257
  8007f8:	10841c04 	addi	r2,r2,4208
  8007fc:	10c00035 	stwio	r3,0(r2)
			}
			currentTimeOut = t2;
  800800:	d0a00217 	ldw	r2,-32760(gp)
  800804:	d0a75715 	stw	r2,-25252(gp)
			break;
  800808:	00002e06 	br	8008c4 <pedestrian_tlc+0x1cc>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //NS:Red EW:Red (safe state)
  80080c:	00c00904 	movi	r3,36
  800810:	00804074 	movhi	r2,257
  800814:	10841c04 	addi	r2,r2,4208
  800818:	10c00035 	stwio	r3,0(r2)
			currentTimeOut = t3;
  80081c:	d0a00317 	ldw	r2,-32756(gp)
  800820:	d0a75715 	stw	r2,-25252(gp)
			break;
  800824:	00002706 	br	8008c4 <pedestrian_tlc+0x1cc>
		case 4:
			current_red_led = current_red_led & ~(1<<0);
  800828:	e0ffff17 	ldw	r3,-4(fp)
  80082c:	00bfff84 	movi	r2,-2
  800830:	1884703a 	and	r2,r3,r2
  800834:	e0bfff15 	stw	r2,-4(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, current_red_led);
  800838:	00804074 	movhi	r2,257
  80083c:	10842004 	addi	r2,r2,4224
  800840:	e0ffff17 	ldw	r3,-4(fp)
  800844:	10c00035 	stwio	r3,0(r2)

			if (EW_Ped == 1) {
  800848:	d0a75817 	ldw	r2,-25248(gp)
  80084c:	10800058 	cmpnei	r2,r2,1
  800850:	1000051e 	bne	r2,zero,800868 <pedestrian_tlc+0x170>
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //NS:Red EW:Green
  800854:	00c01844 	movi	r3,97
  800858:	00804074 	movhi	r2,257
  80085c:	10841c04 	addi	r2,r2,4208
  800860:	10c00035 	stwio	r3,0(r2)
  800864:	00000406 	br	800878 <pedestrian_tlc+0x180>
			}else{
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //NS:Red EW:Green
  800868:	00c00844 	movi	r3,33
  80086c:	00804074 	movhi	r2,257
  800870:	10841c04 	addi	r2,r2,4208
  800874:	10c00035 	stwio	r3,0(r2)
			}
			currentTimeOut = t4;
  800878:	d0a00417 	ldw	r2,-32752(gp)
  80087c:	d0a75715 	stw	r2,-25252(gp)
			break;
  800880:	00001006 	br	8008c4 <pedestrian_tlc+0x1cc>
		case 5:
			if (EW_Ped == 1) {
  800884:	d0a75817 	ldw	r2,-25248(gp)
  800888:	10800058 	cmpnei	r2,r2,1
  80088c:	1000061e 	bne	r2,zero,8008a8 <pedestrian_tlc+0x1b0>
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100010); //NS:Red EW:Yellow
  800890:	00c01884 	movi	r3,98
  800894:	00804074 	movhi	r2,257
  800898:	10841c04 	addi	r2,r2,4208
  80089c:	10c00035 	stwio	r3,0(r2)
				EW_Ped = 0;
  8008a0:	d0275815 	stw	zero,-25248(gp)
  8008a4:	00000406 	br	8008b8 <pedestrian_tlc+0x1c0>
			} else {
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //NS:Red EW:Yellow
  8008a8:	00c00884 	movi	r3,34
  8008ac:	00804074 	movhi	r2,257
  8008b0:	10841c04 	addi	r2,r2,4208
  8008b4:	10c00035 	stwio	r3,0(r2)
			}
			currentTimeOut = t5;
  8008b8:	d0a00517 	ldw	r2,-32748(gp)
  8008bc:	d0a75715 	stw	r2,-25252(gp)
			break;
  8008c0:	0001883a 	nop
		}
		mode2State++;
  8008c4:	d0a75617 	ldw	r2,-25256(gp)
  8008c8:	10800044 	addi	r2,r2,1
  8008cc:	d0a75615 	stw	r2,-25256(gp)
		mode2State = mode2State%6;
  8008d0:	d0a75617 	ldw	r2,-25256(gp)
  8008d4:	01400184 	movi	r5,6
  8008d8:	1009883a 	mov	r4,r2
  8008dc:	0800b280 	call	800b28 <__modsi3>
  8008e0:	d0a75615 	stw	r2,-25256(gp)
}
  8008e4:	0001883a 	nop
  8008e8:	e037883a 	mov	sp,fp
  8008ec:	dfc00117 	ldw	ra,4(sp)
  8008f0:	df000017 	ldw	fp,0(sp)
  8008f4:	dec00204 	addi	sp,sp,8
  8008f8:	f800283a 	ret

008008fc <NSEW_ped_isr>:



void NSEW_ped_isr(void* context, alt_u32 id) {
  8008fc:	defffb04 	addi	sp,sp,-20
  800900:	df000415 	stw	fp,16(sp)
  800904:	df000404 	addi	fp,sp,16
  800908:	e13ffe15 	stw	r4,-8(fp)
  80090c:	e17fff15 	stw	r5,-4(fp)
	unsigned int buttonValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  800910:	00804074 	movhi	r2,257
  800914:	10842804 	addi	r2,r2,4256
  800918:	10800037 	ldwio	r2,0(r2)
  80091c:	e0bffc15 	stw	r2,-16(fp)
	int current_red_led = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800920:	00804074 	movhi	r2,257
  800924:	10842004 	addi	r2,r2,4224
  800928:	10800037 	ldwio	r2,0(r2)
  80092c:	e0bffd15 	stw	r2,-12(fp)

	if (!(buttonValue & 1<<0)) {
  800930:	e0bffc17 	ldw	r2,-16(fp)
  800934:	1080004c 	andi	r2,r2,1
  800938:	1000101e 	bne	r2,zero,80097c <NSEW_ped_isr+0x80>
		// Only accept pedestrian button when condition matches x,R
		if (!(mode2State == 4 || mode2State == 5)) {
  80093c:	d0a75617 	ldw	r2,-25256(gp)
  800940:	10800120 	cmpeqi	r2,r2,4
  800944:	10001f1e 	bne	r2,zero,8009c4 <NSEW_ped_isr+0xc8>
  800948:	d0a75617 	ldw	r2,-25256(gp)
  80094c:	10800160 	cmpeqi	r2,r2,5
  800950:	10001c1e 	bne	r2,zero,8009c4 <NSEW_ped_isr+0xc8>
			EW_Ped = 1;
  800954:	00800044 	movi	r2,1
  800958:	d0a75815 	stw	r2,-25248(gp)
			current_red_led = current_red_led | 0b01;
  80095c:	e0bffd17 	ldw	r2,-12(fp)
  800960:	10800054 	ori	r2,r2,1
  800964:	e0bffd15 	stw	r2,-12(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, current_red_led);
  800968:	00804074 	movhi	r2,257
  80096c:	10842004 	addi	r2,r2,4224
  800970:	e0fffd17 	ldw	r3,-12(fp)
  800974:	10c00035 	stwio	r3,0(r2)
  800978:	00001206 	br	8009c4 <NSEW_ped_isr+0xc8>

		}

	} else if (!(buttonValue & 1<<1)) {
  80097c:	e0bffc17 	ldw	r2,-16(fp)
  800980:	1080008c 	andi	r2,r2,2
  800984:	10000f1e 	bne	r2,zero,8009c4 <NSEW_ped_isr+0xc8>
		// Only accept pedestrian button when condition matches R,x
		if (!(mode2State == 1 || mode2State == 2)) {
  800988:	d0a75617 	ldw	r2,-25256(gp)
  80098c:	10800060 	cmpeqi	r2,r2,1
  800990:	10000c1e 	bne	r2,zero,8009c4 <NSEW_ped_isr+0xc8>
  800994:	d0a75617 	ldw	r2,-25256(gp)
  800998:	108000a0 	cmpeqi	r2,r2,2
  80099c:	1000091e 	bne	r2,zero,8009c4 <NSEW_ped_isr+0xc8>
			NS_Ped = 1;
  8009a0:	00800044 	movi	r2,1
  8009a4:	d0a75915 	stw	r2,-25244(gp)
			current_red_led = current_red_led | 0b10;
  8009a8:	e0bffd17 	ldw	r2,-12(fp)
  8009ac:	10800094 	ori	r2,r2,2
  8009b0:	e0bffd15 	stw	r2,-12(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, current_red_led);
  8009b4:	00804074 	movhi	r2,257
  8009b8:	10842004 	addi	r2,r2,4224
  8009bc:	e0fffd17 	ldw	r3,-12(fp)
  8009c0:	10c00035 	stwio	r3,0(r2)
		}
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8009c4:	0007883a 	mov	r3,zero
  8009c8:	00804074 	movhi	r2,257
  8009cc:	10842b04 	addi	r2,r2,4268
  8009d0:	10c00035 	stwio	r3,0(r2)
}
  8009d4:	0001883a 	nop
  8009d8:	e037883a 	mov	sp,fp
  8009dc:	df000017 	ldw	fp,0(sp)
  8009e0:	dec00104 	addi	sp,sp,4
  8009e4:	f800283a 	ret

008009e8 <configurable_tlc>:

void configurable_tlc(void){
  8009e8:	defffe04 	addi	sp,sp,-8
  8009ec:	dfc00115 	stw	ra,4(sp)
  8009f0:	df000015 	stw	fp,0(sp)
  8009f4:	d839883a 	mov	fp,sp
	//timeout_data_handler();
	pedestrian_tlc();
  8009f8:	08006f80 	call	8006f8 <pedestrian_tlc>
}
  8009fc:	0001883a 	nop
  800a00:	e037883a 	mov	sp,fp
  800a04:	dfc00117 	ldw	ra,4(sp)
  800a08:	df000017 	ldw	fp,0(sp)
  800a0c:	dec00204 	addi	sp,sp,8
  800a10:	f800283a 	ret

00800a14 <timeout_data_handler>:

void timeout_data_handler(void){
  800a14:	defffb04 	addi	sp,sp,-20
  800a18:	dfc00415 	stw	ra,16(sp)
  800a1c:	df000315 	stw	fp,12(sp)
  800a20:	df000304 	addi	fp,sp,12
	if (InSafeState()) { //Only update time values when in a safe state.
  800a24:	08004b40 	call	8004b4 <InSafeState>
  800a28:	10001826 	beq	r2,zero,800a8c <timeout_data_handler+0x78>
		unsigned int modeSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800a2c:	00804074 	movhi	r2,257
  800a30:	10842404 	addi	r2,r2,4240
  800a34:	10800037 	ldwio	r2,0(r2)
  800a38:	e0bffd15 	stw	r2,-12(fp)
		if ((modeSwitchValue & 1<<17)) {
  800a3c:	e0bffd17 	ldw	r2,-12(fp)
  800a40:	108000ac 	andhi	r2,r2,2
  800a44:	10001126 	beq	r2,zero,800a8c <timeout_data_handler+0x78>
			FILE* fp;
			fp = fopen(UART_NAME, "r+");
  800a48:	01402074 	movhi	r5,129
  800a4c:	29480304 	addi	r5,r5,8204
  800a50:	01002074 	movhi	r4,129
  800a54:	21080404 	addi	r4,r4,8208
  800a58:	08011e40 	call	8011e4 <fopen>
  800a5c:	e0bffe15 	stw	r2,-8(fp)
			if (fp != NULL) {
  800a60:	e0bffe17 	ldw	r2,-8(fp)
  800a64:	10000926 	beq	r2,zero,800a8c <timeout_data_handler+0x78>
				while(1){
					char letter = fgetc(fp);
  800a68:	e13ffe17 	ldw	r4,-8(fp)
  800a6c:	0800cc80 	call	800cc8 <fgetc>
  800a70:	e0bfff05 	stb	r2,-4(fp)
					printf("%c \n", letter);
  800a74:	e0bfff07 	ldb	r2,-4(fp)
  800a78:	100b883a 	mov	r5,r2
  800a7c:	01002074 	movhi	r4,129
  800a80:	21080704 	addi	r4,r4,8220
  800a84:	080242c0 	call	80242c <printf>
				}
  800a88:	003ff706 	br	800a68 <__alt_mem_onchip_mem+0xff7f8a68>
				fclose(fp);
			}
		}
	}
}
  800a8c:	0001883a 	nop
  800a90:	e037883a 	mov	sp,fp
  800a94:	dfc00117 	ldw	ra,4(sp)
  800a98:	df000017 	ldw	fp,0(sp)
  800a9c:	dec00204 	addi	sp,sp,8
  800aa0:	f800283a 	ret

00800aa4 <__divsi3>:
  800aa4:	20001b16 	blt	r4,zero,800b14 <__divsi3+0x70>
  800aa8:	000f883a 	mov	r7,zero
  800aac:	28001616 	blt	r5,zero,800b08 <__divsi3+0x64>
  800ab0:	200d883a 	mov	r6,r4
  800ab4:	29001a2e 	bgeu	r5,r4,800b20 <__divsi3+0x7c>
  800ab8:	00800804 	movi	r2,32
  800abc:	00c00044 	movi	r3,1
  800ac0:	00000106 	br	800ac8 <__divsi3+0x24>
  800ac4:	10000d26 	beq	r2,zero,800afc <__divsi3+0x58>
  800ac8:	294b883a 	add	r5,r5,r5
  800acc:	10bfffc4 	addi	r2,r2,-1
  800ad0:	18c7883a 	add	r3,r3,r3
  800ad4:	293ffb36 	bltu	r5,r4,800ac4 <__alt_mem_onchip_mem+0xff7f8ac4>
  800ad8:	0005883a 	mov	r2,zero
  800adc:	18000726 	beq	r3,zero,800afc <__divsi3+0x58>
  800ae0:	0005883a 	mov	r2,zero
  800ae4:	31400236 	bltu	r6,r5,800af0 <__divsi3+0x4c>
  800ae8:	314dc83a 	sub	r6,r6,r5
  800aec:	10c4b03a 	or	r2,r2,r3
  800af0:	1806d07a 	srli	r3,r3,1
  800af4:	280ad07a 	srli	r5,r5,1
  800af8:	183ffa1e 	bne	r3,zero,800ae4 <__alt_mem_onchip_mem+0xff7f8ae4>
  800afc:	38000126 	beq	r7,zero,800b04 <__divsi3+0x60>
  800b00:	0085c83a 	sub	r2,zero,r2
  800b04:	f800283a 	ret
  800b08:	014bc83a 	sub	r5,zero,r5
  800b0c:	39c0005c 	xori	r7,r7,1
  800b10:	003fe706 	br	800ab0 <__alt_mem_onchip_mem+0xff7f8ab0>
  800b14:	0109c83a 	sub	r4,zero,r4
  800b18:	01c00044 	movi	r7,1
  800b1c:	003fe306 	br	800aac <__alt_mem_onchip_mem+0xff7f8aac>
  800b20:	00c00044 	movi	r3,1
  800b24:	003fee06 	br	800ae0 <__alt_mem_onchip_mem+0xff7f8ae0>

00800b28 <__modsi3>:
  800b28:	20001716 	blt	r4,zero,800b88 <__modsi3+0x60>
  800b2c:	000f883a 	mov	r7,zero
  800b30:	2005883a 	mov	r2,r4
  800b34:	28001216 	blt	r5,zero,800b80 <__modsi3+0x58>
  800b38:	2900162e 	bgeu	r5,r4,800b94 <__modsi3+0x6c>
  800b3c:	01800804 	movi	r6,32
  800b40:	00c00044 	movi	r3,1
  800b44:	00000106 	br	800b4c <__modsi3+0x24>
  800b48:	30000a26 	beq	r6,zero,800b74 <__modsi3+0x4c>
  800b4c:	294b883a 	add	r5,r5,r5
  800b50:	31bfffc4 	addi	r6,r6,-1
  800b54:	18c7883a 	add	r3,r3,r3
  800b58:	293ffb36 	bltu	r5,r4,800b48 <__alt_mem_onchip_mem+0xff7f8b48>
  800b5c:	18000526 	beq	r3,zero,800b74 <__modsi3+0x4c>
  800b60:	1806d07a 	srli	r3,r3,1
  800b64:	11400136 	bltu	r2,r5,800b6c <__modsi3+0x44>
  800b68:	1145c83a 	sub	r2,r2,r5
  800b6c:	280ad07a 	srli	r5,r5,1
  800b70:	183ffb1e 	bne	r3,zero,800b60 <__alt_mem_onchip_mem+0xff7f8b60>
  800b74:	38000126 	beq	r7,zero,800b7c <__modsi3+0x54>
  800b78:	0085c83a 	sub	r2,zero,r2
  800b7c:	f800283a 	ret
  800b80:	014bc83a 	sub	r5,zero,r5
  800b84:	003fec06 	br	800b38 <__alt_mem_onchip_mem+0xff7f8b38>
  800b88:	0109c83a 	sub	r4,zero,r4
  800b8c:	01c00044 	movi	r7,1
  800b90:	003fe706 	br	800b30 <__alt_mem_onchip_mem+0xff7f8b30>
  800b94:	00c00044 	movi	r3,1
  800b98:	003ff106 	br	800b60 <__alt_mem_onchip_mem+0xff7f8b60>

00800b9c <__udivsi3>:
  800b9c:	200d883a 	mov	r6,r4
  800ba0:	2900152e 	bgeu	r5,r4,800bf8 <__udivsi3+0x5c>
  800ba4:	28001416 	blt	r5,zero,800bf8 <__udivsi3+0x5c>
  800ba8:	00800804 	movi	r2,32
  800bac:	00c00044 	movi	r3,1
  800bb0:	00000206 	br	800bbc <__udivsi3+0x20>
  800bb4:	10000e26 	beq	r2,zero,800bf0 <__udivsi3+0x54>
  800bb8:	28000516 	blt	r5,zero,800bd0 <__udivsi3+0x34>
  800bbc:	294b883a 	add	r5,r5,r5
  800bc0:	10bfffc4 	addi	r2,r2,-1
  800bc4:	18c7883a 	add	r3,r3,r3
  800bc8:	293ffa36 	bltu	r5,r4,800bb4 <__alt_mem_onchip_mem+0xff7f8bb4>
  800bcc:	18000826 	beq	r3,zero,800bf0 <__udivsi3+0x54>
  800bd0:	0005883a 	mov	r2,zero
  800bd4:	31400236 	bltu	r6,r5,800be0 <__udivsi3+0x44>
  800bd8:	314dc83a 	sub	r6,r6,r5
  800bdc:	10c4b03a 	or	r2,r2,r3
  800be0:	1806d07a 	srli	r3,r3,1
  800be4:	280ad07a 	srli	r5,r5,1
  800be8:	183ffa1e 	bne	r3,zero,800bd4 <__alt_mem_onchip_mem+0xff7f8bd4>
  800bec:	f800283a 	ret
  800bf0:	0005883a 	mov	r2,zero
  800bf4:	f800283a 	ret
  800bf8:	00c00044 	movi	r3,1
  800bfc:	003ff406 	br	800bd0 <__alt_mem_onchip_mem+0xff7f8bd0>

00800c00 <__umodsi3>:
  800c00:	2005883a 	mov	r2,r4
  800c04:	2900122e 	bgeu	r5,r4,800c50 <__umodsi3+0x50>
  800c08:	28001116 	blt	r5,zero,800c50 <__umodsi3+0x50>
  800c0c:	01800804 	movi	r6,32
  800c10:	00c00044 	movi	r3,1
  800c14:	00000206 	br	800c20 <__umodsi3+0x20>
  800c18:	30000c26 	beq	r6,zero,800c4c <__umodsi3+0x4c>
  800c1c:	28000516 	blt	r5,zero,800c34 <__umodsi3+0x34>
  800c20:	294b883a 	add	r5,r5,r5
  800c24:	31bfffc4 	addi	r6,r6,-1
  800c28:	18c7883a 	add	r3,r3,r3
  800c2c:	293ffa36 	bltu	r5,r4,800c18 <__alt_mem_onchip_mem+0xff7f8c18>
  800c30:	18000626 	beq	r3,zero,800c4c <__umodsi3+0x4c>
  800c34:	1806d07a 	srli	r3,r3,1
  800c38:	11400136 	bltu	r2,r5,800c40 <__umodsi3+0x40>
  800c3c:	1145c83a 	sub	r2,r2,r5
  800c40:	280ad07a 	srli	r5,r5,1
  800c44:	183ffb1e 	bne	r3,zero,800c34 <__alt_mem_onchip_mem+0xff7f8c34>
  800c48:	f800283a 	ret
  800c4c:	f800283a 	ret
  800c50:	00c00044 	movi	r3,1
  800c54:	003ff706 	br	800c34 <__alt_mem_onchip_mem+0xff7f8c34>

00800c58 <_fgetc_r>:
  800c58:	defffd04 	addi	sp,sp,-12
  800c5c:	dc000115 	stw	r16,4(sp)
  800c60:	dfc00215 	stw	ra,8(sp)
  800c64:	2021883a 	mov	r16,r4
  800c68:	20000226 	beq	r4,zero,800c74 <_fgetc_r+0x1c>
  800c6c:	20800e17 	ldw	r2,56(r4)
  800c70:	10000c26 	beq	r2,zero,800ca4 <_fgetc_r+0x4c>
  800c74:	28800117 	ldw	r2,4(r5)
  800c78:	10bfffc4 	addi	r2,r2,-1
  800c7c:	28800115 	stw	r2,4(r5)
  800c80:	10000c16 	blt	r2,zero,800cb4 <_fgetc_r+0x5c>
  800c84:	28800017 	ldw	r2,0(r5)
  800c88:	10c00044 	addi	r3,r2,1
  800c8c:	28c00015 	stw	r3,0(r5)
  800c90:	10800003 	ldbu	r2,0(r2)
  800c94:	dfc00217 	ldw	ra,8(sp)
  800c98:	dc000117 	ldw	r16,4(sp)
  800c9c:	dec00304 	addi	sp,sp,12
  800ca0:	f800283a 	ret
  800ca4:	d9400015 	stw	r5,0(sp)
  800ca8:	08010a00 	call	8010a0 <__sinit>
  800cac:	d9400017 	ldw	r5,0(sp)
  800cb0:	003ff006 	br	800c74 <__alt_mem_onchip_mem+0xff7f8c74>
  800cb4:	8009883a 	mov	r4,r16
  800cb8:	dfc00217 	ldw	ra,8(sp)
  800cbc:	dc000117 	ldw	r16,4(sp)
  800cc0:	dec00304 	addi	sp,sp,12
  800cc4:	08026581 	jmpi	802658 <__srget_r>

00800cc8 <fgetc>:
  800cc8:	00802074 	movhi	r2,129
  800ccc:	defffd04 	addi	sp,sp,-12
  800cd0:	10909704 	addi	r2,r2,16988
  800cd4:	dc400115 	stw	r17,4(sp)
  800cd8:	14400017 	ldw	r17,0(r2)
  800cdc:	dc000015 	stw	r16,0(sp)
  800ce0:	dfc00215 	stw	ra,8(sp)
  800ce4:	2021883a 	mov	r16,r4
  800ce8:	88000226 	beq	r17,zero,800cf4 <fgetc+0x2c>
  800cec:	88800e17 	ldw	r2,56(r17)
  800cf0:	10000d26 	beq	r2,zero,800d28 <fgetc+0x60>
  800cf4:	80800117 	ldw	r2,4(r16)
  800cf8:	10bfffc4 	addi	r2,r2,-1
  800cfc:	80800115 	stw	r2,4(r16)
  800d00:	10000c16 	blt	r2,zero,800d34 <fgetc+0x6c>
  800d04:	80800017 	ldw	r2,0(r16)
  800d08:	10c00044 	addi	r3,r2,1
  800d0c:	80c00015 	stw	r3,0(r16)
  800d10:	10800003 	ldbu	r2,0(r2)
  800d14:	dfc00217 	ldw	ra,8(sp)
  800d18:	dc400117 	ldw	r17,4(sp)
  800d1c:	dc000017 	ldw	r16,0(sp)
  800d20:	dec00304 	addi	sp,sp,12
  800d24:	f800283a 	ret
  800d28:	8809883a 	mov	r4,r17
  800d2c:	08010a00 	call	8010a0 <__sinit>
  800d30:	003ff006 	br	800cf4 <__alt_mem_onchip_mem+0xff7f8cf4>
  800d34:	800b883a 	mov	r5,r16
  800d38:	8809883a 	mov	r4,r17
  800d3c:	dfc00217 	ldw	ra,8(sp)
  800d40:	dc400117 	ldw	r17,4(sp)
  800d44:	dc000017 	ldw	r16,0(sp)
  800d48:	dec00304 	addi	sp,sp,12
  800d4c:	08026581 	jmpi	802658 <__srget_r>

00800d50 <__fp_unlock>:
  800d50:	0005883a 	mov	r2,zero
  800d54:	f800283a 	ret

00800d58 <_cleanup_r>:
  800d58:	01402034 	movhi	r5,128
  800d5c:	29597404 	addi	r5,r5,26064
  800d60:	08017e81 	jmpi	8017e8 <_fwalk_reent>

00800d64 <__sinit.part.1>:
  800d64:	defff704 	addi	sp,sp,-36
  800d68:	00c02034 	movhi	r3,128
  800d6c:	dfc00815 	stw	ra,32(sp)
  800d70:	ddc00715 	stw	r23,28(sp)
  800d74:	dd800615 	stw	r22,24(sp)
  800d78:	dd400515 	stw	r21,20(sp)
  800d7c:	dd000415 	stw	r20,16(sp)
  800d80:	dcc00315 	stw	r19,12(sp)
  800d84:	dc800215 	stw	r18,8(sp)
  800d88:	dc400115 	stw	r17,4(sp)
  800d8c:	dc000015 	stw	r16,0(sp)
  800d90:	18c35604 	addi	r3,r3,3416
  800d94:	24000117 	ldw	r16,4(r4)
  800d98:	20c00f15 	stw	r3,60(r4)
  800d9c:	2080bb04 	addi	r2,r4,748
  800da0:	00c000c4 	movi	r3,3
  800da4:	20c0b915 	stw	r3,740(r4)
  800da8:	2080ba15 	stw	r2,744(r4)
  800dac:	2000b815 	stw	zero,736(r4)
  800db0:	05c00204 	movi	r23,8
  800db4:	00800104 	movi	r2,4
  800db8:	2025883a 	mov	r18,r4
  800dbc:	b80d883a 	mov	r6,r23
  800dc0:	81001704 	addi	r4,r16,92
  800dc4:	000b883a 	mov	r5,zero
  800dc8:	80000015 	stw	zero,0(r16)
  800dcc:	80000115 	stw	zero,4(r16)
  800dd0:	80000215 	stw	zero,8(r16)
  800dd4:	8080030d 	sth	r2,12(r16)
  800dd8:	80001915 	stw	zero,100(r16)
  800ddc:	8000038d 	sth	zero,14(r16)
  800de0:	80000415 	stw	zero,16(r16)
  800de4:	80000515 	stw	zero,20(r16)
  800de8:	80000615 	stw	zero,24(r16)
  800dec:	08022740 	call	802274 <memset>
  800df0:	05802034 	movhi	r22,128
  800df4:	94400217 	ldw	r17,8(r18)
  800df8:	05402034 	movhi	r21,128
  800dfc:	05002034 	movhi	r20,128
  800e00:	04c02034 	movhi	r19,128
  800e04:	b589cd04 	addi	r22,r22,10036
  800e08:	ad49e404 	addi	r21,r21,10128
  800e0c:	a50a0304 	addi	r20,r20,10252
  800e10:	9cca1a04 	addi	r19,r19,10344
  800e14:	85800815 	stw	r22,32(r16)
  800e18:	85400915 	stw	r21,36(r16)
  800e1c:	85000a15 	stw	r20,40(r16)
  800e20:	84c00b15 	stw	r19,44(r16)
  800e24:	84000715 	stw	r16,28(r16)
  800e28:	00800284 	movi	r2,10
  800e2c:	8880030d 	sth	r2,12(r17)
  800e30:	00800044 	movi	r2,1
  800e34:	b80d883a 	mov	r6,r23
  800e38:	89001704 	addi	r4,r17,92
  800e3c:	000b883a 	mov	r5,zero
  800e40:	88000015 	stw	zero,0(r17)
  800e44:	88000115 	stw	zero,4(r17)
  800e48:	88000215 	stw	zero,8(r17)
  800e4c:	88001915 	stw	zero,100(r17)
  800e50:	8880038d 	sth	r2,14(r17)
  800e54:	88000415 	stw	zero,16(r17)
  800e58:	88000515 	stw	zero,20(r17)
  800e5c:	88000615 	stw	zero,24(r17)
  800e60:	08022740 	call	802274 <memset>
  800e64:	94000317 	ldw	r16,12(r18)
  800e68:	00800484 	movi	r2,18
  800e6c:	8c400715 	stw	r17,28(r17)
  800e70:	8d800815 	stw	r22,32(r17)
  800e74:	8d400915 	stw	r21,36(r17)
  800e78:	8d000a15 	stw	r20,40(r17)
  800e7c:	8cc00b15 	stw	r19,44(r17)
  800e80:	8080030d 	sth	r2,12(r16)
  800e84:	00800084 	movi	r2,2
  800e88:	80000015 	stw	zero,0(r16)
  800e8c:	80000115 	stw	zero,4(r16)
  800e90:	80000215 	stw	zero,8(r16)
  800e94:	80001915 	stw	zero,100(r16)
  800e98:	8080038d 	sth	r2,14(r16)
  800e9c:	80000415 	stw	zero,16(r16)
  800ea0:	80000515 	stw	zero,20(r16)
  800ea4:	80000615 	stw	zero,24(r16)
  800ea8:	b80d883a 	mov	r6,r23
  800eac:	000b883a 	mov	r5,zero
  800eb0:	81001704 	addi	r4,r16,92
  800eb4:	08022740 	call	802274 <memset>
  800eb8:	00800044 	movi	r2,1
  800ebc:	84000715 	stw	r16,28(r16)
  800ec0:	85800815 	stw	r22,32(r16)
  800ec4:	85400915 	stw	r21,36(r16)
  800ec8:	85000a15 	stw	r20,40(r16)
  800ecc:	84c00b15 	stw	r19,44(r16)
  800ed0:	90800e15 	stw	r2,56(r18)
  800ed4:	dfc00817 	ldw	ra,32(sp)
  800ed8:	ddc00717 	ldw	r23,28(sp)
  800edc:	dd800617 	ldw	r22,24(sp)
  800ee0:	dd400517 	ldw	r21,20(sp)
  800ee4:	dd000417 	ldw	r20,16(sp)
  800ee8:	dcc00317 	ldw	r19,12(sp)
  800eec:	dc800217 	ldw	r18,8(sp)
  800ef0:	dc400117 	ldw	r17,4(sp)
  800ef4:	dc000017 	ldw	r16,0(sp)
  800ef8:	dec00904 	addi	sp,sp,36
  800efc:	f800283a 	ret

00800f00 <__fp_lock>:
  800f00:	0005883a 	mov	r2,zero
  800f04:	f800283a 	ret

00800f08 <__sfmoreglue>:
  800f08:	defffc04 	addi	sp,sp,-16
  800f0c:	dc400115 	stw	r17,4(sp)
  800f10:	2c7fffc4 	addi	r17,r5,-1
  800f14:	8c401a24 	muli	r17,r17,104
  800f18:	dc800215 	stw	r18,8(sp)
  800f1c:	2825883a 	mov	r18,r5
  800f20:	89401d04 	addi	r5,r17,116
  800f24:	dc000015 	stw	r16,0(sp)
  800f28:	dfc00315 	stw	ra,12(sp)
  800f2c:	0801a680 	call	801a68 <_malloc_r>
  800f30:	1021883a 	mov	r16,r2
  800f34:	10000726 	beq	r2,zero,800f54 <__sfmoreglue+0x4c>
  800f38:	11000304 	addi	r4,r2,12
  800f3c:	10000015 	stw	zero,0(r2)
  800f40:	14800115 	stw	r18,4(r2)
  800f44:	11000215 	stw	r4,8(r2)
  800f48:	89801a04 	addi	r6,r17,104
  800f4c:	000b883a 	mov	r5,zero
  800f50:	08022740 	call	802274 <memset>
  800f54:	8005883a 	mov	r2,r16
  800f58:	dfc00317 	ldw	ra,12(sp)
  800f5c:	dc800217 	ldw	r18,8(sp)
  800f60:	dc400117 	ldw	r17,4(sp)
  800f64:	dc000017 	ldw	r16,0(sp)
  800f68:	dec00404 	addi	sp,sp,16
  800f6c:	f800283a 	ret

00800f70 <__sfp>:
  800f70:	defffb04 	addi	sp,sp,-20
  800f74:	dc000015 	stw	r16,0(sp)
  800f78:	04002074 	movhi	r16,129
  800f7c:	84109604 	addi	r16,r16,16984
  800f80:	dcc00315 	stw	r19,12(sp)
  800f84:	2027883a 	mov	r19,r4
  800f88:	81000017 	ldw	r4,0(r16)
  800f8c:	dfc00415 	stw	ra,16(sp)
  800f90:	dc800215 	stw	r18,8(sp)
  800f94:	20800e17 	ldw	r2,56(r4)
  800f98:	dc400115 	stw	r17,4(sp)
  800f9c:	1000021e 	bne	r2,zero,800fa8 <__sfp+0x38>
  800fa0:	0800d640 	call	800d64 <__sinit.part.1>
  800fa4:	81000017 	ldw	r4,0(r16)
  800fa8:	2480b804 	addi	r18,r4,736
  800fac:	047fffc4 	movi	r17,-1
  800fb0:	91000117 	ldw	r4,4(r18)
  800fb4:	94000217 	ldw	r16,8(r18)
  800fb8:	213fffc4 	addi	r4,r4,-1
  800fbc:	20000a16 	blt	r4,zero,800fe8 <__sfp+0x78>
  800fc0:	8080030f 	ldh	r2,12(r16)
  800fc4:	10000c26 	beq	r2,zero,800ff8 <__sfp+0x88>
  800fc8:	80c01d04 	addi	r3,r16,116
  800fcc:	00000206 	br	800fd8 <__sfp+0x68>
  800fd0:	18bfe60f 	ldh	r2,-104(r3)
  800fd4:	10000826 	beq	r2,zero,800ff8 <__sfp+0x88>
  800fd8:	213fffc4 	addi	r4,r4,-1
  800fdc:	1c3ffd04 	addi	r16,r3,-12
  800fe0:	18c01a04 	addi	r3,r3,104
  800fe4:	247ffa1e 	bne	r4,r17,800fd0 <__alt_mem_onchip_mem+0xff7f8fd0>
  800fe8:	90800017 	ldw	r2,0(r18)
  800fec:	10001d26 	beq	r2,zero,801064 <__sfp+0xf4>
  800ff0:	1025883a 	mov	r18,r2
  800ff4:	003fee06 	br	800fb0 <__alt_mem_onchip_mem+0xff7f8fb0>
  800ff8:	00bfffc4 	movi	r2,-1
  800ffc:	8080038d 	sth	r2,14(r16)
  801000:	00800044 	movi	r2,1
  801004:	8080030d 	sth	r2,12(r16)
  801008:	80001915 	stw	zero,100(r16)
  80100c:	80000015 	stw	zero,0(r16)
  801010:	80000215 	stw	zero,8(r16)
  801014:	80000115 	stw	zero,4(r16)
  801018:	80000415 	stw	zero,16(r16)
  80101c:	80000515 	stw	zero,20(r16)
  801020:	80000615 	stw	zero,24(r16)
  801024:	01800204 	movi	r6,8
  801028:	000b883a 	mov	r5,zero
  80102c:	81001704 	addi	r4,r16,92
  801030:	08022740 	call	802274 <memset>
  801034:	8005883a 	mov	r2,r16
  801038:	80000c15 	stw	zero,48(r16)
  80103c:	80000d15 	stw	zero,52(r16)
  801040:	80001115 	stw	zero,68(r16)
  801044:	80001215 	stw	zero,72(r16)
  801048:	dfc00417 	ldw	ra,16(sp)
  80104c:	dcc00317 	ldw	r19,12(sp)
  801050:	dc800217 	ldw	r18,8(sp)
  801054:	dc400117 	ldw	r17,4(sp)
  801058:	dc000017 	ldw	r16,0(sp)
  80105c:	dec00504 	addi	sp,sp,20
  801060:	f800283a 	ret
  801064:	01400104 	movi	r5,4
  801068:	9809883a 	mov	r4,r19
  80106c:	0800f080 	call	800f08 <__sfmoreglue>
  801070:	90800015 	stw	r2,0(r18)
  801074:	103fde1e 	bne	r2,zero,800ff0 <__alt_mem_onchip_mem+0xff7f8ff0>
  801078:	00800304 	movi	r2,12
  80107c:	98800015 	stw	r2,0(r19)
  801080:	0005883a 	mov	r2,zero
  801084:	003ff006 	br	801048 <__alt_mem_onchip_mem+0xff7f9048>

00801088 <_cleanup>:
  801088:	00802074 	movhi	r2,129
  80108c:	10909604 	addi	r2,r2,16984
  801090:	11000017 	ldw	r4,0(r2)
  801094:	01402034 	movhi	r5,128
  801098:	29597404 	addi	r5,r5,26064
  80109c:	08017e81 	jmpi	8017e8 <_fwalk_reent>

008010a0 <__sinit>:
  8010a0:	20800e17 	ldw	r2,56(r4)
  8010a4:	10000126 	beq	r2,zero,8010ac <__sinit+0xc>
  8010a8:	f800283a 	ret
  8010ac:	0800d641 	jmpi	800d64 <__sinit.part.1>

008010b0 <__sfp_lock_acquire>:
  8010b0:	f800283a 	ret

008010b4 <__sfp_lock_release>:
  8010b4:	f800283a 	ret

008010b8 <__sinit_lock_acquire>:
  8010b8:	f800283a 	ret

008010bc <__sinit_lock_release>:
  8010bc:	f800283a 	ret

008010c0 <__fp_lock_all>:
  8010c0:	00802074 	movhi	r2,129
  8010c4:	10909704 	addi	r2,r2,16988
  8010c8:	11000017 	ldw	r4,0(r2)
  8010cc:	01402034 	movhi	r5,128
  8010d0:	2943c004 	addi	r5,r5,3840
  8010d4:	08017241 	jmpi	801724 <_fwalk>

008010d8 <__fp_unlock_all>:
  8010d8:	00802074 	movhi	r2,129
  8010dc:	10909704 	addi	r2,r2,16988
  8010e0:	11000017 	ldw	r4,0(r2)
  8010e4:	01402034 	movhi	r5,128
  8010e8:	29435404 	addi	r5,r5,3408
  8010ec:	08017241 	jmpi	801724 <_fwalk>

008010f0 <_fopen_r>:
  8010f0:	defffa04 	addi	sp,sp,-24
  8010f4:	3005883a 	mov	r2,r6
  8010f8:	dcc00415 	stw	r19,16(sp)
  8010fc:	d80d883a 	mov	r6,sp
  801100:	2827883a 	mov	r19,r5
  801104:	100b883a 	mov	r5,r2
  801108:	dc800315 	stw	r18,12(sp)
  80110c:	dfc00515 	stw	ra,20(sp)
  801110:	dc400215 	stw	r17,8(sp)
  801114:	dc000115 	stw	r16,4(sp)
  801118:	2025883a 	mov	r18,r4
  80111c:	080697c0 	call	80697c <__sflags>
  801120:	10002726 	beq	r2,zero,8011c0 <_fopen_r+0xd0>
  801124:	9009883a 	mov	r4,r18
  801128:	1023883a 	mov	r17,r2
  80112c:	0800f700 	call	800f70 <__sfp>
  801130:	1021883a 	mov	r16,r2
  801134:	10002226 	beq	r2,zero,8011c0 <_fopen_r+0xd0>
  801138:	d9800017 	ldw	r6,0(sp)
  80113c:	01c06d84 	movi	r7,438
  801140:	980b883a 	mov	r5,r19
  801144:	9009883a 	mov	r4,r18
  801148:	080239c0 	call	80239c <_open_r>
  80114c:	10001916 	blt	r2,zero,8011b4 <_fopen_r+0xc4>
  801150:	8080038d 	sth	r2,14(r16)
  801154:	00802034 	movhi	r2,128
  801158:	1089cd04 	addi	r2,r2,10036
  80115c:	80800815 	stw	r2,32(r16)
  801160:	00802034 	movhi	r2,128
  801164:	1089e404 	addi	r2,r2,10128
  801168:	80800915 	stw	r2,36(r16)
  80116c:	00802034 	movhi	r2,128
  801170:	108a0304 	addi	r2,r2,10252
  801174:	80800a15 	stw	r2,40(r16)
  801178:	00802034 	movhi	r2,128
  80117c:	108a1a04 	addi	r2,r2,10344
  801180:	8440030d 	sth	r17,12(r16)
  801184:	84000715 	stw	r16,28(r16)
  801188:	80800b15 	stw	r2,44(r16)
  80118c:	8c40400c 	andi	r17,r17,256
  801190:	88000d1e 	bne	r17,zero,8011c8 <_fopen_r+0xd8>
  801194:	8005883a 	mov	r2,r16
  801198:	dfc00517 	ldw	ra,20(sp)
  80119c:	dcc00417 	ldw	r19,16(sp)
  8011a0:	dc800317 	ldw	r18,12(sp)
  8011a4:	dc400217 	ldw	r17,8(sp)
  8011a8:	dc000117 	ldw	r16,4(sp)
  8011ac:	dec00604 	addi	sp,sp,24
  8011b0:	f800283a 	ret
  8011b4:	08010b00 	call	8010b0 <__sfp_lock_acquire>
  8011b8:	8000030d 	sth	zero,12(r16)
  8011bc:	08010b40 	call	8010b4 <__sfp_lock_release>
  8011c0:	0005883a 	mov	r2,zero
  8011c4:	003ff406 	br	801198 <__alt_mem_onchip_mem+0xff7f9198>
  8011c8:	01c00084 	movi	r7,2
  8011cc:	000d883a 	mov	r6,zero
  8011d0:	800b883a 	mov	r5,r16
  8011d4:	9009883a 	mov	r4,r18
  8011d8:	08012480 	call	801248 <_fseek_r>
  8011dc:	8005883a 	mov	r2,r16
  8011e0:	003fed06 	br	801198 <__alt_mem_onchip_mem+0xff7f9198>

008011e4 <fopen>:
  8011e4:	00802074 	movhi	r2,129
  8011e8:	10909704 	addi	r2,r2,16988
  8011ec:	280d883a 	mov	r6,r5
  8011f0:	200b883a 	mov	r5,r4
  8011f4:	11000017 	ldw	r4,0(r2)
  8011f8:	08010f01 	jmpi	8010f0 <_fopen_r>

008011fc <_fprintf_r>:
  8011fc:	defffe04 	addi	sp,sp,-8
  801200:	2809883a 	mov	r4,r5
  801204:	300b883a 	mov	r5,r6
  801208:	dfc00015 	stw	ra,0(sp)
  80120c:	d9c00115 	stw	r7,4(sp)
  801210:	d9800104 	addi	r6,sp,4
  801214:	0804a680 	call	804a68 <__vfprintf_internal>
  801218:	dfc00017 	ldw	ra,0(sp)
  80121c:	dec00204 	addi	sp,sp,8
  801220:	f800283a 	ret

00801224 <fprintf>:
  801224:	defffd04 	addi	sp,sp,-12
  801228:	dfc00015 	stw	ra,0(sp)
  80122c:	d9800115 	stw	r6,4(sp)
  801230:	d9c00215 	stw	r7,8(sp)
  801234:	d9800104 	addi	r6,sp,4
  801238:	0804a680 	call	804a68 <__vfprintf_internal>
  80123c:	dfc00017 	ldw	ra,0(sp)
  801240:	dec00304 	addi	sp,sp,12
  801244:	f800283a 	ret

00801248 <_fseek_r>:
  801248:	08012681 	jmpi	801268 <_fseeko_r>

0080124c <fseek>:
  80124c:	00802074 	movhi	r2,129
  801250:	10909704 	addi	r2,r2,16988
  801254:	300f883a 	mov	r7,r6
  801258:	280d883a 	mov	r6,r5
  80125c:	200b883a 	mov	r5,r4
  801260:	11000017 	ldw	r4,0(r2)
  801264:	08012681 	jmpi	801268 <_fseeko_r>

00801268 <_fseeko_r>:
  801268:	deffe804 	addi	sp,sp,-96
  80126c:	dd401415 	stw	r21,80(sp)
  801270:	dc801115 	stw	r18,68(sp)
  801274:	dc401015 	stw	r17,64(sp)
  801278:	dc000f15 	stw	r16,60(sp)
  80127c:	dfc01715 	stw	ra,92(sp)
  801280:	ddc01615 	stw	r23,88(sp)
  801284:	dd801515 	stw	r22,84(sp)
  801288:	dd001315 	stw	r20,76(sp)
  80128c:	dcc01215 	stw	r19,72(sp)
  801290:	2023883a 	mov	r17,r4
  801294:	2821883a 	mov	r16,r5
  801298:	302b883a 	mov	r21,r6
  80129c:	3825883a 	mov	r18,r7
  8012a0:	20000226 	beq	r4,zero,8012ac <_fseeko_r+0x44>
  8012a4:	20800e17 	ldw	r2,56(r4)
  8012a8:	10005a26 	beq	r2,zero,801414 <_fseeko_r+0x1ac>
  8012ac:	8080030b 	ldhu	r2,12(r16)
  8012b0:	00c04204 	movi	r3,264
  8012b4:	1080420c 	andi	r2,r2,264
  8012b8:	10c05b26 	beq	r2,r3,801428 <_fseeko_r+0x1c0>
  8012bc:	85000a17 	ldw	r20,40(r16)
  8012c0:	a000f626 	beq	r20,zero,80169c <_fseeko_r+0x434>
  8012c4:	00800044 	movi	r2,1
  8012c8:	90803e26 	beq	r18,r2,8013c4 <_fseeko_r+0x15c>
  8012cc:	00800084 	movi	r2,2
  8012d0:	90801026 	beq	r18,r2,801314 <_fseeko_r+0xac>
  8012d4:	90000f26 	beq	r18,zero,801314 <_fseeko_r+0xac>
  8012d8:	00800584 	movi	r2,22
  8012dc:	88800015 	stw	r2,0(r17)
  8012e0:	04ffffc4 	movi	r19,-1
  8012e4:	9805883a 	mov	r2,r19
  8012e8:	dfc01717 	ldw	ra,92(sp)
  8012ec:	ddc01617 	ldw	r23,88(sp)
  8012f0:	dd801517 	ldw	r22,84(sp)
  8012f4:	dd401417 	ldw	r21,80(sp)
  8012f8:	dd001317 	ldw	r20,76(sp)
  8012fc:	dcc01217 	ldw	r19,72(sp)
  801300:	dc801117 	ldw	r18,68(sp)
  801304:	dc401017 	ldw	r17,64(sp)
  801308:	dc000f17 	ldw	r16,60(sp)
  80130c:	dec01804 	addi	sp,sp,96
  801310:	f800283a 	ret
  801314:	80800417 	ldw	r2,16(r16)
  801318:	002f883a 	mov	r23,zero
  80131c:	0027883a 	mov	r19,zero
  801320:	1000cb26 	beq	r2,zero,801650 <_fseeko_r+0x3e8>
  801324:	8080030b 	ldhu	r2,12(r16)
  801328:	10c2068c 	andi	r3,r2,2074
  80132c:	1800071e 	bne	r3,zero,80134c <_fseeko_r+0xe4>
  801330:	10c1000c 	andi	r3,r2,1024
  801334:	1800451e 	bne	r3,zero,80144c <_fseeko_r+0x1e4>
  801338:	00c02034 	movhi	r3,128
  80133c:	18ca0304 	addi	r3,r3,10252
  801340:	a0c0b726 	beq	r20,r3,801620 <_fseeko_r+0x3b8>
  801344:	10820014 	ori	r2,r2,2048
  801348:	8080030d 	sth	r2,12(r16)
  80134c:	800b883a 	mov	r5,r16
  801350:	8809883a 	mov	r4,r17
  801354:	08068f00 	call	8068f0 <_fflush_r>
  801358:	1027883a 	mov	r19,r2
  80135c:	103fe01e 	bne	r2,zero,8012e0 <__alt_mem_onchip_mem+0xff7f92e0>
  801360:	81400717 	ldw	r5,28(r16)
  801364:	900f883a 	mov	r7,r18
  801368:	a80d883a 	mov	r6,r21
  80136c:	8809883a 	mov	r4,r17
  801370:	a03ee83a 	callr	r20
  801374:	00ffffc4 	movi	r3,-1
  801378:	10ffd926 	beq	r2,r3,8012e0 <__alt_mem_onchip_mem+0xff7f92e0>
  80137c:	81400c17 	ldw	r5,48(r16)
  801380:	28000526 	beq	r5,zero,801398 <_fseeko_r+0x130>
  801384:	80801004 	addi	r2,r16,64
  801388:	28800226 	beq	r5,r2,801394 <_fseeko_r+0x12c>
  80138c:	8809883a 	mov	r4,r17
  801390:	0806b4c0 	call	806b4c <_free_r>
  801394:	80000c15 	stw	zero,48(r16)
  801398:	8080030b 	ldhu	r2,12(r16)
  80139c:	80c00417 	ldw	r3,16(r16)
  8013a0:	80000115 	stw	zero,4(r16)
  8013a4:	10bdf7cc 	andi	r2,r2,63455
  8013a8:	80c00015 	stw	r3,0(r16)
  8013ac:	8080030d 	sth	r2,12(r16)
  8013b0:	01800204 	movi	r6,8
  8013b4:	000b883a 	mov	r5,zero
  8013b8:	81001704 	addi	r4,r16,92
  8013bc:	08022740 	call	802274 <memset>
  8013c0:	003fc806 	br	8012e4 <__alt_mem_onchip_mem+0xff7f92e4>
  8013c4:	800b883a 	mov	r5,r16
  8013c8:	8809883a 	mov	r4,r17
  8013cc:	08068f00 	call	8068f0 <_fflush_r>
  8013d0:	8080030b 	ldhu	r2,12(r16)
  8013d4:	10c4000c 	andi	r3,r2,4096
  8013d8:	18008726 	beq	r3,zero,8015f8 <_fseeko_r+0x390>
  8013dc:	84c01417 	ldw	r19,80(r16)
  8013e0:	10c0010c 	andi	r3,r2,4
  8013e4:	1800431e 	bne	r3,zero,8014f4 <_fseeko_r+0x28c>
  8013e8:	1080020c 	andi	r2,r2,8
  8013ec:	10008026 	beq	r2,zero,8015f0 <_fseeko_r+0x388>
  8013f0:	80c00017 	ldw	r3,0(r16)
  8013f4:	80800417 	ldw	r2,16(r16)
  8013f8:	18000226 	beq	r3,zero,801404 <_fseeko_r+0x19c>
  8013fc:	1887c83a 	sub	r3,r3,r2
  801400:	98e7883a 	add	r19,r19,r3
  801404:	aceb883a 	add	r21,r21,r19
  801408:	05c00044 	movi	r23,1
  80140c:	0025883a 	mov	r18,zero
  801410:	003fc306 	br	801320 <__alt_mem_onchip_mem+0xff7f9320>
  801414:	08010a00 	call	8010a0 <__sinit>
  801418:	8080030b 	ldhu	r2,12(r16)
  80141c:	00c04204 	movi	r3,264
  801420:	1080420c 	andi	r2,r2,264
  801424:	10ffa51e 	bne	r2,r3,8012bc <__alt_mem_onchip_mem+0xff7f92bc>
  801428:	800b883a 	mov	r5,r16
  80142c:	8809883a 	mov	r4,r17
  801430:	08068f00 	call	8068f0 <_fflush_r>
  801434:	003fa106 	br	8012bc <__alt_mem_onchip_mem+0xff7f92bc>
  801438:	8080030b 	ldhu	r2,12(r16)
  80143c:	00c10004 	movi	r3,1024
  801440:	80c01315 	stw	r3,76(r16)
  801444:	10c4b03a 	or	r2,r2,r3
  801448:	8080030d 	sth	r2,12(r16)
  80144c:	9000311e 	bne	r18,zero,801514 <_fseeko_r+0x2ac>
  801450:	a82d883a 	mov	r22,r21
  801454:	b800371e 	bne	r23,zero,801534 <_fseeko_r+0x2cc>
  801458:	8080030b 	ldhu	r2,12(r16)
  80145c:	1084000c 	andi	r2,r2,4096
  801460:	10007f26 	beq	r2,zero,801660 <_fseeko_r+0x3f8>
  801464:	80801417 	ldw	r2,80(r16)
  801468:	81800117 	ldw	r6,4(r16)
  80146c:	81400c17 	ldw	r5,48(r16)
  801470:	11a7c83a 	sub	r19,r2,r6
  801474:	28008226 	beq	r5,zero,801680 <_fseeko_r+0x418>
  801478:	81c00f17 	ldw	r7,60(r16)
  80147c:	99e7c83a 	sub	r19,r19,r7
  801480:	81000e17 	ldw	r4,56(r16)
  801484:	80800417 	ldw	r2,16(r16)
  801488:	99a7883a 	add	r19,r19,r6
  80148c:	2087c83a 	sub	r3,r4,r2
  801490:	98e7c83a 	sub	r19,r19,r3
  801494:	38c7883a 	add	r3,r7,r3
  801498:	b4c02b16 	blt	r22,r19,801548 <_fseeko_r+0x2e0>
  80149c:	98c9883a 	add	r4,r19,r3
  8014a0:	b100292e 	bgeu	r22,r4,801548 <_fseeko_r+0x2e0>
  8014a4:	b4e7c83a 	sub	r19,r22,r19
  8014a8:	14c5883a 	add	r2,r2,r19
  8014ac:	1ce7c83a 	sub	r19,r3,r19
  8014b0:	80800015 	stw	r2,0(r16)
  8014b4:	84c00115 	stw	r19,4(r16)
  8014b8:	28000526 	beq	r5,zero,8014d0 <_fseeko_r+0x268>
  8014bc:	80801004 	addi	r2,r16,64
  8014c0:	28800226 	beq	r5,r2,8014cc <_fseeko_r+0x264>
  8014c4:	8809883a 	mov	r4,r17
  8014c8:	0806b4c0 	call	806b4c <_free_r>
  8014cc:	80000c15 	stw	zero,48(r16)
  8014d0:	8080030b 	ldhu	r2,12(r16)
  8014d4:	01800204 	movi	r6,8
  8014d8:	000b883a 	mov	r5,zero
  8014dc:	10bff7cc 	andi	r2,r2,65503
  8014e0:	8080030d 	sth	r2,12(r16)
  8014e4:	81001704 	addi	r4,r16,92
  8014e8:	08022740 	call	802274 <memset>
  8014ec:	0027883a 	mov	r19,zero
  8014f0:	003f7c06 	br	8012e4 <__alt_mem_onchip_mem+0xff7f92e4>
  8014f4:	80c00117 	ldw	r3,4(r16)
  8014f8:	80800c17 	ldw	r2,48(r16)
  8014fc:	98e7c83a 	sub	r19,r19,r3
  801500:	10003b26 	beq	r2,zero,8015f0 <_fseeko_r+0x388>
  801504:	80c00f17 	ldw	r3,60(r16)
  801508:	80800417 	ldw	r2,16(r16)
  80150c:	98e7c83a 	sub	r19,r19,r3
  801510:	003fbc06 	br	801404 <__alt_mem_onchip_mem+0xff7f9404>
  801514:	8140038f 	ldh	r5,14(r16)
  801518:	d80d883a 	mov	r6,sp
  80151c:	8809883a 	mov	r4,r17
  801520:	08016c80 	call	8016c8 <_fstat_r>
  801524:	103f891e 	bne	r2,zero,80134c <__alt_mem_onchip_mem+0xff7f934c>
  801528:	dd800417 	ldw	r22,16(sp)
  80152c:	adad883a 	add	r22,r21,r22
  801530:	b83fc926 	beq	r23,zero,801458 <__alt_mem_onchip_mem+0xff7f9458>
  801534:	81400c17 	ldw	r5,48(r16)
  801538:	81800117 	ldw	r6,4(r16)
  80153c:	28005026 	beq	r5,zero,801680 <_fseeko_r+0x418>
  801540:	81c00f17 	ldw	r7,60(r16)
  801544:	003fce06 	br	801480 <__alt_mem_onchip_mem+0xff7f9480>
  801548:	84c01317 	ldw	r19,76(r16)
  80154c:	81400717 	ldw	r5,28(r16)
  801550:	000f883a 	mov	r7,zero
  801554:	04e7c83a 	sub	r19,zero,r19
  801558:	9da6703a 	and	r19,r19,r22
  80155c:	980d883a 	mov	r6,r19
  801560:	8809883a 	mov	r4,r17
  801564:	a03ee83a 	callr	r20
  801568:	00ffffc4 	movi	r3,-1
  80156c:	10ff7726 	beq	r2,r3,80134c <__alt_mem_onchip_mem+0xff7f934c>
  801570:	80800417 	ldw	r2,16(r16)
  801574:	81400c17 	ldw	r5,48(r16)
  801578:	80000115 	stw	zero,4(r16)
  80157c:	80800015 	stw	r2,0(r16)
  801580:	28000526 	beq	r5,zero,801598 <_fseeko_r+0x330>
  801584:	80801004 	addi	r2,r16,64
  801588:	28800226 	beq	r5,r2,801594 <_fseeko_r+0x32c>
  80158c:	8809883a 	mov	r4,r17
  801590:	0806b4c0 	call	806b4c <_free_r>
  801594:	80000c15 	stw	zero,48(r16)
  801598:	8080030b 	ldhu	r2,12(r16)
  80159c:	b4e7c83a 	sub	r19,r22,r19
  8015a0:	10bff7cc 	andi	r2,r2,65503
  8015a4:	8080030d 	sth	r2,12(r16)
  8015a8:	98000b26 	beq	r19,zero,8015d8 <_fseeko_r+0x370>
  8015ac:	800b883a 	mov	r5,r16
  8015b0:	8809883a 	mov	r4,r17
  8015b4:	08024840 	call	802484 <__srefill_r>
  8015b8:	103f641e 	bne	r2,zero,80134c <__alt_mem_onchip_mem+0xff7f934c>
  8015bc:	80800117 	ldw	r2,4(r16)
  8015c0:	14ff6236 	bltu	r2,r19,80134c <__alt_mem_onchip_mem+0xff7f934c>
  8015c4:	80c00017 	ldw	r3,0(r16)
  8015c8:	14c5c83a 	sub	r2,r2,r19
  8015cc:	80800115 	stw	r2,4(r16)
  8015d0:	1ce7883a 	add	r19,r3,r19
  8015d4:	84c00015 	stw	r19,0(r16)
  8015d8:	01800204 	movi	r6,8
  8015dc:	000b883a 	mov	r5,zero
  8015e0:	81001704 	addi	r4,r16,92
  8015e4:	08022740 	call	802274 <memset>
  8015e8:	0027883a 	mov	r19,zero
  8015ec:	003f3d06 	br	8012e4 <__alt_mem_onchip_mem+0xff7f92e4>
  8015f0:	80800417 	ldw	r2,16(r16)
  8015f4:	003f8306 	br	801404 <__alt_mem_onchip_mem+0xff7f9404>
  8015f8:	81400717 	ldw	r5,28(r16)
  8015fc:	900f883a 	mov	r7,r18
  801600:	000d883a 	mov	r6,zero
  801604:	8809883a 	mov	r4,r17
  801608:	a03ee83a 	callr	r20
  80160c:	1027883a 	mov	r19,r2
  801610:	00bfffc4 	movi	r2,-1
  801614:	98bf3226 	beq	r19,r2,8012e0 <__alt_mem_onchip_mem+0xff7f92e0>
  801618:	8080030b 	ldhu	r2,12(r16)
  80161c:	003f7006 	br	8013e0 <__alt_mem_onchip_mem+0xff7f93e0>
  801620:	8140038f 	ldh	r5,14(r16)
  801624:	283f4716 	blt	r5,zero,801344 <__alt_mem_onchip_mem+0xff7f9344>
  801628:	d80d883a 	mov	r6,sp
  80162c:	8809883a 	mov	r4,r17
  801630:	08016c80 	call	8016c8 <_fstat_r>
  801634:	1000041e 	bne	r2,zero,801648 <_fseeko_r+0x3e0>
  801638:	d8800117 	ldw	r2,4(sp)
  80163c:	00e00014 	movui	r3,32768
  801640:	10bc000c 	andi	r2,r2,61440
  801644:	10ff7c26 	beq	r2,r3,801438 <__alt_mem_onchip_mem+0xff7f9438>
  801648:	8080030b 	ldhu	r2,12(r16)
  80164c:	003f3d06 	br	801344 <__alt_mem_onchip_mem+0xff7f9344>
  801650:	800b883a 	mov	r5,r16
  801654:	8809883a 	mov	r4,r17
  801658:	08018ac0 	call	8018ac <__smakebuf_r>
  80165c:	003f3106 	br	801324 <__alt_mem_onchip_mem+0xff7f9324>
  801660:	81400717 	ldw	r5,28(r16)
  801664:	01c00044 	movi	r7,1
  801668:	000d883a 	mov	r6,zero
  80166c:	8809883a 	mov	r4,r17
  801670:	a03ee83a 	callr	r20
  801674:	00ffffc4 	movi	r3,-1
  801678:	10ff7b1e 	bne	r2,r3,801468 <__alt_mem_onchip_mem+0xff7f9468>
  80167c:	003f3306 	br	80134c <__alt_mem_onchip_mem+0xff7f934c>
  801680:	80c00017 	ldw	r3,0(r16)
  801684:	80800417 	ldw	r2,16(r16)
  801688:	000b883a 	mov	r5,zero
  80168c:	1887c83a 	sub	r3,r3,r2
  801690:	98e7c83a 	sub	r19,r19,r3
  801694:	30c7883a 	add	r3,r6,r3
  801698:	003f7f06 	br	801498 <__alt_mem_onchip_mem+0xff7f9498>
  80169c:	00800744 	movi	r2,29
  8016a0:	88800015 	stw	r2,0(r17)
  8016a4:	04ffffc4 	movi	r19,-1
  8016a8:	003f0e06 	br	8012e4 <__alt_mem_onchip_mem+0xff7f92e4>

008016ac <fseeko>:
  8016ac:	00802074 	movhi	r2,129
  8016b0:	10909704 	addi	r2,r2,16988
  8016b4:	300f883a 	mov	r7,r6
  8016b8:	280d883a 	mov	r6,r5
  8016bc:	200b883a 	mov	r5,r4
  8016c0:	11000017 	ldw	r4,0(r2)
  8016c4:	08012681 	jmpi	801268 <_fseeko_r>

008016c8 <_fstat_r>:
  8016c8:	defffd04 	addi	sp,sp,-12
  8016cc:	2805883a 	mov	r2,r5
  8016d0:	dc000015 	stw	r16,0(sp)
  8016d4:	04002074 	movhi	r16,129
  8016d8:	dc400115 	stw	r17,4(sp)
  8016dc:	8417ea04 	addi	r16,r16,24488
  8016e0:	2023883a 	mov	r17,r4
  8016e4:	300b883a 	mov	r5,r6
  8016e8:	1009883a 	mov	r4,r2
  8016ec:	dfc00215 	stw	ra,8(sp)
  8016f0:	80000015 	stw	zero,0(r16)
  8016f4:	080dfe40 	call	80dfe4 <fstat>
  8016f8:	00ffffc4 	movi	r3,-1
  8016fc:	10c00526 	beq	r2,r3,801714 <_fstat_r+0x4c>
  801700:	dfc00217 	ldw	ra,8(sp)
  801704:	dc400117 	ldw	r17,4(sp)
  801708:	dc000017 	ldw	r16,0(sp)
  80170c:	dec00304 	addi	sp,sp,12
  801710:	f800283a 	ret
  801714:	80c00017 	ldw	r3,0(r16)
  801718:	183ff926 	beq	r3,zero,801700 <__alt_mem_onchip_mem+0xff7f9700>
  80171c:	88c00015 	stw	r3,0(r17)
  801720:	003ff706 	br	801700 <__alt_mem_onchip_mem+0xff7f9700>

00801724 <_fwalk>:
  801724:	defff704 	addi	sp,sp,-36
  801728:	dd000415 	stw	r20,16(sp)
  80172c:	dfc00815 	stw	ra,32(sp)
  801730:	ddc00715 	stw	r23,28(sp)
  801734:	dd800615 	stw	r22,24(sp)
  801738:	dd400515 	stw	r21,20(sp)
  80173c:	dcc00315 	stw	r19,12(sp)
  801740:	dc800215 	stw	r18,8(sp)
  801744:	dc400115 	stw	r17,4(sp)
  801748:	dc000015 	stw	r16,0(sp)
  80174c:	2500b804 	addi	r20,r4,736
  801750:	a0002326 	beq	r20,zero,8017e0 <_fwalk+0xbc>
  801754:	282b883a 	mov	r21,r5
  801758:	002f883a 	mov	r23,zero
  80175c:	05800044 	movi	r22,1
  801760:	04ffffc4 	movi	r19,-1
  801764:	a4400117 	ldw	r17,4(r20)
  801768:	a4800217 	ldw	r18,8(r20)
  80176c:	8c7fffc4 	addi	r17,r17,-1
  801770:	88000d16 	blt	r17,zero,8017a8 <_fwalk+0x84>
  801774:	94000304 	addi	r16,r18,12
  801778:	94800384 	addi	r18,r18,14
  80177c:	8080000b 	ldhu	r2,0(r16)
  801780:	8c7fffc4 	addi	r17,r17,-1
  801784:	813ffd04 	addi	r4,r16,-12
  801788:	b080042e 	bgeu	r22,r2,80179c <_fwalk+0x78>
  80178c:	9080000f 	ldh	r2,0(r18)
  801790:	14c00226 	beq	r2,r19,80179c <_fwalk+0x78>
  801794:	a83ee83a 	callr	r21
  801798:	b8aeb03a 	or	r23,r23,r2
  80179c:	84001a04 	addi	r16,r16,104
  8017a0:	94801a04 	addi	r18,r18,104
  8017a4:	8cfff51e 	bne	r17,r19,80177c <__alt_mem_onchip_mem+0xff7f977c>
  8017a8:	a5000017 	ldw	r20,0(r20)
  8017ac:	a03fed1e 	bne	r20,zero,801764 <__alt_mem_onchip_mem+0xff7f9764>
  8017b0:	b805883a 	mov	r2,r23
  8017b4:	dfc00817 	ldw	ra,32(sp)
  8017b8:	ddc00717 	ldw	r23,28(sp)
  8017bc:	dd800617 	ldw	r22,24(sp)
  8017c0:	dd400517 	ldw	r21,20(sp)
  8017c4:	dd000417 	ldw	r20,16(sp)
  8017c8:	dcc00317 	ldw	r19,12(sp)
  8017cc:	dc800217 	ldw	r18,8(sp)
  8017d0:	dc400117 	ldw	r17,4(sp)
  8017d4:	dc000017 	ldw	r16,0(sp)
  8017d8:	dec00904 	addi	sp,sp,36
  8017dc:	f800283a 	ret
  8017e0:	002f883a 	mov	r23,zero
  8017e4:	003ff206 	br	8017b0 <__alt_mem_onchip_mem+0xff7f97b0>

008017e8 <_fwalk_reent>:
  8017e8:	defff704 	addi	sp,sp,-36
  8017ec:	dd000415 	stw	r20,16(sp)
  8017f0:	dfc00815 	stw	ra,32(sp)
  8017f4:	ddc00715 	stw	r23,28(sp)
  8017f8:	dd800615 	stw	r22,24(sp)
  8017fc:	dd400515 	stw	r21,20(sp)
  801800:	dcc00315 	stw	r19,12(sp)
  801804:	dc800215 	stw	r18,8(sp)
  801808:	dc400115 	stw	r17,4(sp)
  80180c:	dc000015 	stw	r16,0(sp)
  801810:	2500b804 	addi	r20,r4,736
  801814:	a0002326 	beq	r20,zero,8018a4 <_fwalk_reent+0xbc>
  801818:	282b883a 	mov	r21,r5
  80181c:	2027883a 	mov	r19,r4
  801820:	002f883a 	mov	r23,zero
  801824:	05800044 	movi	r22,1
  801828:	04bfffc4 	movi	r18,-1
  80182c:	a4400117 	ldw	r17,4(r20)
  801830:	a4000217 	ldw	r16,8(r20)
  801834:	8c7fffc4 	addi	r17,r17,-1
  801838:	88000c16 	blt	r17,zero,80186c <_fwalk_reent+0x84>
  80183c:	84000304 	addi	r16,r16,12
  801840:	8080000b 	ldhu	r2,0(r16)
  801844:	8c7fffc4 	addi	r17,r17,-1
  801848:	817ffd04 	addi	r5,r16,-12
  80184c:	b080052e 	bgeu	r22,r2,801864 <_fwalk_reent+0x7c>
  801850:	8080008f 	ldh	r2,2(r16)
  801854:	9809883a 	mov	r4,r19
  801858:	14800226 	beq	r2,r18,801864 <_fwalk_reent+0x7c>
  80185c:	a83ee83a 	callr	r21
  801860:	b8aeb03a 	or	r23,r23,r2
  801864:	84001a04 	addi	r16,r16,104
  801868:	8cbff51e 	bne	r17,r18,801840 <__alt_mem_onchip_mem+0xff7f9840>
  80186c:	a5000017 	ldw	r20,0(r20)
  801870:	a03fee1e 	bne	r20,zero,80182c <__alt_mem_onchip_mem+0xff7f982c>
  801874:	b805883a 	mov	r2,r23
  801878:	dfc00817 	ldw	ra,32(sp)
  80187c:	ddc00717 	ldw	r23,28(sp)
  801880:	dd800617 	ldw	r22,24(sp)
  801884:	dd400517 	ldw	r21,20(sp)
  801888:	dd000417 	ldw	r20,16(sp)
  80188c:	dcc00317 	ldw	r19,12(sp)
  801890:	dc800217 	ldw	r18,8(sp)
  801894:	dc400117 	ldw	r17,4(sp)
  801898:	dc000017 	ldw	r16,0(sp)
  80189c:	dec00904 	addi	sp,sp,36
  8018a0:	f800283a 	ret
  8018a4:	002f883a 	mov	r23,zero
  8018a8:	003ff206 	br	801874 <__alt_mem_onchip_mem+0xff7f9874>

008018ac <__smakebuf_r>:
  8018ac:	2880030b 	ldhu	r2,12(r5)
  8018b0:	10c0008c 	andi	r3,r2,2
  8018b4:	1800411e 	bne	r3,zero,8019bc <__smakebuf_r+0x110>
  8018b8:	deffec04 	addi	sp,sp,-80
  8018bc:	dc000f15 	stw	r16,60(sp)
  8018c0:	2821883a 	mov	r16,r5
  8018c4:	2940038f 	ldh	r5,14(r5)
  8018c8:	dc401015 	stw	r17,64(sp)
  8018cc:	dfc01315 	stw	ra,76(sp)
  8018d0:	dcc01215 	stw	r19,72(sp)
  8018d4:	dc801115 	stw	r18,68(sp)
  8018d8:	2023883a 	mov	r17,r4
  8018dc:	28001c16 	blt	r5,zero,801950 <__smakebuf_r+0xa4>
  8018e0:	d80d883a 	mov	r6,sp
  8018e4:	08016c80 	call	8016c8 <_fstat_r>
  8018e8:	10001816 	blt	r2,zero,80194c <__smakebuf_r+0xa0>
  8018ec:	d8800117 	ldw	r2,4(sp)
  8018f0:	00e00014 	movui	r3,32768
  8018f4:	10bc000c 	andi	r2,r2,61440
  8018f8:	14c80020 	cmpeqi	r19,r2,8192
  8018fc:	10c03726 	beq	r2,r3,8019dc <__smakebuf_r+0x130>
  801900:	80c0030b 	ldhu	r3,12(r16)
  801904:	18c20014 	ori	r3,r3,2048
  801908:	80c0030d 	sth	r3,12(r16)
  80190c:	00c80004 	movi	r3,8192
  801910:	10c0521e 	bne	r2,r3,801a5c <__smakebuf_r+0x1b0>
  801914:	8140038f 	ldh	r5,14(r16)
  801918:	8809883a 	mov	r4,r17
  80191c:	0806e5c0 	call	806e5c <_isatty_r>
  801920:	10004c26 	beq	r2,zero,801a54 <__smakebuf_r+0x1a8>
  801924:	8080030b 	ldhu	r2,12(r16)
  801928:	80c010c4 	addi	r3,r16,67
  80192c:	80c00015 	stw	r3,0(r16)
  801930:	10800054 	ori	r2,r2,1
  801934:	8080030d 	sth	r2,12(r16)
  801938:	00800044 	movi	r2,1
  80193c:	80c00415 	stw	r3,16(r16)
  801940:	80800515 	stw	r2,20(r16)
  801944:	04810004 	movi	r18,1024
  801948:	00000706 	br	801968 <__smakebuf_r+0xbc>
  80194c:	8080030b 	ldhu	r2,12(r16)
  801950:	10c0200c 	andi	r3,r2,128
  801954:	18001f1e 	bne	r3,zero,8019d4 <__smakebuf_r+0x128>
  801958:	04810004 	movi	r18,1024
  80195c:	10820014 	ori	r2,r2,2048
  801960:	8080030d 	sth	r2,12(r16)
  801964:	0027883a 	mov	r19,zero
  801968:	900b883a 	mov	r5,r18
  80196c:	8809883a 	mov	r4,r17
  801970:	0801a680 	call	801a68 <_malloc_r>
  801974:	10002c26 	beq	r2,zero,801a28 <__smakebuf_r+0x17c>
  801978:	80c0030b 	ldhu	r3,12(r16)
  80197c:	01002034 	movhi	r4,128
  801980:	21035604 	addi	r4,r4,3416
  801984:	89000f15 	stw	r4,60(r17)
  801988:	18c02014 	ori	r3,r3,128
  80198c:	80c0030d 	sth	r3,12(r16)
  801990:	80800015 	stw	r2,0(r16)
  801994:	80800415 	stw	r2,16(r16)
  801998:	84800515 	stw	r18,20(r16)
  80199c:	98001a1e 	bne	r19,zero,801a08 <__smakebuf_r+0x15c>
  8019a0:	dfc01317 	ldw	ra,76(sp)
  8019a4:	dcc01217 	ldw	r19,72(sp)
  8019a8:	dc801117 	ldw	r18,68(sp)
  8019ac:	dc401017 	ldw	r17,64(sp)
  8019b0:	dc000f17 	ldw	r16,60(sp)
  8019b4:	dec01404 	addi	sp,sp,80
  8019b8:	f800283a 	ret
  8019bc:	288010c4 	addi	r2,r5,67
  8019c0:	28800015 	stw	r2,0(r5)
  8019c4:	28800415 	stw	r2,16(r5)
  8019c8:	00800044 	movi	r2,1
  8019cc:	28800515 	stw	r2,20(r5)
  8019d0:	f800283a 	ret
  8019d4:	04801004 	movi	r18,64
  8019d8:	003fe006 	br	80195c <__alt_mem_onchip_mem+0xff7f995c>
  8019dc:	81000a17 	ldw	r4,40(r16)
  8019e0:	00c02034 	movhi	r3,128
  8019e4:	18ca0304 	addi	r3,r3,10252
  8019e8:	20ffc51e 	bne	r4,r3,801900 <__alt_mem_onchip_mem+0xff7f9900>
  8019ec:	8080030b 	ldhu	r2,12(r16)
  8019f0:	04810004 	movi	r18,1024
  8019f4:	84801315 	stw	r18,76(r16)
  8019f8:	1484b03a 	or	r2,r2,r18
  8019fc:	8080030d 	sth	r2,12(r16)
  801a00:	0027883a 	mov	r19,zero
  801a04:	003fd806 	br	801968 <__alt_mem_onchip_mem+0xff7f9968>
  801a08:	8140038f 	ldh	r5,14(r16)
  801a0c:	8809883a 	mov	r4,r17
  801a10:	0806e5c0 	call	806e5c <_isatty_r>
  801a14:	103fe226 	beq	r2,zero,8019a0 <__alt_mem_onchip_mem+0xff7f99a0>
  801a18:	8080030b 	ldhu	r2,12(r16)
  801a1c:	10800054 	ori	r2,r2,1
  801a20:	8080030d 	sth	r2,12(r16)
  801a24:	003fde06 	br	8019a0 <__alt_mem_onchip_mem+0xff7f99a0>
  801a28:	8080030b 	ldhu	r2,12(r16)
  801a2c:	10c0800c 	andi	r3,r2,512
  801a30:	183fdb1e 	bne	r3,zero,8019a0 <__alt_mem_onchip_mem+0xff7f99a0>
  801a34:	10800094 	ori	r2,r2,2
  801a38:	80c010c4 	addi	r3,r16,67
  801a3c:	8080030d 	sth	r2,12(r16)
  801a40:	00800044 	movi	r2,1
  801a44:	80c00015 	stw	r3,0(r16)
  801a48:	80c00415 	stw	r3,16(r16)
  801a4c:	80800515 	stw	r2,20(r16)
  801a50:	003fd306 	br	8019a0 <__alt_mem_onchip_mem+0xff7f99a0>
  801a54:	04810004 	movi	r18,1024
  801a58:	003fc306 	br	801968 <__alt_mem_onchip_mem+0xff7f9968>
  801a5c:	0027883a 	mov	r19,zero
  801a60:	04810004 	movi	r18,1024
  801a64:	003fc006 	br	801968 <__alt_mem_onchip_mem+0xff7f9968>

00801a68 <_malloc_r>:
  801a68:	defff504 	addi	sp,sp,-44
  801a6c:	dc800315 	stw	r18,12(sp)
  801a70:	dfc00a15 	stw	ra,40(sp)
  801a74:	df000915 	stw	fp,36(sp)
  801a78:	ddc00815 	stw	r23,32(sp)
  801a7c:	dd800715 	stw	r22,28(sp)
  801a80:	dd400615 	stw	r21,24(sp)
  801a84:	dd000515 	stw	r20,20(sp)
  801a88:	dcc00415 	stw	r19,16(sp)
  801a8c:	dc400215 	stw	r17,8(sp)
  801a90:	dc000115 	stw	r16,4(sp)
  801a94:	288002c4 	addi	r2,r5,11
  801a98:	00c00584 	movi	r3,22
  801a9c:	2025883a 	mov	r18,r4
  801aa0:	18807f2e 	bgeu	r3,r2,801ca0 <_malloc_r+0x238>
  801aa4:	047ffe04 	movi	r17,-8
  801aa8:	1462703a 	and	r17,r2,r17
  801aac:	8800a316 	blt	r17,zero,801d3c <_malloc_r+0x2d4>
  801ab0:	8940a236 	bltu	r17,r5,801d3c <_malloc_r+0x2d4>
  801ab4:	080e56c0 	call	80e56c <__malloc_lock>
  801ab8:	00807dc4 	movi	r2,503
  801abc:	1441e92e 	bgeu	r2,r17,802264 <_malloc_r+0x7fc>
  801ac0:	8804d27a 	srli	r2,r17,9
  801ac4:	1000a126 	beq	r2,zero,801d4c <_malloc_r+0x2e4>
  801ac8:	00c00104 	movi	r3,4
  801acc:	18811e36 	bltu	r3,r2,801f48 <_malloc_r+0x4e0>
  801ad0:	8804d1ba 	srli	r2,r17,6
  801ad4:	12000e44 	addi	r8,r2,57
  801ad8:	11c00e04 	addi	r7,r2,56
  801adc:	4209883a 	add	r4,r8,r8
  801ae0:	04c02074 	movhi	r19,129
  801ae4:	2109883a 	add	r4,r4,r4
  801ae8:	9cca7504 	addi	r19,r19,10708
  801aec:	2109883a 	add	r4,r4,r4
  801af0:	9909883a 	add	r4,r19,r4
  801af4:	24000117 	ldw	r16,4(r4)
  801af8:	213ffe04 	addi	r4,r4,-8
  801afc:	24009726 	beq	r4,r16,801d5c <_malloc_r+0x2f4>
  801b00:	80800117 	ldw	r2,4(r16)
  801b04:	01bfff04 	movi	r6,-4
  801b08:	014003c4 	movi	r5,15
  801b0c:	1184703a 	and	r2,r2,r6
  801b10:	1447c83a 	sub	r3,r2,r17
  801b14:	28c00716 	blt	r5,r3,801b34 <_malloc_r+0xcc>
  801b18:	1800920e 	bge	r3,zero,801d64 <_malloc_r+0x2fc>
  801b1c:	84000317 	ldw	r16,12(r16)
  801b20:	24008e26 	beq	r4,r16,801d5c <_malloc_r+0x2f4>
  801b24:	80800117 	ldw	r2,4(r16)
  801b28:	1184703a 	and	r2,r2,r6
  801b2c:	1447c83a 	sub	r3,r2,r17
  801b30:	28fff90e 	bge	r5,r3,801b18 <__alt_mem_onchip_mem+0xff7f9b18>
  801b34:	3809883a 	mov	r4,r7
  801b38:	01802074 	movhi	r6,129
  801b3c:	9c000417 	ldw	r16,16(r19)
  801b40:	318a7504 	addi	r6,r6,10708
  801b44:	32000204 	addi	r8,r6,8
  801b48:	82013426 	beq	r16,r8,80201c <_malloc_r+0x5b4>
  801b4c:	80c00117 	ldw	r3,4(r16)
  801b50:	00bfff04 	movi	r2,-4
  801b54:	188e703a 	and	r7,r3,r2
  801b58:	3c45c83a 	sub	r2,r7,r17
  801b5c:	00c003c4 	movi	r3,15
  801b60:	18811f16 	blt	r3,r2,801fe0 <_malloc_r+0x578>
  801b64:	32000515 	stw	r8,20(r6)
  801b68:	32000415 	stw	r8,16(r6)
  801b6c:	10007f0e 	bge	r2,zero,801d6c <_malloc_r+0x304>
  801b70:	00807fc4 	movi	r2,511
  801b74:	11c0fd36 	bltu	r2,r7,801f6c <_malloc_r+0x504>
  801b78:	3806d0fa 	srli	r3,r7,3
  801b7c:	01c00044 	movi	r7,1
  801b80:	30800117 	ldw	r2,4(r6)
  801b84:	19400044 	addi	r5,r3,1
  801b88:	294b883a 	add	r5,r5,r5
  801b8c:	1807d0ba 	srai	r3,r3,2
  801b90:	294b883a 	add	r5,r5,r5
  801b94:	294b883a 	add	r5,r5,r5
  801b98:	298b883a 	add	r5,r5,r6
  801b9c:	38c6983a 	sll	r3,r7,r3
  801ba0:	29c00017 	ldw	r7,0(r5)
  801ba4:	2a7ffe04 	addi	r9,r5,-8
  801ba8:	1886b03a 	or	r3,r3,r2
  801bac:	82400315 	stw	r9,12(r16)
  801bb0:	81c00215 	stw	r7,8(r16)
  801bb4:	30c00115 	stw	r3,4(r6)
  801bb8:	2c000015 	stw	r16,0(r5)
  801bbc:	3c000315 	stw	r16,12(r7)
  801bc0:	2005d0ba 	srai	r2,r4,2
  801bc4:	01400044 	movi	r5,1
  801bc8:	288a983a 	sll	r5,r5,r2
  801bcc:	19406f36 	bltu	r3,r5,801d8c <_malloc_r+0x324>
  801bd0:	28c4703a 	and	r2,r5,r3
  801bd4:	10000a1e 	bne	r2,zero,801c00 <_malloc_r+0x198>
  801bd8:	00bfff04 	movi	r2,-4
  801bdc:	294b883a 	add	r5,r5,r5
  801be0:	2088703a 	and	r4,r4,r2
  801be4:	28c4703a 	and	r2,r5,r3
  801be8:	21000104 	addi	r4,r4,4
  801bec:	1000041e 	bne	r2,zero,801c00 <_malloc_r+0x198>
  801bf0:	294b883a 	add	r5,r5,r5
  801bf4:	28c4703a 	and	r2,r5,r3
  801bf8:	21000104 	addi	r4,r4,4
  801bfc:	103ffc26 	beq	r2,zero,801bf0 <__alt_mem_onchip_mem+0xff7f9bf0>
  801c00:	02bfff04 	movi	r10,-4
  801c04:	024003c4 	movi	r9,15
  801c08:	21800044 	addi	r6,r4,1
  801c0c:	318d883a 	add	r6,r6,r6
  801c10:	318d883a 	add	r6,r6,r6
  801c14:	318d883a 	add	r6,r6,r6
  801c18:	998d883a 	add	r6,r19,r6
  801c1c:	333ffe04 	addi	r12,r6,-8
  801c20:	2017883a 	mov	r11,r4
  801c24:	31800104 	addi	r6,r6,4
  801c28:	34000017 	ldw	r16,0(r6)
  801c2c:	31fffd04 	addi	r7,r6,-12
  801c30:	81c0041e 	bne	r16,r7,801c44 <_malloc_r+0x1dc>
  801c34:	0000fb06 	br	802024 <_malloc_r+0x5bc>
  801c38:	1801030e 	bge	r3,zero,802048 <_malloc_r+0x5e0>
  801c3c:	84000317 	ldw	r16,12(r16)
  801c40:	81c0f826 	beq	r16,r7,802024 <_malloc_r+0x5bc>
  801c44:	80800117 	ldw	r2,4(r16)
  801c48:	1284703a 	and	r2,r2,r10
  801c4c:	1447c83a 	sub	r3,r2,r17
  801c50:	48fff90e 	bge	r9,r3,801c38 <__alt_mem_onchip_mem+0xff7f9c38>
  801c54:	80800317 	ldw	r2,12(r16)
  801c58:	81000217 	ldw	r4,8(r16)
  801c5c:	89400054 	ori	r5,r17,1
  801c60:	81400115 	stw	r5,4(r16)
  801c64:	20800315 	stw	r2,12(r4)
  801c68:	11000215 	stw	r4,8(r2)
  801c6c:	8463883a 	add	r17,r16,r17
  801c70:	9c400515 	stw	r17,20(r19)
  801c74:	9c400415 	stw	r17,16(r19)
  801c78:	18800054 	ori	r2,r3,1
  801c7c:	88800115 	stw	r2,4(r17)
  801c80:	8a000315 	stw	r8,12(r17)
  801c84:	8a000215 	stw	r8,8(r17)
  801c88:	88e3883a 	add	r17,r17,r3
  801c8c:	88c00015 	stw	r3,0(r17)
  801c90:	9009883a 	mov	r4,r18
  801c94:	080e5900 	call	80e590 <__malloc_unlock>
  801c98:	80800204 	addi	r2,r16,8
  801c9c:	00001b06 	br	801d0c <_malloc_r+0x2a4>
  801ca0:	04400404 	movi	r17,16
  801ca4:	89402536 	bltu	r17,r5,801d3c <_malloc_r+0x2d4>
  801ca8:	080e56c0 	call	80e56c <__malloc_lock>
  801cac:	00800184 	movi	r2,6
  801cb0:	01000084 	movi	r4,2
  801cb4:	04c02074 	movhi	r19,129
  801cb8:	1085883a 	add	r2,r2,r2
  801cbc:	9cca7504 	addi	r19,r19,10708
  801cc0:	1085883a 	add	r2,r2,r2
  801cc4:	9885883a 	add	r2,r19,r2
  801cc8:	14000117 	ldw	r16,4(r2)
  801ccc:	10fffe04 	addi	r3,r2,-8
  801cd0:	80c0d926 	beq	r16,r3,802038 <_malloc_r+0x5d0>
  801cd4:	80c00117 	ldw	r3,4(r16)
  801cd8:	81000317 	ldw	r4,12(r16)
  801cdc:	00bfff04 	movi	r2,-4
  801ce0:	1884703a 	and	r2,r3,r2
  801ce4:	81400217 	ldw	r5,8(r16)
  801ce8:	8085883a 	add	r2,r16,r2
  801cec:	10c00117 	ldw	r3,4(r2)
  801cf0:	29000315 	stw	r4,12(r5)
  801cf4:	21400215 	stw	r5,8(r4)
  801cf8:	18c00054 	ori	r3,r3,1
  801cfc:	10c00115 	stw	r3,4(r2)
  801d00:	9009883a 	mov	r4,r18
  801d04:	080e5900 	call	80e590 <__malloc_unlock>
  801d08:	80800204 	addi	r2,r16,8
  801d0c:	dfc00a17 	ldw	ra,40(sp)
  801d10:	df000917 	ldw	fp,36(sp)
  801d14:	ddc00817 	ldw	r23,32(sp)
  801d18:	dd800717 	ldw	r22,28(sp)
  801d1c:	dd400617 	ldw	r21,24(sp)
  801d20:	dd000517 	ldw	r20,20(sp)
  801d24:	dcc00417 	ldw	r19,16(sp)
  801d28:	dc800317 	ldw	r18,12(sp)
  801d2c:	dc400217 	ldw	r17,8(sp)
  801d30:	dc000117 	ldw	r16,4(sp)
  801d34:	dec00b04 	addi	sp,sp,44
  801d38:	f800283a 	ret
  801d3c:	00800304 	movi	r2,12
  801d40:	90800015 	stw	r2,0(r18)
  801d44:	0005883a 	mov	r2,zero
  801d48:	003ff006 	br	801d0c <__alt_mem_onchip_mem+0xff7f9d0c>
  801d4c:	01002004 	movi	r4,128
  801d50:	02001004 	movi	r8,64
  801d54:	01c00fc4 	movi	r7,63
  801d58:	003f6106 	br	801ae0 <__alt_mem_onchip_mem+0xff7f9ae0>
  801d5c:	4009883a 	mov	r4,r8
  801d60:	003f7506 	br	801b38 <__alt_mem_onchip_mem+0xff7f9b38>
  801d64:	81000317 	ldw	r4,12(r16)
  801d68:	003fde06 	br	801ce4 <__alt_mem_onchip_mem+0xff7f9ce4>
  801d6c:	81c5883a 	add	r2,r16,r7
  801d70:	11400117 	ldw	r5,4(r2)
  801d74:	9009883a 	mov	r4,r18
  801d78:	29400054 	ori	r5,r5,1
  801d7c:	11400115 	stw	r5,4(r2)
  801d80:	080e5900 	call	80e590 <__malloc_unlock>
  801d84:	80800204 	addi	r2,r16,8
  801d88:	003fe006 	br	801d0c <__alt_mem_onchip_mem+0xff7f9d0c>
  801d8c:	9c000217 	ldw	r16,8(r19)
  801d90:	00bfff04 	movi	r2,-4
  801d94:	85800117 	ldw	r22,4(r16)
  801d98:	b0ac703a 	and	r22,r22,r2
  801d9c:	b4400336 	bltu	r22,r17,801dac <_malloc_r+0x344>
  801da0:	b445c83a 	sub	r2,r22,r17
  801da4:	00c003c4 	movi	r3,15
  801da8:	18805d16 	blt	r3,r2,801f20 <_malloc_r+0x4b8>
  801dac:	05c02074 	movhi	r23,129
  801db0:	00802074 	movhi	r2,129
  801db4:	1097ed04 	addi	r2,r2,24500
  801db8:	bdd09804 	addi	r23,r23,16992
  801dbc:	15400017 	ldw	r21,0(r2)
  801dc0:	b8c00017 	ldw	r3,0(r23)
  801dc4:	00bfffc4 	movi	r2,-1
  801dc8:	858d883a 	add	r6,r16,r22
  801dcc:	8d6b883a 	add	r21,r17,r21
  801dd0:	1880ea26 	beq	r3,r2,80217c <_malloc_r+0x714>
  801dd4:	ad4403c4 	addi	r21,r21,4111
  801dd8:	00bc0004 	movi	r2,-4096
  801ddc:	a8aa703a 	and	r21,r21,r2
  801de0:	a80b883a 	mov	r5,r21
  801de4:	9009883a 	mov	r4,r18
  801de8:	d9800015 	stw	r6,0(sp)
  801dec:	08026e00 	call	8026e0 <_sbrk_r>
  801df0:	1029883a 	mov	r20,r2
  801df4:	00bfffc4 	movi	r2,-1
  801df8:	d9800017 	ldw	r6,0(sp)
  801dfc:	a080e826 	beq	r20,r2,8021a0 <_malloc_r+0x738>
  801e00:	a180a636 	bltu	r20,r6,80209c <_malloc_r+0x634>
  801e04:	07002074 	movhi	fp,129
  801e08:	e717f804 	addi	fp,fp,24544
  801e0c:	e0800017 	ldw	r2,0(fp)
  801e10:	a887883a 	add	r3,r21,r2
  801e14:	e0c00015 	stw	r3,0(fp)
  801e18:	3500e626 	beq	r6,r20,8021b4 <_malloc_r+0x74c>
  801e1c:	b9000017 	ldw	r4,0(r23)
  801e20:	00bfffc4 	movi	r2,-1
  801e24:	2080ee26 	beq	r4,r2,8021e0 <_malloc_r+0x778>
  801e28:	a185c83a 	sub	r2,r20,r6
  801e2c:	10c5883a 	add	r2,r2,r3
  801e30:	e0800015 	stw	r2,0(fp)
  801e34:	a0c001cc 	andi	r3,r20,7
  801e38:	1800bc26 	beq	r3,zero,80212c <_malloc_r+0x6c4>
  801e3c:	a0e9c83a 	sub	r20,r20,r3
  801e40:	00840204 	movi	r2,4104
  801e44:	a5000204 	addi	r20,r20,8
  801e48:	10c7c83a 	sub	r3,r2,r3
  801e4c:	a545883a 	add	r2,r20,r21
  801e50:	1083ffcc 	andi	r2,r2,4095
  801e54:	18abc83a 	sub	r21,r3,r2
  801e58:	a80b883a 	mov	r5,r21
  801e5c:	9009883a 	mov	r4,r18
  801e60:	08026e00 	call	8026e0 <_sbrk_r>
  801e64:	00ffffc4 	movi	r3,-1
  801e68:	10c0e126 	beq	r2,r3,8021f0 <_malloc_r+0x788>
  801e6c:	1505c83a 	sub	r2,r2,r20
  801e70:	1545883a 	add	r2,r2,r21
  801e74:	10800054 	ori	r2,r2,1
  801e78:	e0c00017 	ldw	r3,0(fp)
  801e7c:	9d000215 	stw	r20,8(r19)
  801e80:	a0800115 	stw	r2,4(r20)
  801e84:	a8c7883a 	add	r3,r21,r3
  801e88:	e0c00015 	stw	r3,0(fp)
  801e8c:	84c00e26 	beq	r16,r19,801ec8 <_malloc_r+0x460>
  801e90:	018003c4 	movi	r6,15
  801e94:	3580a72e 	bgeu	r6,r22,802134 <_malloc_r+0x6cc>
  801e98:	81400117 	ldw	r5,4(r16)
  801e9c:	013ffe04 	movi	r4,-8
  801ea0:	b0bffd04 	addi	r2,r22,-12
  801ea4:	1104703a 	and	r2,r2,r4
  801ea8:	2900004c 	andi	r4,r5,1
  801eac:	2088b03a 	or	r4,r4,r2
  801eb0:	81000115 	stw	r4,4(r16)
  801eb4:	01400144 	movi	r5,5
  801eb8:	8089883a 	add	r4,r16,r2
  801ebc:	21400115 	stw	r5,4(r4)
  801ec0:	21400215 	stw	r5,8(r4)
  801ec4:	3080cd36 	bltu	r6,r2,8021fc <_malloc_r+0x794>
  801ec8:	00802074 	movhi	r2,129
  801ecc:	1097ec04 	addi	r2,r2,24496
  801ed0:	11000017 	ldw	r4,0(r2)
  801ed4:	20c0012e 	bgeu	r4,r3,801edc <_malloc_r+0x474>
  801ed8:	10c00015 	stw	r3,0(r2)
  801edc:	00802074 	movhi	r2,129
  801ee0:	1097eb04 	addi	r2,r2,24492
  801ee4:	11000017 	ldw	r4,0(r2)
  801ee8:	9c000217 	ldw	r16,8(r19)
  801eec:	20c0012e 	bgeu	r4,r3,801ef4 <_malloc_r+0x48c>
  801ef0:	10c00015 	stw	r3,0(r2)
  801ef4:	80c00117 	ldw	r3,4(r16)
  801ef8:	00bfff04 	movi	r2,-4
  801efc:	1886703a 	and	r3,r3,r2
  801f00:	1c45c83a 	sub	r2,r3,r17
  801f04:	1c400236 	bltu	r3,r17,801f10 <_malloc_r+0x4a8>
  801f08:	00c003c4 	movi	r3,15
  801f0c:	18800416 	blt	r3,r2,801f20 <_malloc_r+0x4b8>
  801f10:	9009883a 	mov	r4,r18
  801f14:	080e5900 	call	80e590 <__malloc_unlock>
  801f18:	0005883a 	mov	r2,zero
  801f1c:	003f7b06 	br	801d0c <__alt_mem_onchip_mem+0xff7f9d0c>
  801f20:	88c00054 	ori	r3,r17,1
  801f24:	80c00115 	stw	r3,4(r16)
  801f28:	8463883a 	add	r17,r16,r17
  801f2c:	10800054 	ori	r2,r2,1
  801f30:	9c400215 	stw	r17,8(r19)
  801f34:	88800115 	stw	r2,4(r17)
  801f38:	9009883a 	mov	r4,r18
  801f3c:	080e5900 	call	80e590 <__malloc_unlock>
  801f40:	80800204 	addi	r2,r16,8
  801f44:	003f7106 	br	801d0c <__alt_mem_onchip_mem+0xff7f9d0c>
  801f48:	00c00504 	movi	r3,20
  801f4c:	18804a2e 	bgeu	r3,r2,802078 <_malloc_r+0x610>
  801f50:	00c01504 	movi	r3,84
  801f54:	18806e36 	bltu	r3,r2,802110 <_malloc_r+0x6a8>
  801f58:	8804d33a 	srli	r2,r17,12
  801f5c:	12001bc4 	addi	r8,r2,111
  801f60:	11c01b84 	addi	r7,r2,110
  801f64:	4209883a 	add	r4,r8,r8
  801f68:	003edd06 	br	801ae0 <__alt_mem_onchip_mem+0xff7f9ae0>
  801f6c:	3804d27a 	srli	r2,r7,9
  801f70:	00c00104 	movi	r3,4
  801f74:	1880442e 	bgeu	r3,r2,802088 <_malloc_r+0x620>
  801f78:	00c00504 	movi	r3,20
  801f7c:	18808136 	bltu	r3,r2,802184 <_malloc_r+0x71c>
  801f80:	11401704 	addi	r5,r2,92
  801f84:	10c016c4 	addi	r3,r2,91
  801f88:	294b883a 	add	r5,r5,r5
  801f8c:	294b883a 	add	r5,r5,r5
  801f90:	294b883a 	add	r5,r5,r5
  801f94:	994b883a 	add	r5,r19,r5
  801f98:	28800017 	ldw	r2,0(r5)
  801f9c:	01802074 	movhi	r6,129
  801fa0:	297ffe04 	addi	r5,r5,-8
  801fa4:	318a7504 	addi	r6,r6,10708
  801fa8:	28806526 	beq	r5,r2,802140 <_malloc_r+0x6d8>
  801fac:	01bfff04 	movi	r6,-4
  801fb0:	10c00117 	ldw	r3,4(r2)
  801fb4:	1986703a 	and	r3,r3,r6
  801fb8:	38c0022e 	bgeu	r7,r3,801fc4 <_malloc_r+0x55c>
  801fbc:	10800217 	ldw	r2,8(r2)
  801fc0:	28bffb1e 	bne	r5,r2,801fb0 <__alt_mem_onchip_mem+0xff7f9fb0>
  801fc4:	11400317 	ldw	r5,12(r2)
  801fc8:	98c00117 	ldw	r3,4(r19)
  801fcc:	81400315 	stw	r5,12(r16)
  801fd0:	80800215 	stw	r2,8(r16)
  801fd4:	2c000215 	stw	r16,8(r5)
  801fd8:	14000315 	stw	r16,12(r2)
  801fdc:	003ef806 	br	801bc0 <__alt_mem_onchip_mem+0xff7f9bc0>
  801fe0:	88c00054 	ori	r3,r17,1
  801fe4:	80c00115 	stw	r3,4(r16)
  801fe8:	8463883a 	add	r17,r16,r17
  801fec:	34400515 	stw	r17,20(r6)
  801ff0:	34400415 	stw	r17,16(r6)
  801ff4:	10c00054 	ori	r3,r2,1
  801ff8:	8a000315 	stw	r8,12(r17)
  801ffc:	8a000215 	stw	r8,8(r17)
  802000:	88c00115 	stw	r3,4(r17)
  802004:	88a3883a 	add	r17,r17,r2
  802008:	88800015 	stw	r2,0(r17)
  80200c:	9009883a 	mov	r4,r18
  802010:	080e5900 	call	80e590 <__malloc_unlock>
  802014:	80800204 	addi	r2,r16,8
  802018:	003f3c06 	br	801d0c <__alt_mem_onchip_mem+0xff7f9d0c>
  80201c:	30c00117 	ldw	r3,4(r6)
  802020:	003ee706 	br	801bc0 <__alt_mem_onchip_mem+0xff7f9bc0>
  802024:	5ac00044 	addi	r11,r11,1
  802028:	588000cc 	andi	r2,r11,3
  80202c:	31800204 	addi	r6,r6,8
  802030:	103efd1e 	bne	r2,zero,801c28 <__alt_mem_onchip_mem+0xff7f9c28>
  802034:	00002406 	br	8020c8 <_malloc_r+0x660>
  802038:	14000317 	ldw	r16,12(r2)
  80203c:	143f251e 	bne	r2,r16,801cd4 <__alt_mem_onchip_mem+0xff7f9cd4>
  802040:	21000084 	addi	r4,r4,2
  802044:	003ebc06 	br	801b38 <__alt_mem_onchip_mem+0xff7f9b38>
  802048:	8085883a 	add	r2,r16,r2
  80204c:	10c00117 	ldw	r3,4(r2)
  802050:	81000317 	ldw	r4,12(r16)
  802054:	81400217 	ldw	r5,8(r16)
  802058:	18c00054 	ori	r3,r3,1
  80205c:	10c00115 	stw	r3,4(r2)
  802060:	29000315 	stw	r4,12(r5)
  802064:	21400215 	stw	r5,8(r4)
  802068:	9009883a 	mov	r4,r18
  80206c:	080e5900 	call	80e590 <__malloc_unlock>
  802070:	80800204 	addi	r2,r16,8
  802074:	003f2506 	br	801d0c <__alt_mem_onchip_mem+0xff7f9d0c>
  802078:	12001704 	addi	r8,r2,92
  80207c:	11c016c4 	addi	r7,r2,91
  802080:	4209883a 	add	r4,r8,r8
  802084:	003e9606 	br	801ae0 <__alt_mem_onchip_mem+0xff7f9ae0>
  802088:	3804d1ba 	srli	r2,r7,6
  80208c:	11400e44 	addi	r5,r2,57
  802090:	10c00e04 	addi	r3,r2,56
  802094:	294b883a 	add	r5,r5,r5
  802098:	003fbc06 	br	801f8c <__alt_mem_onchip_mem+0xff7f9f8c>
  80209c:	84ff5926 	beq	r16,r19,801e04 <__alt_mem_onchip_mem+0xff7f9e04>
  8020a0:	00802074 	movhi	r2,129
  8020a4:	108a7504 	addi	r2,r2,10708
  8020a8:	14000217 	ldw	r16,8(r2)
  8020ac:	00bfff04 	movi	r2,-4
  8020b0:	80c00117 	ldw	r3,4(r16)
  8020b4:	1886703a 	and	r3,r3,r2
  8020b8:	003f9106 	br	801f00 <__alt_mem_onchip_mem+0xff7f9f00>
  8020bc:	60800217 	ldw	r2,8(r12)
  8020c0:	213fffc4 	addi	r4,r4,-1
  8020c4:	1300651e 	bne	r2,r12,80225c <_malloc_r+0x7f4>
  8020c8:	208000cc 	andi	r2,r4,3
  8020cc:	633ffe04 	addi	r12,r12,-8
  8020d0:	103ffa1e 	bne	r2,zero,8020bc <__alt_mem_onchip_mem+0xff7fa0bc>
  8020d4:	98800117 	ldw	r2,4(r19)
  8020d8:	0146303a 	nor	r3,zero,r5
  8020dc:	1884703a 	and	r2,r3,r2
  8020e0:	98800115 	stw	r2,4(r19)
  8020e4:	294b883a 	add	r5,r5,r5
  8020e8:	117f2836 	bltu	r2,r5,801d8c <__alt_mem_onchip_mem+0xff7f9d8c>
  8020ec:	283f2726 	beq	r5,zero,801d8c <__alt_mem_onchip_mem+0xff7f9d8c>
  8020f0:	2886703a 	and	r3,r5,r2
  8020f4:	5809883a 	mov	r4,r11
  8020f8:	183ec31e 	bne	r3,zero,801c08 <__alt_mem_onchip_mem+0xff7f9c08>
  8020fc:	294b883a 	add	r5,r5,r5
  802100:	2886703a 	and	r3,r5,r2
  802104:	21000104 	addi	r4,r4,4
  802108:	183ffc26 	beq	r3,zero,8020fc <__alt_mem_onchip_mem+0xff7fa0fc>
  80210c:	003ebe06 	br	801c08 <__alt_mem_onchip_mem+0xff7f9c08>
  802110:	00c05504 	movi	r3,340
  802114:	18801236 	bltu	r3,r2,802160 <_malloc_r+0x6f8>
  802118:	8804d3fa 	srli	r2,r17,15
  80211c:	12001e04 	addi	r8,r2,120
  802120:	11c01dc4 	addi	r7,r2,119
  802124:	4209883a 	add	r4,r8,r8
  802128:	003e6d06 	br	801ae0 <__alt_mem_onchip_mem+0xff7f9ae0>
  80212c:	00c40004 	movi	r3,4096
  802130:	003f4606 	br	801e4c <__alt_mem_onchip_mem+0xff7f9e4c>
  802134:	00800044 	movi	r2,1
  802138:	a0800115 	stw	r2,4(r20)
  80213c:	003f7406 	br	801f10 <__alt_mem_onchip_mem+0xff7f9f10>
  802140:	1805d0ba 	srai	r2,r3,2
  802144:	01c00044 	movi	r7,1
  802148:	30c00117 	ldw	r3,4(r6)
  80214c:	388e983a 	sll	r7,r7,r2
  802150:	2805883a 	mov	r2,r5
  802154:	38c6b03a 	or	r3,r7,r3
  802158:	30c00115 	stw	r3,4(r6)
  80215c:	003f9b06 	br	801fcc <__alt_mem_onchip_mem+0xff7f9fcc>
  802160:	00c15504 	movi	r3,1364
  802164:	18801a36 	bltu	r3,r2,8021d0 <_malloc_r+0x768>
  802168:	8804d4ba 	srli	r2,r17,18
  80216c:	12001f44 	addi	r8,r2,125
  802170:	11c01f04 	addi	r7,r2,124
  802174:	4209883a 	add	r4,r8,r8
  802178:	003e5906 	br	801ae0 <__alt_mem_onchip_mem+0xff7f9ae0>
  80217c:	ad400404 	addi	r21,r21,16
  802180:	003f1706 	br	801de0 <__alt_mem_onchip_mem+0xff7f9de0>
  802184:	00c01504 	movi	r3,84
  802188:	18802336 	bltu	r3,r2,802218 <_malloc_r+0x7b0>
  80218c:	3804d33a 	srli	r2,r7,12
  802190:	11401bc4 	addi	r5,r2,111
  802194:	10c01b84 	addi	r3,r2,110
  802198:	294b883a 	add	r5,r5,r5
  80219c:	003f7b06 	br	801f8c <__alt_mem_onchip_mem+0xff7f9f8c>
  8021a0:	9c000217 	ldw	r16,8(r19)
  8021a4:	00bfff04 	movi	r2,-4
  8021a8:	80c00117 	ldw	r3,4(r16)
  8021ac:	1886703a 	and	r3,r3,r2
  8021b0:	003f5306 	br	801f00 <__alt_mem_onchip_mem+0xff7f9f00>
  8021b4:	3083ffcc 	andi	r2,r6,4095
  8021b8:	103f181e 	bne	r2,zero,801e1c <__alt_mem_onchip_mem+0xff7f9e1c>
  8021bc:	99000217 	ldw	r4,8(r19)
  8021c0:	b545883a 	add	r2,r22,r21
  8021c4:	10800054 	ori	r2,r2,1
  8021c8:	20800115 	stw	r2,4(r4)
  8021cc:	003f3e06 	br	801ec8 <__alt_mem_onchip_mem+0xff7f9ec8>
  8021d0:	01003f84 	movi	r4,254
  8021d4:	02001fc4 	movi	r8,127
  8021d8:	01c01f84 	movi	r7,126
  8021dc:	003e4006 	br	801ae0 <__alt_mem_onchip_mem+0xff7f9ae0>
  8021e0:	00802074 	movhi	r2,129
  8021e4:	10909804 	addi	r2,r2,16992
  8021e8:	15000015 	stw	r20,0(r2)
  8021ec:	003f1106 	br	801e34 <__alt_mem_onchip_mem+0xff7f9e34>
  8021f0:	00800044 	movi	r2,1
  8021f4:	002b883a 	mov	r21,zero
  8021f8:	003f1f06 	br	801e78 <__alt_mem_onchip_mem+0xff7f9e78>
  8021fc:	81400204 	addi	r5,r16,8
  802200:	9009883a 	mov	r4,r18
  802204:	0806b4c0 	call	806b4c <_free_r>
  802208:	00802074 	movhi	r2,129
  80220c:	1097f804 	addi	r2,r2,24544
  802210:	10c00017 	ldw	r3,0(r2)
  802214:	003f2c06 	br	801ec8 <__alt_mem_onchip_mem+0xff7f9ec8>
  802218:	00c05504 	movi	r3,340
  80221c:	18800536 	bltu	r3,r2,802234 <_malloc_r+0x7cc>
  802220:	3804d3fa 	srli	r2,r7,15
  802224:	11401e04 	addi	r5,r2,120
  802228:	10c01dc4 	addi	r3,r2,119
  80222c:	294b883a 	add	r5,r5,r5
  802230:	003f5606 	br	801f8c <__alt_mem_onchip_mem+0xff7f9f8c>
  802234:	00c15504 	movi	r3,1364
  802238:	18800536 	bltu	r3,r2,802250 <_malloc_r+0x7e8>
  80223c:	3804d4ba 	srli	r2,r7,18
  802240:	11401f44 	addi	r5,r2,125
  802244:	10c01f04 	addi	r3,r2,124
  802248:	294b883a 	add	r5,r5,r5
  80224c:	003f4f06 	br	801f8c <__alt_mem_onchip_mem+0xff7f9f8c>
  802250:	01403f84 	movi	r5,254
  802254:	00c01f84 	movi	r3,126
  802258:	003f4c06 	br	801f8c <__alt_mem_onchip_mem+0xff7f9f8c>
  80225c:	98800117 	ldw	r2,4(r19)
  802260:	003fa006 	br	8020e4 <__alt_mem_onchip_mem+0xff7fa0e4>
  802264:	8808d0fa 	srli	r4,r17,3
  802268:	20800044 	addi	r2,r4,1
  80226c:	1085883a 	add	r2,r2,r2
  802270:	003e9006 	br	801cb4 <__alt_mem_onchip_mem+0xff7f9cb4>

00802274 <memset>:
  802274:	20c000cc 	andi	r3,r4,3
  802278:	2005883a 	mov	r2,r4
  80227c:	18004426 	beq	r3,zero,802390 <memset+0x11c>
  802280:	31ffffc4 	addi	r7,r6,-1
  802284:	30004026 	beq	r6,zero,802388 <memset+0x114>
  802288:	2813883a 	mov	r9,r5
  80228c:	200d883a 	mov	r6,r4
  802290:	2007883a 	mov	r3,r4
  802294:	00000406 	br	8022a8 <memset+0x34>
  802298:	3a3fffc4 	addi	r8,r7,-1
  80229c:	31800044 	addi	r6,r6,1
  8022a0:	38003926 	beq	r7,zero,802388 <memset+0x114>
  8022a4:	400f883a 	mov	r7,r8
  8022a8:	18c00044 	addi	r3,r3,1
  8022ac:	32400005 	stb	r9,0(r6)
  8022b0:	1a0000cc 	andi	r8,r3,3
  8022b4:	403ff81e 	bne	r8,zero,802298 <__alt_mem_onchip_mem+0xff7fa298>
  8022b8:	010000c4 	movi	r4,3
  8022bc:	21c02d2e 	bgeu	r4,r7,802374 <memset+0x100>
  8022c0:	29003fcc 	andi	r4,r5,255
  8022c4:	200c923a 	slli	r6,r4,8
  8022c8:	3108b03a 	or	r4,r6,r4
  8022cc:	200c943a 	slli	r6,r4,16
  8022d0:	218cb03a 	or	r6,r4,r6
  8022d4:	010003c4 	movi	r4,15
  8022d8:	21c0182e 	bgeu	r4,r7,80233c <memset+0xc8>
  8022dc:	3b3ffc04 	addi	r12,r7,-16
  8022e0:	6018d13a 	srli	r12,r12,4
  8022e4:	1a000104 	addi	r8,r3,4
  8022e8:	1ac00204 	addi	r11,r3,8
  8022ec:	6008913a 	slli	r4,r12,4
  8022f0:	1a800304 	addi	r10,r3,12
  8022f4:	1813883a 	mov	r9,r3
  8022f8:	21000504 	addi	r4,r4,20
  8022fc:	1909883a 	add	r4,r3,r4
  802300:	49800015 	stw	r6,0(r9)
  802304:	41800015 	stw	r6,0(r8)
  802308:	59800015 	stw	r6,0(r11)
  80230c:	51800015 	stw	r6,0(r10)
  802310:	42000404 	addi	r8,r8,16
  802314:	4a400404 	addi	r9,r9,16
  802318:	5ac00404 	addi	r11,r11,16
  80231c:	52800404 	addi	r10,r10,16
  802320:	413ff71e 	bne	r8,r4,802300 <__alt_mem_onchip_mem+0xff7fa300>
  802324:	63000044 	addi	r12,r12,1
  802328:	6018913a 	slli	r12,r12,4
  80232c:	39c003cc 	andi	r7,r7,15
  802330:	010000c4 	movi	r4,3
  802334:	1b07883a 	add	r3,r3,r12
  802338:	21c00e2e 	bgeu	r4,r7,802374 <memset+0x100>
  80233c:	1813883a 	mov	r9,r3
  802340:	3811883a 	mov	r8,r7
  802344:	010000c4 	movi	r4,3
  802348:	49800015 	stw	r6,0(r9)
  80234c:	423fff04 	addi	r8,r8,-4
  802350:	4a400104 	addi	r9,r9,4
  802354:	223ffc36 	bltu	r4,r8,802348 <__alt_mem_onchip_mem+0xff7fa348>
  802358:	393fff04 	addi	r4,r7,-4
  80235c:	2008d0ba 	srli	r4,r4,2
  802360:	39c000cc 	andi	r7,r7,3
  802364:	21000044 	addi	r4,r4,1
  802368:	2109883a 	add	r4,r4,r4
  80236c:	2109883a 	add	r4,r4,r4
  802370:	1907883a 	add	r3,r3,r4
  802374:	38000526 	beq	r7,zero,80238c <memset+0x118>
  802378:	19cf883a 	add	r7,r3,r7
  80237c:	19400005 	stb	r5,0(r3)
  802380:	18c00044 	addi	r3,r3,1
  802384:	38fffd1e 	bne	r7,r3,80237c <__alt_mem_onchip_mem+0xff7fa37c>
  802388:	f800283a 	ret
  80238c:	f800283a 	ret
  802390:	2007883a 	mov	r3,r4
  802394:	300f883a 	mov	r7,r6
  802398:	003fc706 	br	8022b8 <__alt_mem_onchip_mem+0xff7fa2b8>

0080239c <_open_r>:
  80239c:	defffd04 	addi	sp,sp,-12
  8023a0:	2805883a 	mov	r2,r5
  8023a4:	dc000015 	stw	r16,0(sp)
  8023a8:	04002074 	movhi	r16,129
  8023ac:	dc400115 	stw	r17,4(sp)
  8023b0:	300b883a 	mov	r5,r6
  8023b4:	8417ea04 	addi	r16,r16,24488
  8023b8:	2023883a 	mov	r17,r4
  8023bc:	380d883a 	mov	r6,r7
  8023c0:	1009883a 	mov	r4,r2
  8023c4:	dfc00215 	stw	ra,8(sp)
  8023c8:	80000015 	stw	zero,0(r16)
  8023cc:	080e6b40 	call	80e6b4 <open>
  8023d0:	00ffffc4 	movi	r3,-1
  8023d4:	10c00526 	beq	r2,r3,8023ec <_open_r+0x50>
  8023d8:	dfc00217 	ldw	ra,8(sp)
  8023dc:	dc400117 	ldw	r17,4(sp)
  8023e0:	dc000017 	ldw	r16,0(sp)
  8023e4:	dec00304 	addi	sp,sp,12
  8023e8:	f800283a 	ret
  8023ec:	80c00017 	ldw	r3,0(r16)
  8023f0:	183ff926 	beq	r3,zero,8023d8 <__alt_mem_onchip_mem+0xff7fa3d8>
  8023f4:	88c00015 	stw	r3,0(r17)
  8023f8:	003ff706 	br	8023d8 <__alt_mem_onchip_mem+0xff7fa3d8>

008023fc <_printf_r>:
  8023fc:	defffd04 	addi	sp,sp,-12
  802400:	2805883a 	mov	r2,r5
  802404:	dfc00015 	stw	ra,0(sp)
  802408:	d9800115 	stw	r6,4(sp)
  80240c:	d9c00215 	stw	r7,8(sp)
  802410:	21400217 	ldw	r5,8(r4)
  802414:	d9c00104 	addi	r7,sp,4
  802418:	100d883a 	mov	r6,r2
  80241c:	08028700 	call	802870 <___vfprintf_internal_r>
  802420:	dfc00017 	ldw	ra,0(sp)
  802424:	dec00304 	addi	sp,sp,12
  802428:	f800283a 	ret

0080242c <printf>:
  80242c:	defffc04 	addi	sp,sp,-16
  802430:	dfc00015 	stw	ra,0(sp)
  802434:	d9400115 	stw	r5,4(sp)
  802438:	d9800215 	stw	r6,8(sp)
  80243c:	d9c00315 	stw	r7,12(sp)
  802440:	00802074 	movhi	r2,129
  802444:	10909704 	addi	r2,r2,16988
  802448:	10800017 	ldw	r2,0(r2)
  80244c:	200b883a 	mov	r5,r4
  802450:	d9800104 	addi	r6,sp,4
  802454:	11000217 	ldw	r4,8(r2)
  802458:	0804a680 	call	804a68 <__vfprintf_internal>
  80245c:	dfc00017 	ldw	ra,0(sp)
  802460:	dec00404 	addi	sp,sp,16
  802464:	f800283a 	ret

00802468 <lflush>:
  802468:	2080030b 	ldhu	r2,12(r4)
  80246c:	00c00244 	movi	r3,9
  802470:	1080024c 	andi	r2,r2,9
  802474:	10c00226 	beq	r2,r3,802480 <lflush+0x18>
  802478:	0005883a 	mov	r2,zero
  80247c:	f800283a 	ret
  802480:	080694c1 	jmpi	80694c <fflush>

00802484 <__srefill_r>:
  802484:	defffc04 	addi	sp,sp,-16
  802488:	dc400115 	stw	r17,4(sp)
  80248c:	dc000015 	stw	r16,0(sp)
  802490:	dfc00315 	stw	ra,12(sp)
  802494:	dc800215 	stw	r18,8(sp)
  802498:	2023883a 	mov	r17,r4
  80249c:	2821883a 	mov	r16,r5
  8024a0:	20000226 	beq	r4,zero,8024ac <__srefill_r+0x28>
  8024a4:	20800e17 	ldw	r2,56(r4)
  8024a8:	10003c26 	beq	r2,zero,80259c <__srefill_r+0x118>
  8024ac:	80c0030b 	ldhu	r3,12(r16)
  8024b0:	1908000c 	andi	r4,r3,8192
  8024b4:	1805883a 	mov	r2,r3
  8024b8:	2000071e 	bne	r4,zero,8024d8 <__srefill_r+0x54>
  8024bc:	81001917 	ldw	r4,100(r16)
  8024c0:	18880014 	ori	r2,r3,8192
  8024c4:	00f7ffc4 	movi	r3,-8193
  8024c8:	20c8703a 	and	r4,r4,r3
  8024cc:	8080030d 	sth	r2,12(r16)
  8024d0:	1007883a 	mov	r3,r2
  8024d4:	81001915 	stw	r4,100(r16)
  8024d8:	80000115 	stw	zero,4(r16)
  8024dc:	1100080c 	andi	r4,r2,32
  8024e0:	2000571e 	bne	r4,zero,802640 <__srefill_r+0x1bc>
  8024e4:	1100010c 	andi	r4,r2,4
  8024e8:	20001f26 	beq	r4,zero,802568 <__srefill_r+0xe4>
  8024ec:	81400c17 	ldw	r5,48(r16)
  8024f0:	28000826 	beq	r5,zero,802514 <__srefill_r+0x90>
  8024f4:	80801004 	addi	r2,r16,64
  8024f8:	28800226 	beq	r5,r2,802504 <__srefill_r+0x80>
  8024fc:	8809883a 	mov	r4,r17
  802500:	0806b4c0 	call	806b4c <_free_r>
  802504:	80800f17 	ldw	r2,60(r16)
  802508:	80000c15 	stw	zero,48(r16)
  80250c:	80800115 	stw	r2,4(r16)
  802510:	1000391e 	bne	r2,zero,8025f8 <__srefill_r+0x174>
  802514:	80800417 	ldw	r2,16(r16)
  802518:	10004b26 	beq	r2,zero,802648 <__srefill_r+0x1c4>
  80251c:	8480030b 	ldhu	r18,12(r16)
  802520:	908000cc 	andi	r2,r18,3
  802524:	10001f1e 	bne	r2,zero,8025a4 <__srefill_r+0x120>
  802528:	81800417 	ldw	r6,16(r16)
  80252c:	80800817 	ldw	r2,32(r16)
  802530:	81c00517 	ldw	r7,20(r16)
  802534:	81400717 	ldw	r5,28(r16)
  802538:	81800015 	stw	r6,0(r16)
  80253c:	8809883a 	mov	r4,r17
  802540:	103ee83a 	callr	r2
  802544:	80800115 	stw	r2,4(r16)
  802548:	00800e0e 	bge	zero,r2,802584 <__srefill_r+0x100>
  80254c:	0005883a 	mov	r2,zero
  802550:	dfc00317 	ldw	ra,12(sp)
  802554:	dc800217 	ldw	r18,8(sp)
  802558:	dc400117 	ldw	r17,4(sp)
  80255c:	dc000017 	ldw	r16,0(sp)
  802560:	dec00404 	addi	sp,sp,16
  802564:	f800283a 	ret
  802568:	1100040c 	andi	r4,r2,16
  80256c:	20003026 	beq	r4,zero,802630 <__srefill_r+0x1ac>
  802570:	1080020c 	andi	r2,r2,8
  802574:	1000241e 	bne	r2,zero,802608 <__srefill_r+0x184>
  802578:	18c00114 	ori	r3,r3,4
  80257c:	80c0030d 	sth	r3,12(r16)
  802580:	003fe406 	br	802514 <__alt_mem_onchip_mem+0xff7fa514>
  802584:	80c0030b 	ldhu	r3,12(r16)
  802588:	1000161e 	bne	r2,zero,8025e4 <__srefill_r+0x160>
  80258c:	18c00814 	ori	r3,r3,32
  802590:	00bfffc4 	movi	r2,-1
  802594:	80c0030d 	sth	r3,12(r16)
  802598:	003fed06 	br	802550 <__alt_mem_onchip_mem+0xff7fa550>
  80259c:	08010a00 	call	8010a0 <__sinit>
  8025a0:	003fc206 	br	8024ac <__alt_mem_onchip_mem+0xff7fa4ac>
  8025a4:	00802074 	movhi	r2,129
  8025a8:	10909604 	addi	r2,r2,16984
  8025ac:	11000017 	ldw	r4,0(r2)
  8025b0:	01402034 	movhi	r5,128
  8025b4:	00800044 	movi	r2,1
  8025b8:	29491a04 	addi	r5,r5,9320
  8025bc:	8080030d 	sth	r2,12(r16)
  8025c0:	08017240 	call	801724 <_fwalk>
  8025c4:	00800244 	movi	r2,9
  8025c8:	8480030d 	sth	r18,12(r16)
  8025cc:	9480024c 	andi	r18,r18,9
  8025d0:	90bfd51e 	bne	r18,r2,802528 <__alt_mem_onchip_mem+0xff7fa528>
  8025d4:	800b883a 	mov	r5,r16
  8025d8:	8809883a 	mov	r4,r17
  8025dc:	08066d40 	call	8066d4 <__sflush_r>
  8025e0:	003fd106 	br	802528 <__alt_mem_onchip_mem+0xff7fa528>
  8025e4:	18c01014 	ori	r3,r3,64
  8025e8:	80000115 	stw	zero,4(r16)
  8025ec:	00bfffc4 	movi	r2,-1
  8025f0:	80c0030d 	sth	r3,12(r16)
  8025f4:	003fd606 	br	802550 <__alt_mem_onchip_mem+0xff7fa550>
  8025f8:	80c00e17 	ldw	r3,56(r16)
  8025fc:	0005883a 	mov	r2,zero
  802600:	80c00015 	stw	r3,0(r16)
  802604:	003fd206 	br	802550 <__alt_mem_onchip_mem+0xff7fa550>
  802608:	800b883a 	mov	r5,r16
  80260c:	8809883a 	mov	r4,r17
  802610:	08068f00 	call	8068f0 <_fflush_r>
  802614:	10000a1e 	bne	r2,zero,802640 <__srefill_r+0x1bc>
  802618:	8080030b 	ldhu	r2,12(r16)
  80261c:	00fffdc4 	movi	r3,-9
  802620:	80000215 	stw	zero,8(r16)
  802624:	1886703a 	and	r3,r3,r2
  802628:	80000615 	stw	zero,24(r16)
  80262c:	003fd206 	br	802578 <__alt_mem_onchip_mem+0xff7fa578>
  802630:	00800244 	movi	r2,9
  802634:	88800015 	stw	r2,0(r17)
  802638:	18c01014 	ori	r3,r3,64
  80263c:	80c0030d 	sth	r3,12(r16)
  802640:	00bfffc4 	movi	r2,-1
  802644:	003fc206 	br	802550 <__alt_mem_onchip_mem+0xff7fa550>
  802648:	800b883a 	mov	r5,r16
  80264c:	8809883a 	mov	r4,r17
  802650:	08018ac0 	call	8018ac <__smakebuf_r>
  802654:	003fb106 	br	80251c <__alt_mem_onchip_mem+0xff7fa51c>

00802658 <__srget_r>:
  802658:	defffd04 	addi	sp,sp,-12
  80265c:	dc400115 	stw	r17,4(sp)
  802660:	dc000015 	stw	r16,0(sp)
  802664:	dfc00215 	stw	ra,8(sp)
  802668:	2023883a 	mov	r17,r4
  80266c:	2821883a 	mov	r16,r5
  802670:	20000226 	beq	r4,zero,80267c <__srget_r+0x24>
  802674:	20800e17 	ldw	r2,56(r4)
  802678:	10001026 	beq	r2,zero,8026bc <__srget_r+0x64>
  80267c:	800b883a 	mov	r5,r16
  802680:	8809883a 	mov	r4,r17
  802684:	08024840 	call	802484 <__srefill_r>
  802688:	10000e1e 	bne	r2,zero,8026c4 <__srget_r+0x6c>
  80268c:	80c00017 	ldw	r3,0(r16)
  802690:	80800117 	ldw	r2,4(r16)
  802694:	19000044 	addi	r4,r3,1
  802698:	10bfffc4 	addi	r2,r2,-1
  80269c:	80800115 	stw	r2,4(r16)
  8026a0:	81000015 	stw	r4,0(r16)
  8026a4:	18800003 	ldbu	r2,0(r3)
  8026a8:	dfc00217 	ldw	ra,8(sp)
  8026ac:	dc400117 	ldw	r17,4(sp)
  8026b0:	dc000017 	ldw	r16,0(sp)
  8026b4:	dec00304 	addi	sp,sp,12
  8026b8:	f800283a 	ret
  8026bc:	08010a00 	call	8010a0 <__sinit>
  8026c0:	003fee06 	br	80267c <__alt_mem_onchip_mem+0xff7fa67c>
  8026c4:	00bfffc4 	movi	r2,-1
  8026c8:	003ff706 	br	8026a8 <__alt_mem_onchip_mem+0xff7fa6a8>

008026cc <__srget>:
  8026cc:	00802074 	movhi	r2,129
  8026d0:	10909704 	addi	r2,r2,16988
  8026d4:	200b883a 	mov	r5,r4
  8026d8:	11000017 	ldw	r4,0(r2)
  8026dc:	08026581 	jmpi	802658 <__srget_r>

008026e0 <_sbrk_r>:
  8026e0:	defffd04 	addi	sp,sp,-12
  8026e4:	dc000015 	stw	r16,0(sp)
  8026e8:	04002074 	movhi	r16,129
  8026ec:	dc400115 	stw	r17,4(sp)
  8026f0:	8417ea04 	addi	r16,r16,24488
  8026f4:	2023883a 	mov	r17,r4
  8026f8:	2809883a 	mov	r4,r5
  8026fc:	dfc00215 	stw	ra,8(sp)
  802700:	80000015 	stw	zero,0(r16)
  802704:	080e9a40 	call	80e9a4 <sbrk>
  802708:	00ffffc4 	movi	r3,-1
  80270c:	10c00526 	beq	r2,r3,802724 <_sbrk_r+0x44>
  802710:	dfc00217 	ldw	ra,8(sp)
  802714:	dc400117 	ldw	r17,4(sp)
  802718:	dc000017 	ldw	r16,0(sp)
  80271c:	dec00304 	addi	sp,sp,12
  802720:	f800283a 	ret
  802724:	80c00017 	ldw	r3,0(r16)
  802728:	183ff926 	beq	r3,zero,802710 <__alt_mem_onchip_mem+0xff7fa710>
  80272c:	88c00015 	stw	r3,0(r17)
  802730:	003ff706 	br	802710 <__alt_mem_onchip_mem+0xff7fa710>

00802734 <__sread>:
  802734:	defffe04 	addi	sp,sp,-8
  802738:	dc000015 	stw	r16,0(sp)
  80273c:	2821883a 	mov	r16,r5
  802740:	2940038f 	ldh	r5,14(r5)
  802744:	dfc00115 	stw	ra,4(sp)
  802748:	08082140 	call	808214 <_read_r>
  80274c:	10000716 	blt	r2,zero,80276c <__sread+0x38>
  802750:	80c01417 	ldw	r3,80(r16)
  802754:	1887883a 	add	r3,r3,r2
  802758:	80c01415 	stw	r3,80(r16)
  80275c:	dfc00117 	ldw	ra,4(sp)
  802760:	dc000017 	ldw	r16,0(sp)
  802764:	dec00204 	addi	sp,sp,8
  802768:	f800283a 	ret
  80276c:	80c0030b 	ldhu	r3,12(r16)
  802770:	18fbffcc 	andi	r3,r3,61439
  802774:	80c0030d 	sth	r3,12(r16)
  802778:	dfc00117 	ldw	ra,4(sp)
  80277c:	dc000017 	ldw	r16,0(sp)
  802780:	dec00204 	addi	sp,sp,8
  802784:	f800283a 	ret

00802788 <__seofread>:
  802788:	0005883a 	mov	r2,zero
  80278c:	f800283a 	ret

00802790 <__swrite>:
  802790:	2880030b 	ldhu	r2,12(r5)
  802794:	defffb04 	addi	sp,sp,-20
  802798:	dcc00315 	stw	r19,12(sp)
  80279c:	dc800215 	stw	r18,8(sp)
  8027a0:	dc400115 	stw	r17,4(sp)
  8027a4:	dc000015 	stw	r16,0(sp)
  8027a8:	dfc00415 	stw	ra,16(sp)
  8027ac:	10c0400c 	andi	r3,r2,256
  8027b0:	2821883a 	mov	r16,r5
  8027b4:	2023883a 	mov	r17,r4
  8027b8:	3025883a 	mov	r18,r6
  8027bc:	3827883a 	mov	r19,r7
  8027c0:	18000526 	beq	r3,zero,8027d8 <__swrite+0x48>
  8027c4:	2940038f 	ldh	r5,14(r5)
  8027c8:	01c00084 	movi	r7,2
  8027cc:	000d883a 	mov	r6,zero
  8027d0:	0806f8c0 	call	806f8c <_lseek_r>
  8027d4:	8080030b 	ldhu	r2,12(r16)
  8027d8:	8140038f 	ldh	r5,14(r16)
  8027dc:	10bbffcc 	andi	r2,r2,61439
  8027e0:	980f883a 	mov	r7,r19
  8027e4:	900d883a 	mov	r6,r18
  8027e8:	8809883a 	mov	r4,r17
  8027ec:	8080030d 	sth	r2,12(r16)
  8027f0:	dfc00417 	ldw	ra,16(sp)
  8027f4:	dcc00317 	ldw	r19,12(sp)
  8027f8:	dc800217 	ldw	r18,8(sp)
  8027fc:	dc400117 	ldw	r17,4(sp)
  802800:	dc000017 	ldw	r16,0(sp)
  802804:	dec00504 	addi	sp,sp,20
  802808:	0804b401 	jmpi	804b40 <_write_r>

0080280c <__sseek>:
  80280c:	defffe04 	addi	sp,sp,-8
  802810:	dc000015 	stw	r16,0(sp)
  802814:	2821883a 	mov	r16,r5
  802818:	2940038f 	ldh	r5,14(r5)
  80281c:	dfc00115 	stw	ra,4(sp)
  802820:	0806f8c0 	call	806f8c <_lseek_r>
  802824:	00ffffc4 	movi	r3,-1
  802828:	10c00826 	beq	r2,r3,80284c <__sseek+0x40>
  80282c:	80c0030b 	ldhu	r3,12(r16)
  802830:	80801415 	stw	r2,80(r16)
  802834:	18c40014 	ori	r3,r3,4096
  802838:	80c0030d 	sth	r3,12(r16)
  80283c:	dfc00117 	ldw	ra,4(sp)
  802840:	dc000017 	ldw	r16,0(sp)
  802844:	dec00204 	addi	sp,sp,8
  802848:	f800283a 	ret
  80284c:	80c0030b 	ldhu	r3,12(r16)
  802850:	18fbffcc 	andi	r3,r3,61439
  802854:	80c0030d 	sth	r3,12(r16)
  802858:	dfc00117 	ldw	ra,4(sp)
  80285c:	dc000017 	ldw	r16,0(sp)
  802860:	dec00204 	addi	sp,sp,8
  802864:	f800283a 	ret

00802868 <__sclose>:
  802868:	2940038f 	ldh	r5,14(r5)
  80286c:	0804cf41 	jmpi	804cf4 <_close_r>

00802870 <___vfprintf_internal_r>:
  802870:	deffb804 	addi	sp,sp,-288
  802874:	dfc04715 	stw	ra,284(sp)
  802878:	ddc04515 	stw	r23,276(sp)
  80287c:	dd404315 	stw	r21,268(sp)
  802880:	d9002c15 	stw	r4,176(sp)
  802884:	282f883a 	mov	r23,r5
  802888:	302b883a 	mov	r21,r6
  80288c:	d9c02d15 	stw	r7,180(sp)
  802890:	df004615 	stw	fp,280(sp)
  802894:	dd804415 	stw	r22,272(sp)
  802898:	dd004215 	stw	r20,264(sp)
  80289c:	dcc04115 	stw	r19,260(sp)
  8028a0:	dc804015 	stw	r18,256(sp)
  8028a4:	dc403f15 	stw	r17,252(sp)
  8028a8:	dc003e15 	stw	r16,248(sp)
  8028ac:	0806f5c0 	call	806f5c <_localeconv_r>
  8028b0:	10800017 	ldw	r2,0(r2)
  8028b4:	1009883a 	mov	r4,r2
  8028b8:	d8803415 	stw	r2,208(sp)
  8028bc:	08083c40 	call	8083c4 <strlen>
  8028c0:	d8803715 	stw	r2,220(sp)
  8028c4:	d8802c17 	ldw	r2,176(sp)
  8028c8:	10000226 	beq	r2,zero,8028d4 <___vfprintf_internal_r+0x64>
  8028cc:	10800e17 	ldw	r2,56(r2)
  8028d0:	1000f926 	beq	r2,zero,802cb8 <___vfprintf_internal_r+0x448>
  8028d4:	b880030b 	ldhu	r2,12(r23)
  8028d8:	10c8000c 	andi	r3,r2,8192
  8028dc:	1800061e 	bne	r3,zero,8028f8 <___vfprintf_internal_r+0x88>
  8028e0:	b9001917 	ldw	r4,100(r23)
  8028e4:	00f7ffc4 	movi	r3,-8193
  8028e8:	10880014 	ori	r2,r2,8192
  8028ec:	20c6703a 	and	r3,r4,r3
  8028f0:	b880030d 	sth	r2,12(r23)
  8028f4:	b8c01915 	stw	r3,100(r23)
  8028f8:	10c0020c 	andi	r3,r2,8
  8028fc:	1800c126 	beq	r3,zero,802c04 <___vfprintf_internal_r+0x394>
  802900:	b8c00417 	ldw	r3,16(r23)
  802904:	1800bf26 	beq	r3,zero,802c04 <___vfprintf_internal_r+0x394>
  802908:	1080068c 	andi	r2,r2,26
  80290c:	00c00284 	movi	r3,10
  802910:	10c0c426 	beq	r2,r3,802c24 <___vfprintf_internal_r+0x3b4>
  802914:	d8c00404 	addi	r3,sp,16
  802918:	05002074 	movhi	r20,129
  80291c:	d9001e04 	addi	r4,sp,120
  802920:	a5081a84 	addi	r20,r20,8298
  802924:	d8c01e15 	stw	r3,120(sp)
  802928:	d8002015 	stw	zero,128(sp)
  80292c:	d8001f15 	stw	zero,124(sp)
  802930:	d8003315 	stw	zero,204(sp)
  802934:	d8003615 	stw	zero,216(sp)
  802938:	d8003815 	stw	zero,224(sp)
  80293c:	1811883a 	mov	r8,r3
  802940:	d8003915 	stw	zero,228(sp)
  802944:	d8003a15 	stw	zero,232(sp)
  802948:	d8002f15 	stw	zero,188(sp)
  80294c:	d9002815 	stw	r4,160(sp)
  802950:	a8800007 	ldb	r2,0(r21)
  802954:	10027b26 	beq	r2,zero,803344 <___vfprintf_internal_r+0xad4>
  802958:	00c00944 	movi	r3,37
  80295c:	a821883a 	mov	r16,r21
  802960:	10c0021e 	bne	r2,r3,80296c <___vfprintf_internal_r+0xfc>
  802964:	00001406 	br	8029b8 <___vfprintf_internal_r+0x148>
  802968:	10c00326 	beq	r2,r3,802978 <___vfprintf_internal_r+0x108>
  80296c:	84000044 	addi	r16,r16,1
  802970:	80800007 	ldb	r2,0(r16)
  802974:	103ffc1e 	bne	r2,zero,802968 <__alt_mem_onchip_mem+0xff7fa968>
  802978:	8563c83a 	sub	r17,r16,r21
  80297c:	88000e26 	beq	r17,zero,8029b8 <___vfprintf_internal_r+0x148>
  802980:	d8c02017 	ldw	r3,128(sp)
  802984:	d8801f17 	ldw	r2,124(sp)
  802988:	45400015 	stw	r21,0(r8)
  80298c:	1c47883a 	add	r3,r3,r17
  802990:	10800044 	addi	r2,r2,1
  802994:	d8c02015 	stw	r3,128(sp)
  802998:	44400115 	stw	r17,4(r8)
  80299c:	d8801f15 	stw	r2,124(sp)
  8029a0:	00c001c4 	movi	r3,7
  8029a4:	1880a716 	blt	r3,r2,802c44 <___vfprintf_internal_r+0x3d4>
  8029a8:	42000204 	addi	r8,r8,8
  8029ac:	d9402f17 	ldw	r5,188(sp)
  8029b0:	2c4b883a 	add	r5,r5,r17
  8029b4:	d9402f15 	stw	r5,188(sp)
  8029b8:	80800007 	ldb	r2,0(r16)
  8029bc:	1000a826 	beq	r2,zero,802c60 <___vfprintf_internal_r+0x3f0>
  8029c0:	84400047 	ldb	r17,1(r16)
  8029c4:	00bfffc4 	movi	r2,-1
  8029c8:	85400044 	addi	r21,r16,1
  8029cc:	d8002785 	stb	zero,158(sp)
  8029d0:	0007883a 	mov	r3,zero
  8029d4:	000f883a 	mov	r7,zero
  8029d8:	d8802915 	stw	r2,164(sp)
  8029dc:	d8003115 	stw	zero,196(sp)
  8029e0:	0025883a 	mov	r18,zero
  8029e4:	01401604 	movi	r5,88
  8029e8:	01800244 	movi	r6,9
  8029ec:	02800a84 	movi	r10,42
  8029f0:	02401b04 	movi	r9,108
  8029f4:	ad400044 	addi	r21,r21,1
  8029f8:	88bff804 	addi	r2,r17,-32
  8029fc:	28830436 	bltu	r5,r2,803610 <___vfprintf_internal_r+0xda0>
  802a00:	100490ba 	slli	r2,r2,2
  802a04:	01002034 	movhi	r4,128
  802a08:	210a8604 	addi	r4,r4,10776
  802a0c:	1105883a 	add	r2,r2,r4
  802a10:	10800017 	ldw	r2,0(r2)
  802a14:	1000683a 	jmp	r2
  802a18:	00803530 	cmpltui	r2,zero,212
  802a1c:	00803610 	cmplti	r2,zero,216
  802a20:	00803610 	cmplti	r2,zero,216
  802a24:	00803550 	cmplti	r2,zero,213
  802a28:	00803610 	cmplti	r2,zero,216
  802a2c:	00803610 	cmplti	r2,zero,216
  802a30:	00803610 	cmplti	r2,zero,216
  802a34:	00803610 	cmplti	r2,zero,216
  802a38:	00803610 	cmplti	r2,zero,216
  802a3c:	00803610 	cmplti	r2,zero,216
  802a40:	00802cc4 	movi	r2,179
  802a44:	0080346c 	andhi	r2,zero,209
  802a48:	00803610 	cmplti	r2,zero,216
  802a4c:	00802b8c 	andi	r2,zero,174
  802a50:	00802cec 	andhi	r2,zero,179
  802a54:	00803610 	cmplti	r2,zero,216
  802a58:	00802d2c 	andhi	r2,zero,180
  802a5c:	00802d38 	rdprs	r2,zero,180
  802a60:	00802d38 	rdprs	r2,zero,180
  802a64:	00802d38 	rdprs	r2,zero,180
  802a68:	00802d38 	rdprs	r2,zero,180
  802a6c:	00802d38 	rdprs	r2,zero,180
  802a70:	00802d38 	rdprs	r2,zero,180
  802a74:	00802d38 	rdprs	r2,zero,180
  802a78:	00802d38 	rdprs	r2,zero,180
  802a7c:	00802d38 	rdprs	r2,zero,180
  802a80:	00803610 	cmplti	r2,zero,216
  802a84:	00803610 	cmplti	r2,zero,216
  802a88:	00803610 	cmplti	r2,zero,216
  802a8c:	00803610 	cmplti	r2,zero,216
  802a90:	00803610 	cmplti	r2,zero,216
  802a94:	00803610 	cmplti	r2,zero,216
  802a98:	00803610 	cmplti	r2,zero,216
  802a9c:	00803610 	cmplti	r2,zero,216
  802aa0:	00803610 	cmplti	r2,zero,216
  802aa4:	00803610 	cmplti	r2,zero,216
  802aa8:	00802d6c 	andhi	r2,zero,181
  802aac:	00802e28 	cmpgeui	r2,zero,184
  802ab0:	00803610 	cmplti	r2,zero,216
  802ab4:	00802e28 	cmpgeui	r2,zero,184
  802ab8:	00803610 	cmplti	r2,zero,216
  802abc:	00803610 	cmplti	r2,zero,216
  802ac0:	00803610 	cmplti	r2,zero,216
  802ac4:	00803610 	cmplti	r2,zero,216
  802ac8:	00802ec8 	cmpgei	r2,zero,187
  802acc:	00803610 	cmplti	r2,zero,216
  802ad0:	00803610 	cmplti	r2,zero,216
  802ad4:	00802ed4 	movui	r2,187
  802ad8:	00803610 	cmplti	r2,zero,216
  802adc:	00803610 	cmplti	r2,zero,216
  802ae0:	00803610 	cmplti	r2,zero,216
  802ae4:	00803610 	cmplti	r2,zero,216
  802ae8:	00803610 	cmplti	r2,zero,216
  802aec:	0080334c 	andi	r2,zero,205
  802af0:	00803610 	cmplti	r2,zero,216
  802af4:	00803610 	cmplti	r2,zero,216
  802af8:	008033ac 	andhi	r2,zero,206
  802afc:	00803610 	cmplti	r2,zero,216
  802b00:	00803610 	cmplti	r2,zero,216
  802b04:	00803610 	cmplti	r2,zero,216
  802b08:	00803610 	cmplti	r2,zero,216
  802b0c:	00803610 	cmplti	r2,zero,216
  802b10:	00803610 	cmplti	r2,zero,216
  802b14:	00803610 	cmplti	r2,zero,216
  802b18:	00803610 	cmplti	r2,zero,216
  802b1c:	00803610 	cmplti	r2,zero,216
  802b20:	00803610 	cmplti	r2,zero,216
  802b24:	008035bc 	xorhi	r2,zero,214
  802b28:	0080355c 	xori	r2,zero,213
  802b2c:	00802e28 	cmpgeui	r2,zero,184
  802b30:	00802e28 	cmpgeui	r2,zero,184
  802b34:	00802e28 	cmpgeui	r2,zero,184
  802b38:	0080356c 	andhi	r2,zero,213
  802b3c:	0080355c 	xori	r2,zero,213
  802b40:	00803610 	cmplti	r2,zero,216
  802b44:	00803610 	cmplti	r2,zero,216
  802b48:	00803578 	rdprs	r2,zero,213
  802b4c:	00803610 	cmplti	r2,zero,216
  802b50:	00803588 	cmpgei	r2,zero,214
  802b54:	0080345c 	xori	r2,zero,209
  802b58:	00802b98 	cmpnei	r2,zero,174
  802b5c:	0080347c 	xorhi	r2,zero,209
  802b60:	00803610 	cmplti	r2,zero,216
  802b64:	00803488 	cmpgei	r2,zero,210
  802b68:	00803610 	cmplti	r2,zero,216
  802b6c:	008034e4 	muli	r2,zero,211
  802b70:	00803610 	cmplti	r2,zero,216
  802b74:	00803610 	cmplti	r2,zero,216
  802b78:	008034f4 	movhi	r2,211
  802b7c:	d9003117 	ldw	r4,196(sp)
  802b80:	d8802d15 	stw	r2,180(sp)
  802b84:	0109c83a 	sub	r4,zero,r4
  802b88:	d9003115 	stw	r4,196(sp)
  802b8c:	94800114 	ori	r18,r18,4
  802b90:	ac400007 	ldb	r17,0(r21)
  802b94:	003f9706 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  802b98:	00800c04 	movi	r2,48
  802b9c:	d9002d17 	ldw	r4,180(sp)
  802ba0:	d9402917 	ldw	r5,164(sp)
  802ba4:	d8802705 	stb	r2,156(sp)
  802ba8:	00801e04 	movi	r2,120
  802bac:	d8802745 	stb	r2,157(sp)
  802bb0:	d8002785 	stb	zero,158(sp)
  802bb4:	20c00104 	addi	r3,r4,4
  802bb8:	24c00017 	ldw	r19,0(r4)
  802bbc:	002d883a 	mov	r22,zero
  802bc0:	90800094 	ori	r2,r18,2
  802bc4:	28029a16 	blt	r5,zero,803630 <___vfprintf_internal_r+0xdc0>
  802bc8:	00bfdfc4 	movi	r2,-129
  802bcc:	90a4703a 	and	r18,r18,r2
  802bd0:	d8c02d15 	stw	r3,180(sp)
  802bd4:	94800094 	ori	r18,r18,2
  802bd8:	9802871e 	bne	r19,zero,8035f8 <___vfprintf_internal_r+0xd88>
  802bdc:	00802074 	movhi	r2,129
  802be0:	10881304 	addi	r2,r2,8268
  802be4:	d8803915 	stw	r2,228(sp)
  802be8:	04401e04 	movi	r17,120
  802bec:	d8802917 	ldw	r2,164(sp)
  802bf0:	0039883a 	mov	fp,zero
  802bf4:	1001e926 	beq	r2,zero,80339c <___vfprintf_internal_r+0xb2c>
  802bf8:	0027883a 	mov	r19,zero
  802bfc:	002d883a 	mov	r22,zero
  802c00:	00020506 	br	803418 <___vfprintf_internal_r+0xba8>
  802c04:	d9002c17 	ldw	r4,176(sp)
  802c08:	b80b883a 	mov	r5,r23
  802c0c:	0804ba00 	call	804ba0 <__swsetup_r>
  802c10:	1005ac1e 	bne	r2,zero,8042c4 <___vfprintf_internal_r+0x1a54>
  802c14:	b880030b 	ldhu	r2,12(r23)
  802c18:	00c00284 	movi	r3,10
  802c1c:	1080068c 	andi	r2,r2,26
  802c20:	10ff3c1e 	bne	r2,r3,802914 <__alt_mem_onchip_mem+0xff7fa914>
  802c24:	b880038f 	ldh	r2,14(r23)
  802c28:	103f3a16 	blt	r2,zero,802914 <__alt_mem_onchip_mem+0xff7fa914>
  802c2c:	d9c02d17 	ldw	r7,180(sp)
  802c30:	d9002c17 	ldw	r4,176(sp)
  802c34:	a80d883a 	mov	r6,r21
  802c38:	b80b883a 	mov	r5,r23
  802c3c:	0804a840 	call	804a84 <__sbprintf>
  802c40:	00001106 	br	802c88 <___vfprintf_internal_r+0x418>
  802c44:	d9002c17 	ldw	r4,176(sp)
  802c48:	d9801e04 	addi	r6,sp,120
  802c4c:	b80b883a 	mov	r5,r23
  802c50:	08085580 	call	808558 <__sprint_r>
  802c54:	1000081e 	bne	r2,zero,802c78 <___vfprintf_internal_r+0x408>
  802c58:	da000404 	addi	r8,sp,16
  802c5c:	003f5306 	br	8029ac <__alt_mem_onchip_mem+0xff7fa9ac>
  802c60:	d8802017 	ldw	r2,128(sp)
  802c64:	10000426 	beq	r2,zero,802c78 <___vfprintf_internal_r+0x408>
  802c68:	d9002c17 	ldw	r4,176(sp)
  802c6c:	d9801e04 	addi	r6,sp,120
  802c70:	b80b883a 	mov	r5,r23
  802c74:	08085580 	call	808558 <__sprint_r>
  802c78:	b880030b 	ldhu	r2,12(r23)
  802c7c:	1080100c 	andi	r2,r2,64
  802c80:	1005901e 	bne	r2,zero,8042c4 <___vfprintf_internal_r+0x1a54>
  802c84:	d8802f17 	ldw	r2,188(sp)
  802c88:	dfc04717 	ldw	ra,284(sp)
  802c8c:	df004617 	ldw	fp,280(sp)
  802c90:	ddc04517 	ldw	r23,276(sp)
  802c94:	dd804417 	ldw	r22,272(sp)
  802c98:	dd404317 	ldw	r21,268(sp)
  802c9c:	dd004217 	ldw	r20,264(sp)
  802ca0:	dcc04117 	ldw	r19,260(sp)
  802ca4:	dc804017 	ldw	r18,256(sp)
  802ca8:	dc403f17 	ldw	r17,252(sp)
  802cac:	dc003e17 	ldw	r16,248(sp)
  802cb0:	dec04804 	addi	sp,sp,288
  802cb4:	f800283a 	ret
  802cb8:	d9002c17 	ldw	r4,176(sp)
  802cbc:	08010a00 	call	8010a0 <__sinit>
  802cc0:	003f0406 	br	8028d4 <__alt_mem_onchip_mem+0xff7fa8d4>
  802cc4:	d8802d17 	ldw	r2,180(sp)
  802cc8:	d9002d17 	ldw	r4,180(sp)
  802ccc:	10800017 	ldw	r2,0(r2)
  802cd0:	d8803115 	stw	r2,196(sp)
  802cd4:	20800104 	addi	r2,r4,4
  802cd8:	d9003117 	ldw	r4,196(sp)
  802cdc:	203fa716 	blt	r4,zero,802b7c <__alt_mem_onchip_mem+0xff7fab7c>
  802ce0:	d8802d15 	stw	r2,180(sp)
  802ce4:	ac400007 	ldb	r17,0(r21)
  802ce8:	003f4206 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  802cec:	ac400007 	ldb	r17,0(r21)
  802cf0:	aac00044 	addi	r11,r21,1
  802cf4:	8a872826 	beq	r17,r10,804998 <___vfprintf_internal_r+0x2128>
  802cf8:	88bff404 	addi	r2,r17,-48
  802cfc:	0009883a 	mov	r4,zero
  802d00:	30867d36 	bltu	r6,r2,8046f8 <___vfprintf_internal_r+0x1e88>
  802d04:	5c400007 	ldb	r17,0(r11)
  802d08:	210002a4 	muli	r4,r4,10
  802d0c:	5d400044 	addi	r21,r11,1
  802d10:	a817883a 	mov	r11,r21
  802d14:	2089883a 	add	r4,r4,r2
  802d18:	88bff404 	addi	r2,r17,-48
  802d1c:	30bff92e 	bgeu	r6,r2,802d04 <__alt_mem_onchip_mem+0xff7fad04>
  802d20:	2005c916 	blt	r4,zero,804448 <___vfprintf_internal_r+0x1bd8>
  802d24:	d9002915 	stw	r4,164(sp)
  802d28:	003f3306 	br	8029f8 <__alt_mem_onchip_mem+0xff7fa9f8>
  802d2c:	94802014 	ori	r18,r18,128
  802d30:	ac400007 	ldb	r17,0(r21)
  802d34:	003f2f06 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  802d38:	a809883a 	mov	r4,r21
  802d3c:	d8003115 	stw	zero,196(sp)
  802d40:	88bff404 	addi	r2,r17,-48
  802d44:	0017883a 	mov	r11,zero
  802d48:	24400007 	ldb	r17,0(r4)
  802d4c:	5ac002a4 	muli	r11,r11,10
  802d50:	ad400044 	addi	r21,r21,1
  802d54:	a809883a 	mov	r4,r21
  802d58:	12d7883a 	add	r11,r2,r11
  802d5c:	88bff404 	addi	r2,r17,-48
  802d60:	30bff92e 	bgeu	r6,r2,802d48 <__alt_mem_onchip_mem+0xff7fad48>
  802d64:	dac03115 	stw	r11,196(sp)
  802d68:	003f2306 	br	8029f8 <__alt_mem_onchip_mem+0xff7fa9f8>
  802d6c:	18c03fcc 	andi	r3,r3,255
  802d70:	18072b1e 	bne	r3,zero,804a20 <___vfprintf_internal_r+0x21b0>
  802d74:	94800414 	ori	r18,r18,16
  802d78:	9080080c 	andi	r2,r18,32
  802d7c:	10037b26 	beq	r2,zero,803b6c <___vfprintf_internal_r+0x12fc>
  802d80:	d9402d17 	ldw	r5,180(sp)
  802d84:	28800117 	ldw	r2,4(r5)
  802d88:	2cc00017 	ldw	r19,0(r5)
  802d8c:	29400204 	addi	r5,r5,8
  802d90:	d9402d15 	stw	r5,180(sp)
  802d94:	102d883a 	mov	r22,r2
  802d98:	10044b16 	blt	r2,zero,803ec8 <___vfprintf_internal_r+0x1658>
  802d9c:	d9402917 	ldw	r5,164(sp)
  802da0:	df002783 	ldbu	fp,158(sp)
  802da4:	2803bc16 	blt	r5,zero,803c98 <___vfprintf_internal_r+0x1428>
  802da8:	00ffdfc4 	movi	r3,-129
  802dac:	9d84b03a 	or	r2,r19,r22
  802db0:	90e4703a 	and	r18,r18,r3
  802db4:	10017726 	beq	r2,zero,803394 <___vfprintf_internal_r+0xb24>
  802db8:	b0038326 	beq	r22,zero,803bc8 <___vfprintf_internal_r+0x1358>
  802dbc:	dc402a15 	stw	r17,168(sp)
  802dc0:	dc001e04 	addi	r16,sp,120
  802dc4:	b023883a 	mov	r17,r22
  802dc8:	402d883a 	mov	r22,r8
  802dcc:	9809883a 	mov	r4,r19
  802dd0:	880b883a 	mov	r5,r17
  802dd4:	01800284 	movi	r6,10
  802dd8:	000f883a 	mov	r7,zero
  802ddc:	080b1a40 	call	80b1a4 <__umoddi3>
  802de0:	10800c04 	addi	r2,r2,48
  802de4:	843fffc4 	addi	r16,r16,-1
  802de8:	9809883a 	mov	r4,r19
  802dec:	880b883a 	mov	r5,r17
  802df0:	80800005 	stb	r2,0(r16)
  802df4:	01800284 	movi	r6,10
  802df8:	000f883a 	mov	r7,zero
  802dfc:	080ac2c0 	call	80ac2c <__udivdi3>
  802e00:	1027883a 	mov	r19,r2
  802e04:	10c4b03a 	or	r2,r2,r3
  802e08:	1823883a 	mov	r17,r3
  802e0c:	103fef1e 	bne	r2,zero,802dcc <__alt_mem_onchip_mem+0xff7fadcc>
  802e10:	d8c02817 	ldw	r3,160(sp)
  802e14:	dc402a17 	ldw	r17,168(sp)
  802e18:	b011883a 	mov	r8,r22
  802e1c:	1c07c83a 	sub	r3,r3,r16
  802e20:	d8c02e15 	stw	r3,184(sp)
  802e24:	00005906 	br	802f8c <___vfprintf_internal_r+0x71c>
  802e28:	18c03fcc 	andi	r3,r3,255
  802e2c:	1806fa1e 	bne	r3,zero,804a18 <___vfprintf_internal_r+0x21a8>
  802e30:	9080020c 	andi	r2,r18,8
  802e34:	10048a26 	beq	r2,zero,804060 <___vfprintf_internal_r+0x17f0>
  802e38:	d8c02d17 	ldw	r3,180(sp)
  802e3c:	d9002d17 	ldw	r4,180(sp)
  802e40:	d9402d17 	ldw	r5,180(sp)
  802e44:	18c00017 	ldw	r3,0(r3)
  802e48:	21000117 	ldw	r4,4(r4)
  802e4c:	29400204 	addi	r5,r5,8
  802e50:	d8c03615 	stw	r3,216(sp)
  802e54:	d9003815 	stw	r4,224(sp)
  802e58:	d9402d15 	stw	r5,180(sp)
  802e5c:	d9003617 	ldw	r4,216(sp)
  802e60:	d9403817 	ldw	r5,224(sp)
  802e64:	da003d15 	stw	r8,244(sp)
  802e68:	04000044 	movi	r16,1
  802e6c:	08082740 	call	808274 <__fpclassifyd>
  802e70:	da003d17 	ldw	r8,244(sp)
  802e74:	14041f1e 	bne	r2,r16,803ef4 <___vfprintf_internal_r+0x1684>
  802e78:	d9003617 	ldw	r4,216(sp)
  802e7c:	d9403817 	ldw	r5,224(sp)
  802e80:	000d883a 	mov	r6,zero
  802e84:	000f883a 	mov	r7,zero
  802e88:	080c9d40 	call	80c9d4 <__ledf2>
  802e8c:	da003d17 	ldw	r8,244(sp)
  802e90:	1005be16 	blt	r2,zero,80458c <___vfprintf_internal_r+0x1d1c>
  802e94:	df002783 	ldbu	fp,158(sp)
  802e98:	008011c4 	movi	r2,71
  802e9c:	1445330e 	bge	r2,r17,80436c <___vfprintf_internal_r+0x1afc>
  802ea0:	04002074 	movhi	r16,129
  802ea4:	84080b04 	addi	r16,r16,8236
  802ea8:	00c000c4 	movi	r3,3
  802eac:	00bfdfc4 	movi	r2,-129
  802eb0:	d8c02a15 	stw	r3,168(sp)
  802eb4:	90a4703a 	and	r18,r18,r2
  802eb8:	d8c02e15 	stw	r3,184(sp)
  802ebc:	d8002915 	stw	zero,164(sp)
  802ec0:	d8003215 	stw	zero,200(sp)
  802ec4:	00003706 	br	802fa4 <___vfprintf_internal_r+0x734>
  802ec8:	94800214 	ori	r18,r18,8
  802ecc:	ac400007 	ldb	r17,0(r21)
  802ed0:	003ec806 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  802ed4:	18c03fcc 	andi	r3,r3,255
  802ed8:	1806db1e 	bne	r3,zero,804a48 <___vfprintf_internal_r+0x21d8>
  802edc:	94800414 	ori	r18,r18,16
  802ee0:	9080080c 	andi	r2,r18,32
  802ee4:	1002d826 	beq	r2,zero,803a48 <___vfprintf_internal_r+0x11d8>
  802ee8:	d9402d17 	ldw	r5,180(sp)
  802eec:	d8c02917 	ldw	r3,164(sp)
  802ef0:	d8002785 	stb	zero,158(sp)
  802ef4:	28800204 	addi	r2,r5,8
  802ef8:	2cc00017 	ldw	r19,0(r5)
  802efc:	2d800117 	ldw	r22,4(r5)
  802f00:	18048f16 	blt	r3,zero,804140 <___vfprintf_internal_r+0x18d0>
  802f04:	013fdfc4 	movi	r4,-129
  802f08:	9d86b03a 	or	r3,r19,r22
  802f0c:	d8802d15 	stw	r2,180(sp)
  802f10:	9124703a 	and	r18,r18,r4
  802f14:	1802d91e 	bne	r3,zero,803a7c <___vfprintf_internal_r+0x120c>
  802f18:	d8c02917 	ldw	r3,164(sp)
  802f1c:	0039883a 	mov	fp,zero
  802f20:	1805c326 	beq	r3,zero,804630 <___vfprintf_internal_r+0x1dc0>
  802f24:	0027883a 	mov	r19,zero
  802f28:	002d883a 	mov	r22,zero
  802f2c:	dc001e04 	addi	r16,sp,120
  802f30:	9806d0fa 	srli	r3,r19,3
  802f34:	b008977a 	slli	r4,r22,29
  802f38:	b02cd0fa 	srli	r22,r22,3
  802f3c:	9cc001cc 	andi	r19,r19,7
  802f40:	98800c04 	addi	r2,r19,48
  802f44:	843fffc4 	addi	r16,r16,-1
  802f48:	20e6b03a 	or	r19,r4,r3
  802f4c:	80800005 	stb	r2,0(r16)
  802f50:	9d86b03a 	or	r3,r19,r22
  802f54:	183ff61e 	bne	r3,zero,802f30 <__alt_mem_onchip_mem+0xff7faf30>
  802f58:	90c0004c 	andi	r3,r18,1
  802f5c:	18013b26 	beq	r3,zero,80344c <___vfprintf_internal_r+0xbdc>
  802f60:	10803fcc 	andi	r2,r2,255
  802f64:	1080201c 	xori	r2,r2,128
  802f68:	10bfe004 	addi	r2,r2,-128
  802f6c:	00c00c04 	movi	r3,48
  802f70:	10c13626 	beq	r2,r3,80344c <___vfprintf_internal_r+0xbdc>
  802f74:	80ffffc5 	stb	r3,-1(r16)
  802f78:	d8c02817 	ldw	r3,160(sp)
  802f7c:	80bfffc4 	addi	r2,r16,-1
  802f80:	1021883a 	mov	r16,r2
  802f84:	1887c83a 	sub	r3,r3,r2
  802f88:	d8c02e15 	stw	r3,184(sp)
  802f8c:	d8802e17 	ldw	r2,184(sp)
  802f90:	d9002917 	ldw	r4,164(sp)
  802f94:	1100010e 	bge	r2,r4,802f9c <___vfprintf_internal_r+0x72c>
  802f98:	2005883a 	mov	r2,r4
  802f9c:	d8802a15 	stw	r2,168(sp)
  802fa0:	d8003215 	stw	zero,200(sp)
  802fa4:	e7003fcc 	andi	fp,fp,255
  802fa8:	e700201c 	xori	fp,fp,128
  802fac:	e73fe004 	addi	fp,fp,-128
  802fb0:	e0000326 	beq	fp,zero,802fc0 <___vfprintf_internal_r+0x750>
  802fb4:	d8c02a17 	ldw	r3,168(sp)
  802fb8:	18c00044 	addi	r3,r3,1
  802fbc:	d8c02a15 	stw	r3,168(sp)
  802fc0:	90c0008c 	andi	r3,r18,2
  802fc4:	d8c02b15 	stw	r3,172(sp)
  802fc8:	18000326 	beq	r3,zero,802fd8 <___vfprintf_internal_r+0x768>
  802fcc:	d8c02a17 	ldw	r3,168(sp)
  802fd0:	18c00084 	addi	r3,r3,2
  802fd4:	d8c02a15 	stw	r3,168(sp)
  802fd8:	90c0210c 	andi	r3,r18,132
  802fdc:	d8c03015 	stw	r3,192(sp)
  802fe0:	1801a31e 	bne	r3,zero,803670 <___vfprintf_internal_r+0xe00>
  802fe4:	d9003117 	ldw	r4,196(sp)
  802fe8:	d8c02a17 	ldw	r3,168(sp)
  802fec:	20e7c83a 	sub	r19,r4,r3
  802ff0:	04c19f0e 	bge	zero,r19,803670 <___vfprintf_internal_r+0xe00>
  802ff4:	02400404 	movi	r9,16
  802ff8:	d8c02017 	ldw	r3,128(sp)
  802ffc:	d8801f17 	ldw	r2,124(sp)
  803000:	4cc50d0e 	bge	r9,r19,804438 <___vfprintf_internal_r+0x1bc8>
  803004:	01402074 	movhi	r5,129
  803008:	29481e84 	addi	r5,r5,8314
  80300c:	dc403b15 	stw	r17,236(sp)
  803010:	d9403515 	stw	r5,212(sp)
  803014:	9823883a 	mov	r17,r19
  803018:	482d883a 	mov	r22,r9
  80301c:	9027883a 	mov	r19,r18
  803020:	070001c4 	movi	fp,7
  803024:	8025883a 	mov	r18,r16
  803028:	dc002c17 	ldw	r16,176(sp)
  80302c:	00000306 	br	80303c <___vfprintf_internal_r+0x7cc>
  803030:	8c7ffc04 	addi	r17,r17,-16
  803034:	42000204 	addi	r8,r8,8
  803038:	b440130e 	bge	r22,r17,803088 <___vfprintf_internal_r+0x818>
  80303c:	01002074 	movhi	r4,129
  803040:	18c00404 	addi	r3,r3,16
  803044:	10800044 	addi	r2,r2,1
  803048:	21081e84 	addi	r4,r4,8314
  80304c:	41000015 	stw	r4,0(r8)
  803050:	45800115 	stw	r22,4(r8)
  803054:	d8c02015 	stw	r3,128(sp)
  803058:	d8801f15 	stw	r2,124(sp)
  80305c:	e0bff40e 	bge	fp,r2,803030 <__alt_mem_onchip_mem+0xff7fb030>
  803060:	d9801e04 	addi	r6,sp,120
  803064:	b80b883a 	mov	r5,r23
  803068:	8009883a 	mov	r4,r16
  80306c:	08085580 	call	808558 <__sprint_r>
  803070:	103f011e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803074:	8c7ffc04 	addi	r17,r17,-16
  803078:	d8c02017 	ldw	r3,128(sp)
  80307c:	d8801f17 	ldw	r2,124(sp)
  803080:	da000404 	addi	r8,sp,16
  803084:	b47fed16 	blt	r22,r17,80303c <__alt_mem_onchip_mem+0xff7fb03c>
  803088:	9021883a 	mov	r16,r18
  80308c:	9825883a 	mov	r18,r19
  803090:	8827883a 	mov	r19,r17
  803094:	dc403b17 	ldw	r17,236(sp)
  803098:	d9403517 	ldw	r5,212(sp)
  80309c:	98c7883a 	add	r3,r19,r3
  8030a0:	10800044 	addi	r2,r2,1
  8030a4:	41400015 	stw	r5,0(r8)
  8030a8:	44c00115 	stw	r19,4(r8)
  8030ac:	d8c02015 	stw	r3,128(sp)
  8030b0:	d8801f15 	stw	r2,124(sp)
  8030b4:	010001c4 	movi	r4,7
  8030b8:	2082a316 	blt	r4,r2,803b48 <___vfprintf_internal_r+0x12d8>
  8030bc:	df002787 	ldb	fp,158(sp)
  8030c0:	42000204 	addi	r8,r8,8
  8030c4:	e0000c26 	beq	fp,zero,8030f8 <___vfprintf_internal_r+0x888>
  8030c8:	d8801f17 	ldw	r2,124(sp)
  8030cc:	d9002784 	addi	r4,sp,158
  8030d0:	18c00044 	addi	r3,r3,1
  8030d4:	10800044 	addi	r2,r2,1
  8030d8:	41000015 	stw	r4,0(r8)
  8030dc:	01000044 	movi	r4,1
  8030e0:	41000115 	stw	r4,4(r8)
  8030e4:	d8c02015 	stw	r3,128(sp)
  8030e8:	d8801f15 	stw	r2,124(sp)
  8030ec:	010001c4 	movi	r4,7
  8030f0:	20823c16 	blt	r4,r2,8039e4 <___vfprintf_internal_r+0x1174>
  8030f4:	42000204 	addi	r8,r8,8
  8030f8:	d8802b17 	ldw	r2,172(sp)
  8030fc:	10000c26 	beq	r2,zero,803130 <___vfprintf_internal_r+0x8c0>
  803100:	d8801f17 	ldw	r2,124(sp)
  803104:	d9002704 	addi	r4,sp,156
  803108:	18c00084 	addi	r3,r3,2
  80310c:	10800044 	addi	r2,r2,1
  803110:	41000015 	stw	r4,0(r8)
  803114:	01000084 	movi	r4,2
  803118:	41000115 	stw	r4,4(r8)
  80311c:	d8c02015 	stw	r3,128(sp)
  803120:	d8801f15 	stw	r2,124(sp)
  803124:	010001c4 	movi	r4,7
  803128:	20823616 	blt	r4,r2,803a04 <___vfprintf_internal_r+0x1194>
  80312c:	42000204 	addi	r8,r8,8
  803130:	d9003017 	ldw	r4,192(sp)
  803134:	00802004 	movi	r2,128
  803138:	20819926 	beq	r4,r2,8037a0 <___vfprintf_internal_r+0xf30>
  80313c:	d9402917 	ldw	r5,164(sp)
  803140:	d8802e17 	ldw	r2,184(sp)
  803144:	28adc83a 	sub	r22,r5,r2
  803148:	0580310e 	bge	zero,r22,803210 <___vfprintf_internal_r+0x9a0>
  80314c:	07000404 	movi	fp,16
  803150:	d8801f17 	ldw	r2,124(sp)
  803154:	e584140e 	bge	fp,r22,8041a8 <___vfprintf_internal_r+0x1938>
  803158:	01402074 	movhi	r5,129
  80315c:	29481a84 	addi	r5,r5,8298
  803160:	dc402915 	stw	r17,164(sp)
  803164:	d9402b15 	stw	r5,172(sp)
  803168:	b023883a 	mov	r17,r22
  80316c:	04c001c4 	movi	r19,7
  803170:	a82d883a 	mov	r22,r21
  803174:	902b883a 	mov	r21,r18
  803178:	8025883a 	mov	r18,r16
  80317c:	dc002c17 	ldw	r16,176(sp)
  803180:	00000306 	br	803190 <___vfprintf_internal_r+0x920>
  803184:	8c7ffc04 	addi	r17,r17,-16
  803188:	42000204 	addi	r8,r8,8
  80318c:	e440110e 	bge	fp,r17,8031d4 <___vfprintf_internal_r+0x964>
  803190:	18c00404 	addi	r3,r3,16
  803194:	10800044 	addi	r2,r2,1
  803198:	45000015 	stw	r20,0(r8)
  80319c:	47000115 	stw	fp,4(r8)
  8031a0:	d8c02015 	stw	r3,128(sp)
  8031a4:	d8801f15 	stw	r2,124(sp)
  8031a8:	98bff60e 	bge	r19,r2,803184 <__alt_mem_onchip_mem+0xff7fb184>
  8031ac:	d9801e04 	addi	r6,sp,120
  8031b0:	b80b883a 	mov	r5,r23
  8031b4:	8009883a 	mov	r4,r16
  8031b8:	08085580 	call	808558 <__sprint_r>
  8031bc:	103eae1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8031c0:	8c7ffc04 	addi	r17,r17,-16
  8031c4:	d8c02017 	ldw	r3,128(sp)
  8031c8:	d8801f17 	ldw	r2,124(sp)
  8031cc:	da000404 	addi	r8,sp,16
  8031d0:	e47fef16 	blt	fp,r17,803190 <__alt_mem_onchip_mem+0xff7fb190>
  8031d4:	9021883a 	mov	r16,r18
  8031d8:	a825883a 	mov	r18,r21
  8031dc:	b02b883a 	mov	r21,r22
  8031e0:	882d883a 	mov	r22,r17
  8031e4:	dc402917 	ldw	r17,164(sp)
  8031e8:	d9002b17 	ldw	r4,172(sp)
  8031ec:	1d87883a 	add	r3,r3,r22
  8031f0:	10800044 	addi	r2,r2,1
  8031f4:	41000015 	stw	r4,0(r8)
  8031f8:	45800115 	stw	r22,4(r8)
  8031fc:	d8c02015 	stw	r3,128(sp)
  803200:	d8801f15 	stw	r2,124(sp)
  803204:	010001c4 	movi	r4,7
  803208:	2081ee16 	blt	r4,r2,8039c4 <___vfprintf_internal_r+0x1154>
  80320c:	42000204 	addi	r8,r8,8
  803210:	9080400c 	andi	r2,r18,256
  803214:	1001181e 	bne	r2,zero,803678 <___vfprintf_internal_r+0xe08>
  803218:	d9402e17 	ldw	r5,184(sp)
  80321c:	d8801f17 	ldw	r2,124(sp)
  803220:	44000015 	stw	r16,0(r8)
  803224:	1947883a 	add	r3,r3,r5
  803228:	10800044 	addi	r2,r2,1
  80322c:	41400115 	stw	r5,4(r8)
  803230:	d8c02015 	stw	r3,128(sp)
  803234:	d8801f15 	stw	r2,124(sp)
  803238:	010001c4 	movi	r4,7
  80323c:	2081d316 	blt	r4,r2,80398c <___vfprintf_internal_r+0x111c>
  803240:	42000204 	addi	r8,r8,8
  803244:	9480010c 	andi	r18,r18,4
  803248:	90003226 	beq	r18,zero,803314 <___vfprintf_internal_r+0xaa4>
  80324c:	d9403117 	ldw	r5,196(sp)
  803250:	d8802a17 	ldw	r2,168(sp)
  803254:	28a1c83a 	sub	r16,r5,r2
  803258:	04002e0e 	bge	zero,r16,803314 <___vfprintf_internal_r+0xaa4>
  80325c:	04400404 	movi	r17,16
  803260:	d8801f17 	ldw	r2,124(sp)
  803264:	8c04a20e 	bge	r17,r16,8044f0 <___vfprintf_internal_r+0x1c80>
  803268:	01402074 	movhi	r5,129
  80326c:	29481e84 	addi	r5,r5,8314
  803270:	d9403515 	stw	r5,212(sp)
  803274:	048001c4 	movi	r18,7
  803278:	dcc02c17 	ldw	r19,176(sp)
  80327c:	00000306 	br	80328c <___vfprintf_internal_r+0xa1c>
  803280:	843ffc04 	addi	r16,r16,-16
  803284:	42000204 	addi	r8,r8,8
  803288:	8c00130e 	bge	r17,r16,8032d8 <___vfprintf_internal_r+0xa68>
  80328c:	01002074 	movhi	r4,129
  803290:	18c00404 	addi	r3,r3,16
  803294:	10800044 	addi	r2,r2,1
  803298:	21081e84 	addi	r4,r4,8314
  80329c:	41000015 	stw	r4,0(r8)
  8032a0:	44400115 	stw	r17,4(r8)
  8032a4:	d8c02015 	stw	r3,128(sp)
  8032a8:	d8801f15 	stw	r2,124(sp)
  8032ac:	90bff40e 	bge	r18,r2,803280 <__alt_mem_onchip_mem+0xff7fb280>
  8032b0:	d9801e04 	addi	r6,sp,120
  8032b4:	b80b883a 	mov	r5,r23
  8032b8:	9809883a 	mov	r4,r19
  8032bc:	08085580 	call	808558 <__sprint_r>
  8032c0:	103e6d1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8032c4:	843ffc04 	addi	r16,r16,-16
  8032c8:	d8c02017 	ldw	r3,128(sp)
  8032cc:	d8801f17 	ldw	r2,124(sp)
  8032d0:	da000404 	addi	r8,sp,16
  8032d4:	8c3fed16 	blt	r17,r16,80328c <__alt_mem_onchip_mem+0xff7fb28c>
  8032d8:	d9403517 	ldw	r5,212(sp)
  8032dc:	1c07883a 	add	r3,r3,r16
  8032e0:	10800044 	addi	r2,r2,1
  8032e4:	41400015 	stw	r5,0(r8)
  8032e8:	44000115 	stw	r16,4(r8)
  8032ec:	d8c02015 	stw	r3,128(sp)
  8032f0:	d8801f15 	stw	r2,124(sp)
  8032f4:	010001c4 	movi	r4,7
  8032f8:	2080060e 	bge	r4,r2,803314 <___vfprintf_internal_r+0xaa4>
  8032fc:	d9002c17 	ldw	r4,176(sp)
  803300:	d9801e04 	addi	r6,sp,120
  803304:	b80b883a 	mov	r5,r23
  803308:	08085580 	call	808558 <__sprint_r>
  80330c:	103e5a1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803310:	d8c02017 	ldw	r3,128(sp)
  803314:	d8803117 	ldw	r2,196(sp)
  803318:	d9002a17 	ldw	r4,168(sp)
  80331c:	1100010e 	bge	r2,r4,803324 <___vfprintf_internal_r+0xab4>
  803320:	2005883a 	mov	r2,r4
  803324:	d9402f17 	ldw	r5,188(sp)
  803328:	288b883a 	add	r5,r5,r2
  80332c:	d9402f15 	stw	r5,188(sp)
  803330:	18019e1e 	bne	r3,zero,8039ac <___vfprintf_internal_r+0x113c>
  803334:	a8800007 	ldb	r2,0(r21)
  803338:	d8001f15 	stw	zero,124(sp)
  80333c:	da000404 	addi	r8,sp,16
  803340:	103d851e 	bne	r2,zero,802958 <__alt_mem_onchip_mem+0xff7fa958>
  803344:	a821883a 	mov	r16,r21
  803348:	003d9b06 	br	8029b8 <__alt_mem_onchip_mem+0xff7fa9b8>
  80334c:	18c03fcc 	andi	r3,r3,255
  803350:	1805c11e 	bne	r3,zero,804a58 <___vfprintf_internal_r+0x21e8>
  803354:	94800414 	ori	r18,r18,16
  803358:	9080080c 	andi	r2,r18,32
  80335c:	10020c26 	beq	r2,zero,803b90 <___vfprintf_internal_r+0x1320>
  803360:	d8802d17 	ldw	r2,180(sp)
  803364:	d9002917 	ldw	r4,164(sp)
  803368:	d8002785 	stb	zero,158(sp)
  80336c:	10c00204 	addi	r3,r2,8
  803370:	14c00017 	ldw	r19,0(r2)
  803374:	15800117 	ldw	r22,4(r2)
  803378:	20040f16 	blt	r4,zero,8043b8 <___vfprintf_internal_r+0x1b48>
  80337c:	013fdfc4 	movi	r4,-129
  803380:	9d84b03a 	or	r2,r19,r22
  803384:	d8c02d15 	stw	r3,180(sp)
  803388:	9124703a 	and	r18,r18,r4
  80338c:	0039883a 	mov	fp,zero
  803390:	103e891e 	bne	r2,zero,802db8 <__alt_mem_onchip_mem+0xff7fadb8>
  803394:	d9002917 	ldw	r4,164(sp)
  803398:	2002c11e 	bne	r4,zero,803ea0 <___vfprintf_internal_r+0x1630>
  80339c:	d8002915 	stw	zero,164(sp)
  8033a0:	d8002e15 	stw	zero,184(sp)
  8033a4:	dc001e04 	addi	r16,sp,120
  8033a8:	003ef806 	br	802f8c <__alt_mem_onchip_mem+0xff7faf8c>
  8033ac:	18c03fcc 	andi	r3,r3,255
  8033b0:	18059d1e 	bne	r3,zero,804a28 <___vfprintf_internal_r+0x21b8>
  8033b4:	01402074 	movhi	r5,129
  8033b8:	29480e04 	addi	r5,r5,8248
  8033bc:	d9403915 	stw	r5,228(sp)
  8033c0:	9080080c 	andi	r2,r18,32
  8033c4:	10005226 	beq	r2,zero,803510 <___vfprintf_internal_r+0xca0>
  8033c8:	d8802d17 	ldw	r2,180(sp)
  8033cc:	14c00017 	ldw	r19,0(r2)
  8033d0:	15800117 	ldw	r22,4(r2)
  8033d4:	10800204 	addi	r2,r2,8
  8033d8:	d8802d15 	stw	r2,180(sp)
  8033dc:	9080004c 	andi	r2,r18,1
  8033e0:	10019026 	beq	r2,zero,803a24 <___vfprintf_internal_r+0x11b4>
  8033e4:	9d84b03a 	or	r2,r19,r22
  8033e8:	10036926 	beq	r2,zero,804190 <___vfprintf_internal_r+0x1920>
  8033ec:	d8c02917 	ldw	r3,164(sp)
  8033f0:	00800c04 	movi	r2,48
  8033f4:	d8802705 	stb	r2,156(sp)
  8033f8:	dc402745 	stb	r17,157(sp)
  8033fc:	d8002785 	stb	zero,158(sp)
  803400:	90800094 	ori	r2,r18,2
  803404:	18045d16 	blt	r3,zero,80457c <___vfprintf_internal_r+0x1d0c>
  803408:	00bfdfc4 	movi	r2,-129
  80340c:	90a4703a 	and	r18,r18,r2
  803410:	94800094 	ori	r18,r18,2
  803414:	0039883a 	mov	fp,zero
  803418:	d9003917 	ldw	r4,228(sp)
  80341c:	dc001e04 	addi	r16,sp,120
  803420:	988003cc 	andi	r2,r19,15
  803424:	b006973a 	slli	r3,r22,28
  803428:	2085883a 	add	r2,r4,r2
  80342c:	9826d13a 	srli	r19,r19,4
  803430:	10800003 	ldbu	r2,0(r2)
  803434:	b02cd13a 	srli	r22,r22,4
  803438:	843fffc4 	addi	r16,r16,-1
  80343c:	1ce6b03a 	or	r19,r3,r19
  803440:	80800005 	stb	r2,0(r16)
  803444:	9d84b03a 	or	r2,r19,r22
  803448:	103ff51e 	bne	r2,zero,803420 <__alt_mem_onchip_mem+0xff7fb420>
  80344c:	d8c02817 	ldw	r3,160(sp)
  803450:	1c07c83a 	sub	r3,r3,r16
  803454:	d8c02e15 	stw	r3,184(sp)
  803458:	003ecc06 	br	802f8c <__alt_mem_onchip_mem+0xff7faf8c>
  80345c:	18c03fcc 	andi	r3,r3,255
  803460:	183e9f26 	beq	r3,zero,802ee0 <__alt_mem_onchip_mem+0xff7faee0>
  803464:	d9c02785 	stb	r7,158(sp)
  803468:	003e9d06 	br	802ee0 <__alt_mem_onchip_mem+0xff7faee0>
  80346c:	00c00044 	movi	r3,1
  803470:	01c00ac4 	movi	r7,43
  803474:	ac400007 	ldb	r17,0(r21)
  803478:	003d5e06 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  80347c:	94800814 	ori	r18,r18,32
  803480:	ac400007 	ldb	r17,0(r21)
  803484:	003d5b06 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  803488:	d8c02d17 	ldw	r3,180(sp)
  80348c:	d8002785 	stb	zero,158(sp)
  803490:	1c000017 	ldw	r16,0(r3)
  803494:	1cc00104 	addi	r19,r3,4
  803498:	80041926 	beq	r16,zero,804500 <___vfprintf_internal_r+0x1c90>
  80349c:	d9002917 	ldw	r4,164(sp)
  8034a0:	2003d016 	blt	r4,zero,8043e4 <___vfprintf_internal_r+0x1b74>
  8034a4:	200d883a 	mov	r6,r4
  8034a8:	000b883a 	mov	r5,zero
  8034ac:	8009883a 	mov	r4,r16
  8034b0:	da003d15 	stw	r8,244(sp)
  8034b4:	0806fec0 	call	806fec <memchr>
  8034b8:	da003d17 	ldw	r8,244(sp)
  8034bc:	10045426 	beq	r2,zero,804610 <___vfprintf_internal_r+0x1da0>
  8034c0:	1405c83a 	sub	r2,r2,r16
  8034c4:	d8802e15 	stw	r2,184(sp)
  8034c8:	1003cc16 	blt	r2,zero,8043fc <___vfprintf_internal_r+0x1b8c>
  8034cc:	df002783 	ldbu	fp,158(sp)
  8034d0:	d8802a15 	stw	r2,168(sp)
  8034d4:	dcc02d15 	stw	r19,180(sp)
  8034d8:	d8002915 	stw	zero,164(sp)
  8034dc:	d8003215 	stw	zero,200(sp)
  8034e0:	003eb006 	br	802fa4 <__alt_mem_onchip_mem+0xff7fafa4>
  8034e4:	18c03fcc 	andi	r3,r3,255
  8034e8:	183f9b26 	beq	r3,zero,803358 <__alt_mem_onchip_mem+0xff7fb358>
  8034ec:	d9c02785 	stb	r7,158(sp)
  8034f0:	003f9906 	br	803358 <__alt_mem_onchip_mem+0xff7fb358>
  8034f4:	18c03fcc 	andi	r3,r3,255
  8034f8:	1805551e 	bne	r3,zero,804a50 <___vfprintf_internal_r+0x21e0>
  8034fc:	01402074 	movhi	r5,129
  803500:	29481304 	addi	r5,r5,8268
  803504:	d9403915 	stw	r5,228(sp)
  803508:	9080080c 	andi	r2,r18,32
  80350c:	103fae1e 	bne	r2,zero,8033c8 <__alt_mem_onchip_mem+0xff7fb3c8>
  803510:	9080040c 	andi	r2,r18,16
  803514:	1002de26 	beq	r2,zero,804090 <___vfprintf_internal_r+0x1820>
  803518:	d8c02d17 	ldw	r3,180(sp)
  80351c:	002d883a 	mov	r22,zero
  803520:	1cc00017 	ldw	r19,0(r3)
  803524:	18c00104 	addi	r3,r3,4
  803528:	d8c02d15 	stw	r3,180(sp)
  80352c:	003fab06 	br	8033dc <__alt_mem_onchip_mem+0xff7fb3dc>
  803530:	38803fcc 	andi	r2,r7,255
  803534:	1080201c 	xori	r2,r2,128
  803538:	10bfe004 	addi	r2,r2,-128
  80353c:	1002d21e 	bne	r2,zero,804088 <___vfprintf_internal_r+0x1818>
  803540:	00c00044 	movi	r3,1
  803544:	01c00804 	movi	r7,32
  803548:	ac400007 	ldb	r17,0(r21)
  80354c:	003d2906 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  803550:	94800054 	ori	r18,r18,1
  803554:	ac400007 	ldb	r17,0(r21)
  803558:	003d2606 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  80355c:	18c03fcc 	andi	r3,r3,255
  803560:	183e0526 	beq	r3,zero,802d78 <__alt_mem_onchip_mem+0xff7fad78>
  803564:	d9c02785 	stb	r7,158(sp)
  803568:	003e0306 	br	802d78 <__alt_mem_onchip_mem+0xff7fad78>
  80356c:	94801014 	ori	r18,r18,64
  803570:	ac400007 	ldb	r17,0(r21)
  803574:	003d1f06 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  803578:	ac400007 	ldb	r17,0(r21)
  80357c:	8a438726 	beq	r17,r9,80439c <___vfprintf_internal_r+0x1b2c>
  803580:	94800414 	ori	r18,r18,16
  803584:	003d1b06 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  803588:	18c03fcc 	andi	r3,r3,255
  80358c:	1805341e 	bne	r3,zero,804a60 <___vfprintf_internal_r+0x21f0>
  803590:	9080080c 	andi	r2,r18,32
  803594:	1002cd26 	beq	r2,zero,8040cc <___vfprintf_internal_r+0x185c>
  803598:	d9402d17 	ldw	r5,180(sp)
  80359c:	d9002f17 	ldw	r4,188(sp)
  8035a0:	28800017 	ldw	r2,0(r5)
  8035a4:	2007d7fa 	srai	r3,r4,31
  8035a8:	29400104 	addi	r5,r5,4
  8035ac:	d9402d15 	stw	r5,180(sp)
  8035b0:	11000015 	stw	r4,0(r2)
  8035b4:	10c00115 	stw	r3,4(r2)
  8035b8:	003ce506 	br	802950 <__alt_mem_onchip_mem+0xff7fa950>
  8035bc:	d8c02d17 	ldw	r3,180(sp)
  8035c0:	d9002d17 	ldw	r4,180(sp)
  8035c4:	d8002785 	stb	zero,158(sp)
  8035c8:	18800017 	ldw	r2,0(r3)
  8035cc:	21000104 	addi	r4,r4,4
  8035d0:	00c00044 	movi	r3,1
  8035d4:	d8c02a15 	stw	r3,168(sp)
  8035d8:	d8801405 	stb	r2,80(sp)
  8035dc:	d9002d15 	stw	r4,180(sp)
  8035e0:	d8c02e15 	stw	r3,184(sp)
  8035e4:	d8002915 	stw	zero,164(sp)
  8035e8:	d8003215 	stw	zero,200(sp)
  8035ec:	dc001404 	addi	r16,sp,80
  8035f0:	0039883a 	mov	fp,zero
  8035f4:	003e7206 	br	802fc0 <__alt_mem_onchip_mem+0xff7fafc0>
  8035f8:	01002074 	movhi	r4,129
  8035fc:	21081304 	addi	r4,r4,8268
  803600:	0039883a 	mov	fp,zero
  803604:	d9003915 	stw	r4,228(sp)
  803608:	04401e04 	movi	r17,120
  80360c:	003f8206 	br	803418 <__alt_mem_onchip_mem+0xff7fb418>
  803610:	18c03fcc 	andi	r3,r3,255
  803614:	1805061e 	bne	r3,zero,804a30 <___vfprintf_internal_r+0x21c0>
  803618:	883d9126 	beq	r17,zero,802c60 <__alt_mem_onchip_mem+0xff7fac60>
  80361c:	00c00044 	movi	r3,1
  803620:	d8c02a15 	stw	r3,168(sp)
  803624:	dc401405 	stb	r17,80(sp)
  803628:	d8002785 	stb	zero,158(sp)
  80362c:	003fec06 	br	8035e0 <__alt_mem_onchip_mem+0xff7fb5e0>
  803630:	01402074 	movhi	r5,129
  803634:	29481304 	addi	r5,r5,8268
  803638:	d9403915 	stw	r5,228(sp)
  80363c:	d8c02d15 	stw	r3,180(sp)
  803640:	1025883a 	mov	r18,r2
  803644:	04401e04 	movi	r17,120
  803648:	9d84b03a 	or	r2,r19,r22
  80364c:	1000fc1e 	bne	r2,zero,803a40 <___vfprintf_internal_r+0x11d0>
  803650:	0039883a 	mov	fp,zero
  803654:	00800084 	movi	r2,2
  803658:	10803fcc 	andi	r2,r2,255
  80365c:	00c00044 	movi	r3,1
  803660:	10c20f26 	beq	r2,r3,803ea0 <___vfprintf_internal_r+0x1630>
  803664:	00c00084 	movi	r3,2
  803668:	10fd6326 	beq	r2,r3,802bf8 <__alt_mem_onchip_mem+0xff7fabf8>
  80366c:	003e2d06 	br	802f24 <__alt_mem_onchip_mem+0xff7faf24>
  803670:	d8c02017 	ldw	r3,128(sp)
  803674:	003e9306 	br	8030c4 <__alt_mem_onchip_mem+0xff7fb0c4>
  803678:	00801944 	movi	r2,101
  80367c:	14407e0e 	bge	r2,r17,803878 <___vfprintf_internal_r+0x1008>
  803680:	d9003617 	ldw	r4,216(sp)
  803684:	d9403817 	ldw	r5,224(sp)
  803688:	000d883a 	mov	r6,zero
  80368c:	000f883a 	mov	r7,zero
  803690:	d8c03c15 	stw	r3,240(sp)
  803694:	da003d15 	stw	r8,244(sp)
  803698:	080c8700 	call	80c870 <__eqdf2>
  80369c:	d8c03c17 	ldw	r3,240(sp)
  8036a0:	da003d17 	ldw	r8,244(sp)
  8036a4:	1000f71e 	bne	r2,zero,803a84 <___vfprintf_internal_r+0x1214>
  8036a8:	d8801f17 	ldw	r2,124(sp)
  8036ac:	01002074 	movhi	r4,129
  8036b0:	21081a04 	addi	r4,r4,8296
  8036b4:	18c00044 	addi	r3,r3,1
  8036b8:	10800044 	addi	r2,r2,1
  8036bc:	41000015 	stw	r4,0(r8)
  8036c0:	01000044 	movi	r4,1
  8036c4:	41000115 	stw	r4,4(r8)
  8036c8:	d8c02015 	stw	r3,128(sp)
  8036cc:	d8801f15 	stw	r2,124(sp)
  8036d0:	010001c4 	movi	r4,7
  8036d4:	2082b816 	blt	r4,r2,8041b8 <___vfprintf_internal_r+0x1948>
  8036d8:	42000204 	addi	r8,r8,8
  8036dc:	d8802617 	ldw	r2,152(sp)
  8036e0:	d9403317 	ldw	r5,204(sp)
  8036e4:	11400216 	blt	r2,r5,8036f0 <___vfprintf_internal_r+0xe80>
  8036e8:	9080004c 	andi	r2,r18,1
  8036ec:	103ed526 	beq	r2,zero,803244 <__alt_mem_onchip_mem+0xff7fb244>
  8036f0:	d8803717 	ldw	r2,220(sp)
  8036f4:	d9003417 	ldw	r4,208(sp)
  8036f8:	d9403717 	ldw	r5,220(sp)
  8036fc:	1887883a 	add	r3,r3,r2
  803700:	d8801f17 	ldw	r2,124(sp)
  803704:	41000015 	stw	r4,0(r8)
  803708:	41400115 	stw	r5,4(r8)
  80370c:	10800044 	addi	r2,r2,1
  803710:	d8c02015 	stw	r3,128(sp)
  803714:	d8801f15 	stw	r2,124(sp)
  803718:	010001c4 	movi	r4,7
  80371c:	20832916 	blt	r4,r2,8043c4 <___vfprintf_internal_r+0x1b54>
  803720:	42000204 	addi	r8,r8,8
  803724:	d8803317 	ldw	r2,204(sp)
  803728:	143fffc4 	addi	r16,r2,-1
  80372c:	043ec50e 	bge	zero,r16,803244 <__alt_mem_onchip_mem+0xff7fb244>
  803730:	04400404 	movi	r17,16
  803734:	d8801f17 	ldw	r2,124(sp)
  803738:	8c00880e 	bge	r17,r16,80395c <___vfprintf_internal_r+0x10ec>
  80373c:	01402074 	movhi	r5,129
  803740:	29481a84 	addi	r5,r5,8298
  803744:	d9402b15 	stw	r5,172(sp)
  803748:	058001c4 	movi	r22,7
  80374c:	dcc02c17 	ldw	r19,176(sp)
  803750:	00000306 	br	803760 <___vfprintf_internal_r+0xef0>
  803754:	42000204 	addi	r8,r8,8
  803758:	843ffc04 	addi	r16,r16,-16
  80375c:	8c00820e 	bge	r17,r16,803968 <___vfprintf_internal_r+0x10f8>
  803760:	18c00404 	addi	r3,r3,16
  803764:	10800044 	addi	r2,r2,1
  803768:	45000015 	stw	r20,0(r8)
  80376c:	44400115 	stw	r17,4(r8)
  803770:	d8c02015 	stw	r3,128(sp)
  803774:	d8801f15 	stw	r2,124(sp)
  803778:	b0bff60e 	bge	r22,r2,803754 <__alt_mem_onchip_mem+0xff7fb754>
  80377c:	d9801e04 	addi	r6,sp,120
  803780:	b80b883a 	mov	r5,r23
  803784:	9809883a 	mov	r4,r19
  803788:	08085580 	call	808558 <__sprint_r>
  80378c:	103d3a1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803790:	d8c02017 	ldw	r3,128(sp)
  803794:	d8801f17 	ldw	r2,124(sp)
  803798:	da000404 	addi	r8,sp,16
  80379c:	003fee06 	br	803758 <__alt_mem_onchip_mem+0xff7fb758>
  8037a0:	d9403117 	ldw	r5,196(sp)
  8037a4:	d8802a17 	ldw	r2,168(sp)
  8037a8:	28adc83a 	sub	r22,r5,r2
  8037ac:	05be630e 	bge	zero,r22,80313c <__alt_mem_onchip_mem+0xff7fb13c>
  8037b0:	07000404 	movi	fp,16
  8037b4:	d8801f17 	ldw	r2,124(sp)
  8037b8:	e5838f0e 	bge	fp,r22,8045f8 <___vfprintf_internal_r+0x1d88>
  8037bc:	01402074 	movhi	r5,129
  8037c0:	29481a84 	addi	r5,r5,8298
  8037c4:	dc403015 	stw	r17,192(sp)
  8037c8:	d9402b15 	stw	r5,172(sp)
  8037cc:	b023883a 	mov	r17,r22
  8037d0:	04c001c4 	movi	r19,7
  8037d4:	a82d883a 	mov	r22,r21
  8037d8:	902b883a 	mov	r21,r18
  8037dc:	8025883a 	mov	r18,r16
  8037e0:	dc002c17 	ldw	r16,176(sp)
  8037e4:	00000306 	br	8037f4 <___vfprintf_internal_r+0xf84>
  8037e8:	8c7ffc04 	addi	r17,r17,-16
  8037ec:	42000204 	addi	r8,r8,8
  8037f0:	e440110e 	bge	fp,r17,803838 <___vfprintf_internal_r+0xfc8>
  8037f4:	18c00404 	addi	r3,r3,16
  8037f8:	10800044 	addi	r2,r2,1
  8037fc:	45000015 	stw	r20,0(r8)
  803800:	47000115 	stw	fp,4(r8)
  803804:	d8c02015 	stw	r3,128(sp)
  803808:	d8801f15 	stw	r2,124(sp)
  80380c:	98bff60e 	bge	r19,r2,8037e8 <__alt_mem_onchip_mem+0xff7fb7e8>
  803810:	d9801e04 	addi	r6,sp,120
  803814:	b80b883a 	mov	r5,r23
  803818:	8009883a 	mov	r4,r16
  80381c:	08085580 	call	808558 <__sprint_r>
  803820:	103d151e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803824:	8c7ffc04 	addi	r17,r17,-16
  803828:	d8c02017 	ldw	r3,128(sp)
  80382c:	d8801f17 	ldw	r2,124(sp)
  803830:	da000404 	addi	r8,sp,16
  803834:	e47fef16 	blt	fp,r17,8037f4 <__alt_mem_onchip_mem+0xff7fb7f4>
  803838:	9021883a 	mov	r16,r18
  80383c:	a825883a 	mov	r18,r21
  803840:	b02b883a 	mov	r21,r22
  803844:	882d883a 	mov	r22,r17
  803848:	dc403017 	ldw	r17,192(sp)
  80384c:	d9002b17 	ldw	r4,172(sp)
  803850:	1d87883a 	add	r3,r3,r22
  803854:	10800044 	addi	r2,r2,1
  803858:	41000015 	stw	r4,0(r8)
  80385c:	45800115 	stw	r22,4(r8)
  803860:	d8c02015 	stw	r3,128(sp)
  803864:	d8801f15 	stw	r2,124(sp)
  803868:	010001c4 	movi	r4,7
  80386c:	20818e16 	blt	r4,r2,803ea8 <___vfprintf_internal_r+0x1638>
  803870:	42000204 	addi	r8,r8,8
  803874:	003e3106 	br	80313c <__alt_mem_onchip_mem+0xff7fb13c>
  803878:	d9403317 	ldw	r5,204(sp)
  80387c:	00800044 	movi	r2,1
  803880:	18c00044 	addi	r3,r3,1
  803884:	1141530e 	bge	r2,r5,803dd4 <___vfprintf_internal_r+0x1564>
  803888:	dc401f17 	ldw	r17,124(sp)
  80388c:	00800044 	movi	r2,1
  803890:	40800115 	stw	r2,4(r8)
  803894:	8c400044 	addi	r17,r17,1
  803898:	44000015 	stw	r16,0(r8)
  80389c:	d8c02015 	stw	r3,128(sp)
  8038a0:	dc401f15 	stw	r17,124(sp)
  8038a4:	008001c4 	movi	r2,7
  8038a8:	14416b16 	blt	r2,r17,803e58 <___vfprintf_internal_r+0x15e8>
  8038ac:	42000204 	addi	r8,r8,8
  8038b0:	d8803717 	ldw	r2,220(sp)
  8038b4:	d9003417 	ldw	r4,208(sp)
  8038b8:	8c400044 	addi	r17,r17,1
  8038bc:	10c7883a 	add	r3,r2,r3
  8038c0:	40800115 	stw	r2,4(r8)
  8038c4:	41000015 	stw	r4,0(r8)
  8038c8:	d8c02015 	stw	r3,128(sp)
  8038cc:	dc401f15 	stw	r17,124(sp)
  8038d0:	008001c4 	movi	r2,7
  8038d4:	14416916 	blt	r2,r17,803e7c <___vfprintf_internal_r+0x160c>
  8038d8:	45800204 	addi	r22,r8,8
  8038dc:	d9003617 	ldw	r4,216(sp)
  8038e0:	d9403817 	ldw	r5,224(sp)
  8038e4:	000d883a 	mov	r6,zero
  8038e8:	000f883a 	mov	r7,zero
  8038ec:	d8c03c15 	stw	r3,240(sp)
  8038f0:	080c8700 	call	80c870 <__eqdf2>
  8038f4:	d8c03c17 	ldw	r3,240(sp)
  8038f8:	1000bc26 	beq	r2,zero,803bec <___vfprintf_internal_r+0x137c>
  8038fc:	d9403317 	ldw	r5,204(sp)
  803900:	84000044 	addi	r16,r16,1
  803904:	8c400044 	addi	r17,r17,1
  803908:	28bfffc4 	addi	r2,r5,-1
  80390c:	1887883a 	add	r3,r3,r2
  803910:	b0800115 	stw	r2,4(r22)
  803914:	b4000015 	stw	r16,0(r22)
  803918:	d8c02015 	stw	r3,128(sp)
  80391c:	dc401f15 	stw	r17,124(sp)
  803920:	008001c4 	movi	r2,7
  803924:	14414316 	blt	r2,r17,803e34 <___vfprintf_internal_r+0x15c4>
  803928:	b5800204 	addi	r22,r22,8
  80392c:	d9003a17 	ldw	r4,232(sp)
  803930:	df0022c4 	addi	fp,sp,139
  803934:	8c400044 	addi	r17,r17,1
  803938:	20c7883a 	add	r3,r4,r3
  80393c:	b7000015 	stw	fp,0(r22)
  803940:	b1000115 	stw	r4,4(r22)
  803944:	d8c02015 	stw	r3,128(sp)
  803948:	dc401f15 	stw	r17,124(sp)
  80394c:	008001c4 	movi	r2,7
  803950:	14400e16 	blt	r2,r17,80398c <___vfprintf_internal_r+0x111c>
  803954:	b2000204 	addi	r8,r22,8
  803958:	003e3a06 	br	803244 <__alt_mem_onchip_mem+0xff7fb244>
  80395c:	01002074 	movhi	r4,129
  803960:	21081a84 	addi	r4,r4,8298
  803964:	d9002b15 	stw	r4,172(sp)
  803968:	d9002b17 	ldw	r4,172(sp)
  80396c:	1c07883a 	add	r3,r3,r16
  803970:	44000115 	stw	r16,4(r8)
  803974:	41000015 	stw	r4,0(r8)
  803978:	10800044 	addi	r2,r2,1
  80397c:	d8c02015 	stw	r3,128(sp)
  803980:	d8801f15 	stw	r2,124(sp)
  803984:	010001c4 	movi	r4,7
  803988:	20be2d0e 	bge	r4,r2,803240 <__alt_mem_onchip_mem+0xff7fb240>
  80398c:	d9002c17 	ldw	r4,176(sp)
  803990:	d9801e04 	addi	r6,sp,120
  803994:	b80b883a 	mov	r5,r23
  803998:	08085580 	call	808558 <__sprint_r>
  80399c:	103cb61e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8039a0:	d8c02017 	ldw	r3,128(sp)
  8039a4:	da000404 	addi	r8,sp,16
  8039a8:	003e2606 	br	803244 <__alt_mem_onchip_mem+0xff7fb244>
  8039ac:	d9002c17 	ldw	r4,176(sp)
  8039b0:	d9801e04 	addi	r6,sp,120
  8039b4:	b80b883a 	mov	r5,r23
  8039b8:	08085580 	call	808558 <__sprint_r>
  8039bc:	103e5d26 	beq	r2,zero,803334 <__alt_mem_onchip_mem+0xff7fb334>
  8039c0:	003cad06 	br	802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8039c4:	d9002c17 	ldw	r4,176(sp)
  8039c8:	d9801e04 	addi	r6,sp,120
  8039cc:	b80b883a 	mov	r5,r23
  8039d0:	08085580 	call	808558 <__sprint_r>
  8039d4:	103ca81e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8039d8:	d8c02017 	ldw	r3,128(sp)
  8039dc:	da000404 	addi	r8,sp,16
  8039e0:	003e0b06 	br	803210 <__alt_mem_onchip_mem+0xff7fb210>
  8039e4:	d9002c17 	ldw	r4,176(sp)
  8039e8:	d9801e04 	addi	r6,sp,120
  8039ec:	b80b883a 	mov	r5,r23
  8039f0:	08085580 	call	808558 <__sprint_r>
  8039f4:	103ca01e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8039f8:	d8c02017 	ldw	r3,128(sp)
  8039fc:	da000404 	addi	r8,sp,16
  803a00:	003dbd06 	br	8030f8 <__alt_mem_onchip_mem+0xff7fb0f8>
  803a04:	d9002c17 	ldw	r4,176(sp)
  803a08:	d9801e04 	addi	r6,sp,120
  803a0c:	b80b883a 	mov	r5,r23
  803a10:	08085580 	call	808558 <__sprint_r>
  803a14:	103c981e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803a18:	d8c02017 	ldw	r3,128(sp)
  803a1c:	da000404 	addi	r8,sp,16
  803a20:	003dc306 	br	803130 <__alt_mem_onchip_mem+0xff7fb130>
  803a24:	d8802917 	ldw	r2,164(sp)
  803a28:	d8002785 	stb	zero,158(sp)
  803a2c:	103f0616 	blt	r2,zero,803648 <__alt_mem_onchip_mem+0xff7fb648>
  803a30:	00ffdfc4 	movi	r3,-129
  803a34:	9d84b03a 	or	r2,r19,r22
  803a38:	90e4703a 	and	r18,r18,r3
  803a3c:	103c6b26 	beq	r2,zero,802bec <__alt_mem_onchip_mem+0xff7fabec>
  803a40:	0039883a 	mov	fp,zero
  803a44:	003e7406 	br	803418 <__alt_mem_onchip_mem+0xff7fb418>
  803a48:	9080040c 	andi	r2,r18,16
  803a4c:	1001b326 	beq	r2,zero,80411c <___vfprintf_internal_r+0x18ac>
  803a50:	d9002d17 	ldw	r4,180(sp)
  803a54:	d9402917 	ldw	r5,164(sp)
  803a58:	d8002785 	stb	zero,158(sp)
  803a5c:	20800104 	addi	r2,r4,4
  803a60:	24c00017 	ldw	r19,0(r4)
  803a64:	002d883a 	mov	r22,zero
  803a68:	2801b516 	blt	r5,zero,804140 <___vfprintf_internal_r+0x18d0>
  803a6c:	00ffdfc4 	movi	r3,-129
  803a70:	d8802d15 	stw	r2,180(sp)
  803a74:	90e4703a 	and	r18,r18,r3
  803a78:	983d2726 	beq	r19,zero,802f18 <__alt_mem_onchip_mem+0xff7faf18>
  803a7c:	0039883a 	mov	fp,zero
  803a80:	003d2a06 	br	802f2c <__alt_mem_onchip_mem+0xff7faf2c>
  803a84:	dc402617 	ldw	r17,152(sp)
  803a88:	0441d30e 	bge	zero,r17,8041d8 <___vfprintf_internal_r+0x1968>
  803a8c:	dc403217 	ldw	r17,200(sp)
  803a90:	d8803317 	ldw	r2,204(sp)
  803a94:	1440010e 	bge	r2,r17,803a9c <___vfprintf_internal_r+0x122c>
  803a98:	1023883a 	mov	r17,r2
  803a9c:	04400a0e 	bge	zero,r17,803ac8 <___vfprintf_internal_r+0x1258>
  803aa0:	d8801f17 	ldw	r2,124(sp)
  803aa4:	1c47883a 	add	r3,r3,r17
  803aa8:	44000015 	stw	r16,0(r8)
  803aac:	10800044 	addi	r2,r2,1
  803ab0:	44400115 	stw	r17,4(r8)
  803ab4:	d8c02015 	stw	r3,128(sp)
  803ab8:	d8801f15 	stw	r2,124(sp)
  803abc:	010001c4 	movi	r4,7
  803ac0:	20826516 	blt	r4,r2,804458 <___vfprintf_internal_r+0x1be8>
  803ac4:	42000204 	addi	r8,r8,8
  803ac8:	88026116 	blt	r17,zero,804450 <___vfprintf_internal_r+0x1be0>
  803acc:	d9003217 	ldw	r4,200(sp)
  803ad0:	2463c83a 	sub	r17,r4,r17
  803ad4:	04407b0e 	bge	zero,r17,803cc4 <___vfprintf_internal_r+0x1454>
  803ad8:	05800404 	movi	r22,16
  803adc:	d8801f17 	ldw	r2,124(sp)
  803ae0:	b4419d0e 	bge	r22,r17,804158 <___vfprintf_internal_r+0x18e8>
  803ae4:	01002074 	movhi	r4,129
  803ae8:	21081a84 	addi	r4,r4,8298
  803aec:	d9002b15 	stw	r4,172(sp)
  803af0:	070001c4 	movi	fp,7
  803af4:	dcc02c17 	ldw	r19,176(sp)
  803af8:	00000306 	br	803b08 <___vfprintf_internal_r+0x1298>
  803afc:	42000204 	addi	r8,r8,8
  803b00:	8c7ffc04 	addi	r17,r17,-16
  803b04:	b441970e 	bge	r22,r17,804164 <___vfprintf_internal_r+0x18f4>
  803b08:	18c00404 	addi	r3,r3,16
  803b0c:	10800044 	addi	r2,r2,1
  803b10:	45000015 	stw	r20,0(r8)
  803b14:	45800115 	stw	r22,4(r8)
  803b18:	d8c02015 	stw	r3,128(sp)
  803b1c:	d8801f15 	stw	r2,124(sp)
  803b20:	e0bff60e 	bge	fp,r2,803afc <__alt_mem_onchip_mem+0xff7fbafc>
  803b24:	d9801e04 	addi	r6,sp,120
  803b28:	b80b883a 	mov	r5,r23
  803b2c:	9809883a 	mov	r4,r19
  803b30:	08085580 	call	808558 <__sprint_r>
  803b34:	103c501e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803b38:	d8c02017 	ldw	r3,128(sp)
  803b3c:	d8801f17 	ldw	r2,124(sp)
  803b40:	da000404 	addi	r8,sp,16
  803b44:	003fee06 	br	803b00 <__alt_mem_onchip_mem+0xff7fbb00>
  803b48:	d9002c17 	ldw	r4,176(sp)
  803b4c:	d9801e04 	addi	r6,sp,120
  803b50:	b80b883a 	mov	r5,r23
  803b54:	08085580 	call	808558 <__sprint_r>
  803b58:	103c471e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803b5c:	d8c02017 	ldw	r3,128(sp)
  803b60:	df002787 	ldb	fp,158(sp)
  803b64:	da000404 	addi	r8,sp,16
  803b68:	003d5606 	br	8030c4 <__alt_mem_onchip_mem+0xff7fb0c4>
  803b6c:	9080040c 	andi	r2,r18,16
  803b70:	10016126 	beq	r2,zero,8040f8 <___vfprintf_internal_r+0x1888>
  803b74:	d8802d17 	ldw	r2,180(sp)
  803b78:	14c00017 	ldw	r19,0(r2)
  803b7c:	10800104 	addi	r2,r2,4
  803b80:	d8802d15 	stw	r2,180(sp)
  803b84:	982dd7fa 	srai	r22,r19,31
  803b88:	b005883a 	mov	r2,r22
  803b8c:	003c8206 	br	802d98 <__alt_mem_onchip_mem+0xff7fad98>
  803b90:	9080040c 	andi	r2,r18,16
  803b94:	10003526 	beq	r2,zero,803c6c <___vfprintf_internal_r+0x13fc>
  803b98:	d9402d17 	ldw	r5,180(sp)
  803b9c:	d8c02917 	ldw	r3,164(sp)
  803ba0:	d8002785 	stb	zero,158(sp)
  803ba4:	28800104 	addi	r2,r5,4
  803ba8:	2cc00017 	ldw	r19,0(r5)
  803bac:	002d883a 	mov	r22,zero
  803bb0:	18003716 	blt	r3,zero,803c90 <___vfprintf_internal_r+0x1420>
  803bb4:	00ffdfc4 	movi	r3,-129
  803bb8:	d8802d15 	stw	r2,180(sp)
  803bbc:	90e4703a 	and	r18,r18,r3
  803bc0:	0039883a 	mov	fp,zero
  803bc4:	983df326 	beq	r19,zero,803394 <__alt_mem_onchip_mem+0xff7fb394>
  803bc8:	00800244 	movi	r2,9
  803bcc:	14fc7b36 	bltu	r2,r19,802dbc <__alt_mem_onchip_mem+0xff7fadbc>
  803bd0:	d8c02817 	ldw	r3,160(sp)
  803bd4:	dc001dc4 	addi	r16,sp,119
  803bd8:	9cc00c04 	addi	r19,r19,48
  803bdc:	1c07c83a 	sub	r3,r3,r16
  803be0:	dcc01dc5 	stb	r19,119(sp)
  803be4:	d8c02e15 	stw	r3,184(sp)
  803be8:	003ce806 	br	802f8c <__alt_mem_onchip_mem+0xff7faf8c>
  803bec:	d8803317 	ldw	r2,204(sp)
  803bf0:	143fffc4 	addi	r16,r2,-1
  803bf4:	043f4d0e 	bge	zero,r16,80392c <__alt_mem_onchip_mem+0xff7fb92c>
  803bf8:	07000404 	movi	fp,16
  803bfc:	e400810e 	bge	fp,r16,803e04 <___vfprintf_internal_r+0x1594>
  803c00:	01402074 	movhi	r5,129
  803c04:	29481a84 	addi	r5,r5,8298
  803c08:	d9402b15 	stw	r5,172(sp)
  803c0c:	01c001c4 	movi	r7,7
  803c10:	dcc02c17 	ldw	r19,176(sp)
  803c14:	00000306 	br	803c24 <___vfprintf_internal_r+0x13b4>
  803c18:	b5800204 	addi	r22,r22,8
  803c1c:	843ffc04 	addi	r16,r16,-16
  803c20:	e4007b0e 	bge	fp,r16,803e10 <___vfprintf_internal_r+0x15a0>
  803c24:	18c00404 	addi	r3,r3,16
  803c28:	8c400044 	addi	r17,r17,1
  803c2c:	b5000015 	stw	r20,0(r22)
  803c30:	b7000115 	stw	fp,4(r22)
  803c34:	d8c02015 	stw	r3,128(sp)
  803c38:	dc401f15 	stw	r17,124(sp)
  803c3c:	3c7ff60e 	bge	r7,r17,803c18 <__alt_mem_onchip_mem+0xff7fbc18>
  803c40:	d9801e04 	addi	r6,sp,120
  803c44:	b80b883a 	mov	r5,r23
  803c48:	9809883a 	mov	r4,r19
  803c4c:	d9c03c15 	stw	r7,240(sp)
  803c50:	08085580 	call	808558 <__sprint_r>
  803c54:	d9c03c17 	ldw	r7,240(sp)
  803c58:	103c071e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803c5c:	d8c02017 	ldw	r3,128(sp)
  803c60:	dc401f17 	ldw	r17,124(sp)
  803c64:	dd800404 	addi	r22,sp,16
  803c68:	003fec06 	br	803c1c <__alt_mem_onchip_mem+0xff7fbc1c>
  803c6c:	9080100c 	andi	r2,r18,64
  803c70:	d8002785 	stb	zero,158(sp)
  803c74:	10010e26 	beq	r2,zero,8040b0 <___vfprintf_internal_r+0x1840>
  803c78:	d9002d17 	ldw	r4,180(sp)
  803c7c:	d9402917 	ldw	r5,164(sp)
  803c80:	002d883a 	mov	r22,zero
  803c84:	20800104 	addi	r2,r4,4
  803c88:	24c0000b 	ldhu	r19,0(r4)
  803c8c:	283fc90e 	bge	r5,zero,803bb4 <__alt_mem_onchip_mem+0xff7fbbb4>
  803c90:	d8802d15 	stw	r2,180(sp)
  803c94:	0039883a 	mov	fp,zero
  803c98:	9d84b03a 	or	r2,r19,r22
  803c9c:	103c461e 	bne	r2,zero,802db8 <__alt_mem_onchip_mem+0xff7fadb8>
  803ca0:	00800044 	movi	r2,1
  803ca4:	003e6c06 	br	803658 <__alt_mem_onchip_mem+0xff7fb658>
  803ca8:	d9002c17 	ldw	r4,176(sp)
  803cac:	d9801e04 	addi	r6,sp,120
  803cb0:	b80b883a 	mov	r5,r23
  803cb4:	08085580 	call	808558 <__sprint_r>
  803cb8:	103bef1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803cbc:	d8c02017 	ldw	r3,128(sp)
  803cc0:	da000404 	addi	r8,sp,16
  803cc4:	d9003217 	ldw	r4,200(sp)
  803cc8:	d8802617 	ldw	r2,152(sp)
  803ccc:	d9403317 	ldw	r5,204(sp)
  803cd0:	8123883a 	add	r17,r16,r4
  803cd4:	11400216 	blt	r2,r5,803ce0 <___vfprintf_internal_r+0x1470>
  803cd8:	9100004c 	andi	r4,r18,1
  803cdc:	20000d26 	beq	r4,zero,803d14 <___vfprintf_internal_r+0x14a4>
  803ce0:	d9003717 	ldw	r4,220(sp)
  803ce4:	d9403417 	ldw	r5,208(sp)
  803ce8:	1907883a 	add	r3,r3,r4
  803cec:	d9001f17 	ldw	r4,124(sp)
  803cf0:	41400015 	stw	r5,0(r8)
  803cf4:	d9403717 	ldw	r5,220(sp)
  803cf8:	21000044 	addi	r4,r4,1
  803cfc:	d8c02015 	stw	r3,128(sp)
  803d00:	41400115 	stw	r5,4(r8)
  803d04:	d9001f15 	stw	r4,124(sp)
  803d08:	014001c4 	movi	r5,7
  803d0c:	2901e816 	blt	r5,r4,8044b0 <___vfprintf_internal_r+0x1c40>
  803d10:	42000204 	addi	r8,r8,8
  803d14:	d9003317 	ldw	r4,204(sp)
  803d18:	8121883a 	add	r16,r16,r4
  803d1c:	2085c83a 	sub	r2,r4,r2
  803d20:	8461c83a 	sub	r16,r16,r17
  803d24:	1400010e 	bge	r2,r16,803d2c <___vfprintf_internal_r+0x14bc>
  803d28:	1021883a 	mov	r16,r2
  803d2c:	04000a0e 	bge	zero,r16,803d58 <___vfprintf_internal_r+0x14e8>
  803d30:	d9001f17 	ldw	r4,124(sp)
  803d34:	1c07883a 	add	r3,r3,r16
  803d38:	44400015 	stw	r17,0(r8)
  803d3c:	21000044 	addi	r4,r4,1
  803d40:	44000115 	stw	r16,4(r8)
  803d44:	d8c02015 	stw	r3,128(sp)
  803d48:	d9001f15 	stw	r4,124(sp)
  803d4c:	014001c4 	movi	r5,7
  803d50:	2901fb16 	blt	r5,r4,804540 <___vfprintf_internal_r+0x1cd0>
  803d54:	42000204 	addi	r8,r8,8
  803d58:	8001f716 	blt	r16,zero,804538 <___vfprintf_internal_r+0x1cc8>
  803d5c:	1421c83a 	sub	r16,r2,r16
  803d60:	043d380e 	bge	zero,r16,803244 <__alt_mem_onchip_mem+0xff7fb244>
  803d64:	04400404 	movi	r17,16
  803d68:	d8801f17 	ldw	r2,124(sp)
  803d6c:	8c3efb0e 	bge	r17,r16,80395c <__alt_mem_onchip_mem+0xff7fb95c>
  803d70:	01402074 	movhi	r5,129
  803d74:	29481a84 	addi	r5,r5,8298
  803d78:	d9402b15 	stw	r5,172(sp)
  803d7c:	058001c4 	movi	r22,7
  803d80:	dcc02c17 	ldw	r19,176(sp)
  803d84:	00000306 	br	803d94 <___vfprintf_internal_r+0x1524>
  803d88:	42000204 	addi	r8,r8,8
  803d8c:	843ffc04 	addi	r16,r16,-16
  803d90:	8c3ef50e 	bge	r17,r16,803968 <__alt_mem_onchip_mem+0xff7fb968>
  803d94:	18c00404 	addi	r3,r3,16
  803d98:	10800044 	addi	r2,r2,1
  803d9c:	45000015 	stw	r20,0(r8)
  803da0:	44400115 	stw	r17,4(r8)
  803da4:	d8c02015 	stw	r3,128(sp)
  803da8:	d8801f15 	stw	r2,124(sp)
  803dac:	b0bff60e 	bge	r22,r2,803d88 <__alt_mem_onchip_mem+0xff7fbd88>
  803db0:	d9801e04 	addi	r6,sp,120
  803db4:	b80b883a 	mov	r5,r23
  803db8:	9809883a 	mov	r4,r19
  803dbc:	08085580 	call	808558 <__sprint_r>
  803dc0:	103bad1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803dc4:	d8c02017 	ldw	r3,128(sp)
  803dc8:	d8801f17 	ldw	r2,124(sp)
  803dcc:	da000404 	addi	r8,sp,16
  803dd0:	003fee06 	br	803d8c <__alt_mem_onchip_mem+0xff7fbd8c>
  803dd4:	9088703a 	and	r4,r18,r2
  803dd8:	203eab1e 	bne	r4,zero,803888 <__alt_mem_onchip_mem+0xff7fb888>
  803ddc:	dc401f17 	ldw	r17,124(sp)
  803de0:	40800115 	stw	r2,4(r8)
  803de4:	44000015 	stw	r16,0(r8)
  803de8:	8c400044 	addi	r17,r17,1
  803dec:	d8c02015 	stw	r3,128(sp)
  803df0:	dc401f15 	stw	r17,124(sp)
  803df4:	008001c4 	movi	r2,7
  803df8:	14400e16 	blt	r2,r17,803e34 <___vfprintf_internal_r+0x15c4>
  803dfc:	45800204 	addi	r22,r8,8
  803e00:	003eca06 	br	80392c <__alt_mem_onchip_mem+0xff7fb92c>
  803e04:	01002074 	movhi	r4,129
  803e08:	21081a84 	addi	r4,r4,8298
  803e0c:	d9002b15 	stw	r4,172(sp)
  803e10:	d8802b17 	ldw	r2,172(sp)
  803e14:	1c07883a 	add	r3,r3,r16
  803e18:	8c400044 	addi	r17,r17,1
  803e1c:	b0800015 	stw	r2,0(r22)
  803e20:	b4000115 	stw	r16,4(r22)
  803e24:	d8c02015 	stw	r3,128(sp)
  803e28:	dc401f15 	stw	r17,124(sp)
  803e2c:	008001c4 	movi	r2,7
  803e30:	147ebd0e 	bge	r2,r17,803928 <__alt_mem_onchip_mem+0xff7fb928>
  803e34:	d9002c17 	ldw	r4,176(sp)
  803e38:	d9801e04 	addi	r6,sp,120
  803e3c:	b80b883a 	mov	r5,r23
  803e40:	08085580 	call	808558 <__sprint_r>
  803e44:	103b8c1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803e48:	d8c02017 	ldw	r3,128(sp)
  803e4c:	dc401f17 	ldw	r17,124(sp)
  803e50:	dd800404 	addi	r22,sp,16
  803e54:	003eb506 	br	80392c <__alt_mem_onchip_mem+0xff7fb92c>
  803e58:	d9002c17 	ldw	r4,176(sp)
  803e5c:	d9801e04 	addi	r6,sp,120
  803e60:	b80b883a 	mov	r5,r23
  803e64:	08085580 	call	808558 <__sprint_r>
  803e68:	103b831e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803e6c:	d8c02017 	ldw	r3,128(sp)
  803e70:	dc401f17 	ldw	r17,124(sp)
  803e74:	da000404 	addi	r8,sp,16
  803e78:	003e8d06 	br	8038b0 <__alt_mem_onchip_mem+0xff7fb8b0>
  803e7c:	d9002c17 	ldw	r4,176(sp)
  803e80:	d9801e04 	addi	r6,sp,120
  803e84:	b80b883a 	mov	r5,r23
  803e88:	08085580 	call	808558 <__sprint_r>
  803e8c:	103b7a1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803e90:	d8c02017 	ldw	r3,128(sp)
  803e94:	dc401f17 	ldw	r17,124(sp)
  803e98:	dd800404 	addi	r22,sp,16
  803e9c:	003e8f06 	br	8038dc <__alt_mem_onchip_mem+0xff7fb8dc>
  803ea0:	0027883a 	mov	r19,zero
  803ea4:	003f4a06 	br	803bd0 <__alt_mem_onchip_mem+0xff7fbbd0>
  803ea8:	d9002c17 	ldw	r4,176(sp)
  803eac:	d9801e04 	addi	r6,sp,120
  803eb0:	b80b883a 	mov	r5,r23
  803eb4:	08085580 	call	808558 <__sprint_r>
  803eb8:	103b6f1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  803ebc:	d8c02017 	ldw	r3,128(sp)
  803ec0:	da000404 	addi	r8,sp,16
  803ec4:	003c9d06 	br	80313c <__alt_mem_onchip_mem+0xff7fb13c>
  803ec8:	04e7c83a 	sub	r19,zero,r19
  803ecc:	9804c03a 	cmpne	r2,r19,zero
  803ed0:	05adc83a 	sub	r22,zero,r22
  803ed4:	b0adc83a 	sub	r22,r22,r2
  803ed8:	d8802917 	ldw	r2,164(sp)
  803edc:	07000b44 	movi	fp,45
  803ee0:	df002785 	stb	fp,158(sp)
  803ee4:	10017b16 	blt	r2,zero,8044d4 <___vfprintf_internal_r+0x1c64>
  803ee8:	00bfdfc4 	movi	r2,-129
  803eec:	90a4703a 	and	r18,r18,r2
  803ef0:	003bb106 	br	802db8 <__alt_mem_onchip_mem+0xff7fadb8>
  803ef4:	d9003617 	ldw	r4,216(sp)
  803ef8:	d9403817 	ldw	r5,224(sp)
  803efc:	da003d15 	stw	r8,244(sp)
  803f00:	08082740 	call	808274 <__fpclassifyd>
  803f04:	da003d17 	ldw	r8,244(sp)
  803f08:	1000f026 	beq	r2,zero,8042cc <___vfprintf_internal_r+0x1a5c>
  803f0c:	d9002917 	ldw	r4,164(sp)
  803f10:	05bff7c4 	movi	r22,-33
  803f14:	00bfffc4 	movi	r2,-1
  803f18:	8dac703a 	and	r22,r17,r22
  803f1c:	20820026 	beq	r4,r2,804720 <___vfprintf_internal_r+0x1eb0>
  803f20:	008011c4 	movi	r2,71
  803f24:	b081f726 	beq	r22,r2,804704 <___vfprintf_internal_r+0x1e94>
  803f28:	d9003817 	ldw	r4,224(sp)
  803f2c:	90c04014 	ori	r3,r18,256
  803f30:	d8c02b15 	stw	r3,172(sp)
  803f34:	20021516 	blt	r4,zero,80478c <___vfprintf_internal_r+0x1f1c>
  803f38:	dcc03817 	ldw	r19,224(sp)
  803f3c:	d8002a05 	stb	zero,168(sp)
  803f40:	00801984 	movi	r2,102
  803f44:	8881f926 	beq	r17,r2,80472c <___vfprintf_internal_r+0x1ebc>
  803f48:	00801184 	movi	r2,70
  803f4c:	88821c26 	beq	r17,r2,8047c0 <___vfprintf_internal_r+0x1f50>
  803f50:	00801144 	movi	r2,69
  803f54:	b081ef26 	beq	r22,r2,804714 <___vfprintf_internal_r+0x1ea4>
  803f58:	d8c02917 	ldw	r3,164(sp)
  803f5c:	d8802104 	addi	r2,sp,132
  803f60:	d8800315 	stw	r2,12(sp)
  803f64:	d9403617 	ldw	r5,216(sp)
  803f68:	d8802504 	addi	r2,sp,148
  803f6c:	d9002c17 	ldw	r4,176(sp)
  803f70:	d8800215 	stw	r2,8(sp)
  803f74:	d8802604 	addi	r2,sp,152
  803f78:	d8c00015 	stw	r3,0(sp)
  803f7c:	d8800115 	stw	r2,4(sp)
  803f80:	01c00084 	movi	r7,2
  803f84:	980d883a 	mov	r6,r19
  803f88:	d8c03c15 	stw	r3,240(sp)
  803f8c:	da003d15 	stw	r8,244(sp)
  803f90:	0804f480 	call	804f48 <_dtoa_r>
  803f94:	1021883a 	mov	r16,r2
  803f98:	008019c4 	movi	r2,103
  803f9c:	d8c03c17 	ldw	r3,240(sp)
  803fa0:	da003d17 	ldw	r8,244(sp)
  803fa4:	88817126 	beq	r17,r2,80456c <___vfprintf_internal_r+0x1cfc>
  803fa8:	008011c4 	movi	r2,71
  803fac:	88829226 	beq	r17,r2,8049f8 <___vfprintf_internal_r+0x2188>
  803fb0:	80f9883a 	add	fp,r16,r3
  803fb4:	d9003617 	ldw	r4,216(sp)
  803fb8:	000d883a 	mov	r6,zero
  803fbc:	000f883a 	mov	r7,zero
  803fc0:	980b883a 	mov	r5,r19
  803fc4:	da003d15 	stw	r8,244(sp)
  803fc8:	080c8700 	call	80c870 <__eqdf2>
  803fcc:	da003d17 	ldw	r8,244(sp)
  803fd0:	10018d26 	beq	r2,zero,804608 <___vfprintf_internal_r+0x1d98>
  803fd4:	d8802117 	ldw	r2,132(sp)
  803fd8:	1700062e 	bgeu	r2,fp,803ff4 <___vfprintf_internal_r+0x1784>
  803fdc:	01000c04 	movi	r4,48
  803fe0:	10c00044 	addi	r3,r2,1
  803fe4:	d8c02115 	stw	r3,132(sp)
  803fe8:	11000005 	stb	r4,0(r2)
  803fec:	d8802117 	ldw	r2,132(sp)
  803ff0:	173ffb36 	bltu	r2,fp,803fe0 <__alt_mem_onchip_mem+0xff7fbfe0>
  803ff4:	1405c83a 	sub	r2,r2,r16
  803ff8:	d8803315 	stw	r2,204(sp)
  803ffc:	008011c4 	movi	r2,71
  804000:	b0817626 	beq	r22,r2,8045dc <___vfprintf_internal_r+0x1d6c>
  804004:	00801944 	movi	r2,101
  804008:	1442810e 	bge	r2,r17,804a10 <___vfprintf_internal_r+0x21a0>
  80400c:	d8c02617 	ldw	r3,152(sp)
  804010:	00801984 	movi	r2,102
  804014:	d8c03215 	stw	r3,200(sp)
  804018:	8881fe26 	beq	r17,r2,804814 <___vfprintf_internal_r+0x1fa4>
  80401c:	d8c03217 	ldw	r3,200(sp)
  804020:	d9003317 	ldw	r4,204(sp)
  804024:	1901dd16 	blt	r3,r4,80479c <___vfprintf_internal_r+0x1f2c>
  804028:	9480004c 	andi	r18,r18,1
  80402c:	90022b1e 	bne	r18,zero,8048dc <___vfprintf_internal_r+0x206c>
  804030:	1805883a 	mov	r2,r3
  804034:	18028016 	blt	r3,zero,804a38 <___vfprintf_internal_r+0x21c8>
  804038:	d8c03217 	ldw	r3,200(sp)
  80403c:	044019c4 	movi	r17,103
  804040:	d8c02e15 	stw	r3,184(sp)
  804044:	df002a07 	ldb	fp,168(sp)
  804048:	e001531e 	bne	fp,zero,804598 <___vfprintf_internal_r+0x1d28>
  80404c:	df002783 	ldbu	fp,158(sp)
  804050:	d8802a15 	stw	r2,168(sp)
  804054:	dc802b17 	ldw	r18,172(sp)
  804058:	d8002915 	stw	zero,164(sp)
  80405c:	003bd106 	br	802fa4 <__alt_mem_onchip_mem+0xff7fafa4>
  804060:	d8802d17 	ldw	r2,180(sp)
  804064:	d8c02d17 	ldw	r3,180(sp)
  804068:	d9002d17 	ldw	r4,180(sp)
  80406c:	10800017 	ldw	r2,0(r2)
  804070:	18c00117 	ldw	r3,4(r3)
  804074:	21000204 	addi	r4,r4,8
  804078:	d8803615 	stw	r2,216(sp)
  80407c:	d8c03815 	stw	r3,224(sp)
  804080:	d9002d15 	stw	r4,180(sp)
  804084:	003b7506 	br	802e5c <__alt_mem_onchip_mem+0xff7fae5c>
  804088:	ac400007 	ldb	r17,0(r21)
  80408c:	003a5906 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  804090:	9080100c 	andi	r2,r18,64
  804094:	1000a826 	beq	r2,zero,804338 <___vfprintf_internal_r+0x1ac8>
  804098:	d9002d17 	ldw	r4,180(sp)
  80409c:	002d883a 	mov	r22,zero
  8040a0:	24c0000b 	ldhu	r19,0(r4)
  8040a4:	21000104 	addi	r4,r4,4
  8040a8:	d9002d15 	stw	r4,180(sp)
  8040ac:	003ccb06 	br	8033dc <__alt_mem_onchip_mem+0xff7fb3dc>
  8040b0:	d8c02d17 	ldw	r3,180(sp)
  8040b4:	d9002917 	ldw	r4,164(sp)
  8040b8:	002d883a 	mov	r22,zero
  8040bc:	18800104 	addi	r2,r3,4
  8040c0:	1cc00017 	ldw	r19,0(r3)
  8040c4:	203ebb0e 	bge	r4,zero,803bb4 <__alt_mem_onchip_mem+0xff7fbbb4>
  8040c8:	003ef106 	br	803c90 <__alt_mem_onchip_mem+0xff7fbc90>
  8040cc:	9080040c 	andi	r2,r18,16
  8040d0:	1000921e 	bne	r2,zero,80431c <___vfprintf_internal_r+0x1aac>
  8040d4:	9480100c 	andi	r18,r18,64
  8040d8:	90013926 	beq	r18,zero,8045c0 <___vfprintf_internal_r+0x1d50>
  8040dc:	d9002d17 	ldw	r4,180(sp)
  8040e0:	d9402f17 	ldw	r5,188(sp)
  8040e4:	20800017 	ldw	r2,0(r4)
  8040e8:	21000104 	addi	r4,r4,4
  8040ec:	d9002d15 	stw	r4,180(sp)
  8040f0:	1140000d 	sth	r5,0(r2)
  8040f4:	003a1606 	br	802950 <__alt_mem_onchip_mem+0xff7fa950>
  8040f8:	9080100c 	andi	r2,r18,64
  8040fc:	10008026 	beq	r2,zero,804300 <___vfprintf_internal_r+0x1a90>
  804100:	d8c02d17 	ldw	r3,180(sp)
  804104:	1cc0000f 	ldh	r19,0(r3)
  804108:	18c00104 	addi	r3,r3,4
  80410c:	d8c02d15 	stw	r3,180(sp)
  804110:	982dd7fa 	srai	r22,r19,31
  804114:	b005883a 	mov	r2,r22
  804118:	003b1f06 	br	802d98 <__alt_mem_onchip_mem+0xff7fad98>
  80411c:	9080100c 	andi	r2,r18,64
  804120:	d8002785 	stb	zero,158(sp)
  804124:	10008a1e 	bne	r2,zero,804350 <___vfprintf_internal_r+0x1ae0>
  804128:	d9402d17 	ldw	r5,180(sp)
  80412c:	d8c02917 	ldw	r3,164(sp)
  804130:	002d883a 	mov	r22,zero
  804134:	28800104 	addi	r2,r5,4
  804138:	2cc00017 	ldw	r19,0(r5)
  80413c:	183e4b0e 	bge	r3,zero,803a6c <__alt_mem_onchip_mem+0xff7fba6c>
  804140:	9d86b03a 	or	r3,r19,r22
  804144:	d8802d15 	stw	r2,180(sp)
  804148:	183e4c1e 	bne	r3,zero,803a7c <__alt_mem_onchip_mem+0xff7fba7c>
  80414c:	0039883a 	mov	fp,zero
  804150:	0005883a 	mov	r2,zero
  804154:	003d4006 	br	803658 <__alt_mem_onchip_mem+0xff7fb658>
  804158:	01402074 	movhi	r5,129
  80415c:	29481a84 	addi	r5,r5,8298
  804160:	d9402b15 	stw	r5,172(sp)
  804164:	d9402b17 	ldw	r5,172(sp)
  804168:	1c47883a 	add	r3,r3,r17
  80416c:	10800044 	addi	r2,r2,1
  804170:	41400015 	stw	r5,0(r8)
  804174:	44400115 	stw	r17,4(r8)
  804178:	d8c02015 	stw	r3,128(sp)
  80417c:	d8801f15 	stw	r2,124(sp)
  804180:	010001c4 	movi	r4,7
  804184:	20bec816 	blt	r4,r2,803ca8 <__alt_mem_onchip_mem+0xff7fbca8>
  804188:	42000204 	addi	r8,r8,8
  80418c:	003ecd06 	br	803cc4 <__alt_mem_onchip_mem+0xff7fbcc4>
  804190:	d9002917 	ldw	r4,164(sp)
  804194:	d8002785 	stb	zero,158(sp)
  804198:	203d2d16 	blt	r4,zero,803650 <__alt_mem_onchip_mem+0xff7fb650>
  80419c:	00bfdfc4 	movi	r2,-129
  8041a0:	90a4703a 	and	r18,r18,r2
  8041a4:	003a9106 	br	802bec <__alt_mem_onchip_mem+0xff7fabec>
  8041a8:	01002074 	movhi	r4,129
  8041ac:	21081a84 	addi	r4,r4,8298
  8041b0:	d9002b15 	stw	r4,172(sp)
  8041b4:	003c0c06 	br	8031e8 <__alt_mem_onchip_mem+0xff7fb1e8>
  8041b8:	d9002c17 	ldw	r4,176(sp)
  8041bc:	d9801e04 	addi	r6,sp,120
  8041c0:	b80b883a 	mov	r5,r23
  8041c4:	08085580 	call	808558 <__sprint_r>
  8041c8:	103aab1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8041cc:	d8c02017 	ldw	r3,128(sp)
  8041d0:	da000404 	addi	r8,sp,16
  8041d4:	003d4106 	br	8036dc <__alt_mem_onchip_mem+0xff7fb6dc>
  8041d8:	d8801f17 	ldw	r2,124(sp)
  8041dc:	01402074 	movhi	r5,129
  8041e0:	01000044 	movi	r4,1
  8041e4:	18c00044 	addi	r3,r3,1
  8041e8:	10800044 	addi	r2,r2,1
  8041ec:	29481a04 	addi	r5,r5,8296
  8041f0:	41000115 	stw	r4,4(r8)
  8041f4:	41400015 	stw	r5,0(r8)
  8041f8:	d8c02015 	stw	r3,128(sp)
  8041fc:	d8801f15 	stw	r2,124(sp)
  804200:	010001c4 	movi	r4,7
  804204:	20805c16 	blt	r4,r2,804378 <___vfprintf_internal_r+0x1b08>
  804208:	42000204 	addi	r8,r8,8
  80420c:	8800041e 	bne	r17,zero,804220 <___vfprintf_internal_r+0x19b0>
  804210:	d8803317 	ldw	r2,204(sp)
  804214:	1000021e 	bne	r2,zero,804220 <___vfprintf_internal_r+0x19b0>
  804218:	9080004c 	andi	r2,r18,1
  80421c:	103c0926 	beq	r2,zero,803244 <__alt_mem_onchip_mem+0xff7fb244>
  804220:	d9003717 	ldw	r4,220(sp)
  804224:	d8801f17 	ldw	r2,124(sp)
  804228:	d9403417 	ldw	r5,208(sp)
  80422c:	20c7883a 	add	r3,r4,r3
  804230:	10800044 	addi	r2,r2,1
  804234:	41000115 	stw	r4,4(r8)
  804238:	41400015 	stw	r5,0(r8)
  80423c:	d8c02015 	stw	r3,128(sp)
  804240:	d8801f15 	stw	r2,124(sp)
  804244:	010001c4 	movi	r4,7
  804248:	20812116 	blt	r4,r2,8046d0 <___vfprintf_internal_r+0x1e60>
  80424c:	42000204 	addi	r8,r8,8
  804250:	0463c83a 	sub	r17,zero,r17
  804254:	0440730e 	bge	zero,r17,804424 <___vfprintf_internal_r+0x1bb4>
  804258:	05800404 	movi	r22,16
  80425c:	b440860e 	bge	r22,r17,804478 <___vfprintf_internal_r+0x1c08>
  804260:	01402074 	movhi	r5,129
  804264:	29481a84 	addi	r5,r5,8298
  804268:	d9402b15 	stw	r5,172(sp)
  80426c:	070001c4 	movi	fp,7
  804270:	dcc02c17 	ldw	r19,176(sp)
  804274:	00000306 	br	804284 <___vfprintf_internal_r+0x1a14>
  804278:	42000204 	addi	r8,r8,8
  80427c:	8c7ffc04 	addi	r17,r17,-16
  804280:	b440800e 	bge	r22,r17,804484 <___vfprintf_internal_r+0x1c14>
  804284:	18c00404 	addi	r3,r3,16
  804288:	10800044 	addi	r2,r2,1
  80428c:	45000015 	stw	r20,0(r8)
  804290:	45800115 	stw	r22,4(r8)
  804294:	d8c02015 	stw	r3,128(sp)
  804298:	d8801f15 	stw	r2,124(sp)
  80429c:	e0bff60e 	bge	fp,r2,804278 <__alt_mem_onchip_mem+0xff7fc278>
  8042a0:	d9801e04 	addi	r6,sp,120
  8042a4:	b80b883a 	mov	r5,r23
  8042a8:	9809883a 	mov	r4,r19
  8042ac:	08085580 	call	808558 <__sprint_r>
  8042b0:	103a711e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8042b4:	d8c02017 	ldw	r3,128(sp)
  8042b8:	d8801f17 	ldw	r2,124(sp)
  8042bc:	da000404 	addi	r8,sp,16
  8042c0:	003fee06 	br	80427c <__alt_mem_onchip_mem+0xff7fc27c>
  8042c4:	00bfffc4 	movi	r2,-1
  8042c8:	003a6f06 	br	802c88 <__alt_mem_onchip_mem+0xff7fac88>
  8042cc:	008011c4 	movi	r2,71
  8042d0:	1440b816 	blt	r2,r17,8045b4 <___vfprintf_internal_r+0x1d44>
  8042d4:	04002074 	movhi	r16,129
  8042d8:	84080c04 	addi	r16,r16,8240
  8042dc:	00c000c4 	movi	r3,3
  8042e0:	00bfdfc4 	movi	r2,-129
  8042e4:	d8c02a15 	stw	r3,168(sp)
  8042e8:	90a4703a 	and	r18,r18,r2
  8042ec:	df002783 	ldbu	fp,158(sp)
  8042f0:	d8c02e15 	stw	r3,184(sp)
  8042f4:	d8002915 	stw	zero,164(sp)
  8042f8:	d8003215 	stw	zero,200(sp)
  8042fc:	003b2906 	br	802fa4 <__alt_mem_onchip_mem+0xff7fafa4>
  804300:	d9002d17 	ldw	r4,180(sp)
  804304:	24c00017 	ldw	r19,0(r4)
  804308:	21000104 	addi	r4,r4,4
  80430c:	d9002d15 	stw	r4,180(sp)
  804310:	982dd7fa 	srai	r22,r19,31
  804314:	b005883a 	mov	r2,r22
  804318:	003a9f06 	br	802d98 <__alt_mem_onchip_mem+0xff7fad98>
  80431c:	d9402d17 	ldw	r5,180(sp)
  804320:	d8c02f17 	ldw	r3,188(sp)
  804324:	28800017 	ldw	r2,0(r5)
  804328:	29400104 	addi	r5,r5,4
  80432c:	d9402d15 	stw	r5,180(sp)
  804330:	10c00015 	stw	r3,0(r2)
  804334:	00398606 	br	802950 <__alt_mem_onchip_mem+0xff7fa950>
  804338:	d9402d17 	ldw	r5,180(sp)
  80433c:	002d883a 	mov	r22,zero
  804340:	2cc00017 	ldw	r19,0(r5)
  804344:	29400104 	addi	r5,r5,4
  804348:	d9402d15 	stw	r5,180(sp)
  80434c:	003c2306 	br	8033dc <__alt_mem_onchip_mem+0xff7fb3dc>
  804350:	d8c02d17 	ldw	r3,180(sp)
  804354:	d9002917 	ldw	r4,164(sp)
  804358:	002d883a 	mov	r22,zero
  80435c:	18800104 	addi	r2,r3,4
  804360:	1cc0000b 	ldhu	r19,0(r3)
  804364:	203dc10e 	bge	r4,zero,803a6c <__alt_mem_onchip_mem+0xff7fba6c>
  804368:	003f7506 	br	804140 <__alt_mem_onchip_mem+0xff7fc140>
  80436c:	04002074 	movhi	r16,129
  804370:	84080a04 	addi	r16,r16,8232
  804374:	003acc06 	br	802ea8 <__alt_mem_onchip_mem+0xff7faea8>
  804378:	d9002c17 	ldw	r4,176(sp)
  80437c:	d9801e04 	addi	r6,sp,120
  804380:	b80b883a 	mov	r5,r23
  804384:	08085580 	call	808558 <__sprint_r>
  804388:	103a3b1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  80438c:	dc402617 	ldw	r17,152(sp)
  804390:	d8c02017 	ldw	r3,128(sp)
  804394:	da000404 	addi	r8,sp,16
  804398:	003f9c06 	br	80420c <__alt_mem_onchip_mem+0xff7fc20c>
  80439c:	ac400043 	ldbu	r17,1(r21)
  8043a0:	94800814 	ori	r18,r18,32
  8043a4:	ad400044 	addi	r21,r21,1
  8043a8:	8c403fcc 	andi	r17,r17,255
  8043ac:	8c40201c 	xori	r17,r17,128
  8043b0:	8c7fe004 	addi	r17,r17,-128
  8043b4:	00398f06 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  8043b8:	d8c02d15 	stw	r3,180(sp)
  8043bc:	0039883a 	mov	fp,zero
  8043c0:	003e3506 	br	803c98 <__alt_mem_onchip_mem+0xff7fbc98>
  8043c4:	d9002c17 	ldw	r4,176(sp)
  8043c8:	d9801e04 	addi	r6,sp,120
  8043cc:	b80b883a 	mov	r5,r23
  8043d0:	08085580 	call	808558 <__sprint_r>
  8043d4:	103a281e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8043d8:	d8c02017 	ldw	r3,128(sp)
  8043dc:	da000404 	addi	r8,sp,16
  8043e0:	003cd006 	br	803724 <__alt_mem_onchip_mem+0xff7fb724>
  8043e4:	8009883a 	mov	r4,r16
  8043e8:	da003d15 	stw	r8,244(sp)
  8043ec:	08083c40 	call	8083c4 <strlen>
  8043f0:	d8802e15 	stw	r2,184(sp)
  8043f4:	da003d17 	ldw	r8,244(sp)
  8043f8:	103c340e 	bge	r2,zero,8034cc <__alt_mem_onchip_mem+0xff7fb4cc>
  8043fc:	0005883a 	mov	r2,zero
  804400:	003c3206 	br	8034cc <__alt_mem_onchip_mem+0xff7fb4cc>
  804404:	d9002c17 	ldw	r4,176(sp)
  804408:	d9801e04 	addi	r6,sp,120
  80440c:	b80b883a 	mov	r5,r23
  804410:	08085580 	call	808558 <__sprint_r>
  804414:	103a181e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  804418:	d8c02017 	ldw	r3,128(sp)
  80441c:	d8801f17 	ldw	r2,124(sp)
  804420:	da000404 	addi	r8,sp,16
  804424:	d9403317 	ldw	r5,204(sp)
  804428:	10800044 	addi	r2,r2,1
  80442c:	44000015 	stw	r16,0(r8)
  804430:	28c7883a 	add	r3,r5,r3
  804434:	003b7d06 	br	80322c <__alt_mem_onchip_mem+0xff7fb22c>
  804438:	01002074 	movhi	r4,129
  80443c:	21081e84 	addi	r4,r4,8314
  804440:	d9003515 	stw	r4,212(sp)
  804444:	003b1406 	br	803098 <__alt_mem_onchip_mem+0xff7fb098>
  804448:	013fffc4 	movi	r4,-1
  80444c:	003a3506 	br	802d24 <__alt_mem_onchip_mem+0xff7fad24>
  804450:	0023883a 	mov	r17,zero
  804454:	003d9d06 	br	803acc <__alt_mem_onchip_mem+0xff7fbacc>
  804458:	d9002c17 	ldw	r4,176(sp)
  80445c:	d9801e04 	addi	r6,sp,120
  804460:	b80b883a 	mov	r5,r23
  804464:	08085580 	call	808558 <__sprint_r>
  804468:	103a031e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  80446c:	d8c02017 	ldw	r3,128(sp)
  804470:	da000404 	addi	r8,sp,16
  804474:	003d9406 	br	803ac8 <__alt_mem_onchip_mem+0xff7fbac8>
  804478:	01002074 	movhi	r4,129
  80447c:	21081a84 	addi	r4,r4,8298
  804480:	d9002b15 	stw	r4,172(sp)
  804484:	d9002b17 	ldw	r4,172(sp)
  804488:	1c47883a 	add	r3,r3,r17
  80448c:	10800044 	addi	r2,r2,1
  804490:	41000015 	stw	r4,0(r8)
  804494:	44400115 	stw	r17,4(r8)
  804498:	d8c02015 	stw	r3,128(sp)
  80449c:	d8801f15 	stw	r2,124(sp)
  8044a0:	010001c4 	movi	r4,7
  8044a4:	20bfd716 	blt	r4,r2,804404 <__alt_mem_onchip_mem+0xff7fc404>
  8044a8:	42000204 	addi	r8,r8,8
  8044ac:	003fdd06 	br	804424 <__alt_mem_onchip_mem+0xff7fc424>
  8044b0:	d9002c17 	ldw	r4,176(sp)
  8044b4:	d9801e04 	addi	r6,sp,120
  8044b8:	b80b883a 	mov	r5,r23
  8044bc:	08085580 	call	808558 <__sprint_r>
  8044c0:	1039ed1e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8044c4:	d8802617 	ldw	r2,152(sp)
  8044c8:	d8c02017 	ldw	r3,128(sp)
  8044cc:	da000404 	addi	r8,sp,16
  8044d0:	003e1006 	br	803d14 <__alt_mem_onchip_mem+0xff7fbd14>
  8044d4:	00800044 	movi	r2,1
  8044d8:	10803fcc 	andi	r2,r2,255
  8044dc:	00c00044 	movi	r3,1
  8044e0:	10fa3526 	beq	r2,r3,802db8 <__alt_mem_onchip_mem+0xff7fadb8>
  8044e4:	00c00084 	movi	r3,2
  8044e8:	10fbcb26 	beq	r2,r3,803418 <__alt_mem_onchip_mem+0xff7fb418>
  8044ec:	003a8f06 	br	802f2c <__alt_mem_onchip_mem+0xff7faf2c>
  8044f0:	01002074 	movhi	r4,129
  8044f4:	21081e84 	addi	r4,r4,8314
  8044f8:	d9003515 	stw	r4,212(sp)
  8044fc:	003b7606 	br	8032d8 <__alt_mem_onchip_mem+0xff7fb2d8>
  804500:	d8802917 	ldw	r2,164(sp)
  804504:	00c00184 	movi	r3,6
  804508:	1880012e 	bgeu	r3,r2,804510 <___vfprintf_internal_r+0x1ca0>
  80450c:	1805883a 	mov	r2,r3
  804510:	d8802e15 	stw	r2,184(sp)
  804514:	1000ef16 	blt	r2,zero,8048d4 <___vfprintf_internal_r+0x2064>
  804518:	04002074 	movhi	r16,129
  80451c:	d8802a15 	stw	r2,168(sp)
  804520:	dcc02d15 	stw	r19,180(sp)
  804524:	d8002915 	stw	zero,164(sp)
  804528:	d8003215 	stw	zero,200(sp)
  80452c:	84081804 	addi	r16,r16,8288
  804530:	0039883a 	mov	fp,zero
  804534:	003aa206 	br	802fc0 <__alt_mem_onchip_mem+0xff7fafc0>
  804538:	0021883a 	mov	r16,zero
  80453c:	003e0706 	br	803d5c <__alt_mem_onchip_mem+0xff7fbd5c>
  804540:	d9002c17 	ldw	r4,176(sp)
  804544:	d9801e04 	addi	r6,sp,120
  804548:	b80b883a 	mov	r5,r23
  80454c:	08085580 	call	808558 <__sprint_r>
  804550:	1039c91e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  804554:	d8802617 	ldw	r2,152(sp)
  804558:	d9403317 	ldw	r5,204(sp)
  80455c:	d8c02017 	ldw	r3,128(sp)
  804560:	da000404 	addi	r8,sp,16
  804564:	2885c83a 	sub	r2,r5,r2
  804568:	003dfb06 	br	803d58 <__alt_mem_onchip_mem+0xff7fbd58>
  80456c:	9080004c 	andi	r2,r18,1
  804570:	103e8f1e 	bne	r2,zero,803fb0 <__alt_mem_onchip_mem+0xff7fbfb0>
  804574:	d8802117 	ldw	r2,132(sp)
  804578:	003e9e06 	br	803ff4 <__alt_mem_onchip_mem+0xff7fbff4>
  80457c:	1025883a 	mov	r18,r2
  804580:	0039883a 	mov	fp,zero
  804584:	00800084 	movi	r2,2
  804588:	003fd306 	br	8044d8 <__alt_mem_onchip_mem+0xff7fc4d8>
  80458c:	07000b44 	movi	fp,45
  804590:	df002785 	stb	fp,158(sp)
  804594:	003a4006 	br	802e98 <__alt_mem_onchip_mem+0xff7fae98>
  804598:	00c00b44 	movi	r3,45
  80459c:	d8c02785 	stb	r3,158(sp)
  8045a0:	d8802a15 	stw	r2,168(sp)
  8045a4:	dc802b17 	ldw	r18,172(sp)
  8045a8:	d8002915 	stw	zero,164(sp)
  8045ac:	07000b44 	movi	fp,45
  8045b0:	003a8006 	br	802fb4 <__alt_mem_onchip_mem+0xff7fafb4>
  8045b4:	04002074 	movhi	r16,129
  8045b8:	84080d04 	addi	r16,r16,8244
  8045bc:	003f4706 	br	8042dc <__alt_mem_onchip_mem+0xff7fc2dc>
  8045c0:	d8c02d17 	ldw	r3,180(sp)
  8045c4:	d9002f17 	ldw	r4,188(sp)
  8045c8:	18800017 	ldw	r2,0(r3)
  8045cc:	18c00104 	addi	r3,r3,4
  8045d0:	d8c02d15 	stw	r3,180(sp)
  8045d4:	11000015 	stw	r4,0(r2)
  8045d8:	0038dd06 	br	802950 <__alt_mem_onchip_mem+0xff7fa950>
  8045dc:	dd802617 	ldw	r22,152(sp)
  8045e0:	00bfff44 	movi	r2,-3
  8045e4:	b0801c16 	blt	r22,r2,804658 <___vfprintf_internal_r+0x1de8>
  8045e8:	d9402917 	ldw	r5,164(sp)
  8045ec:	2d801a16 	blt	r5,r22,804658 <___vfprintf_internal_r+0x1de8>
  8045f0:	dd803215 	stw	r22,200(sp)
  8045f4:	003e8906 	br	80401c <__alt_mem_onchip_mem+0xff7fc01c>
  8045f8:	01002074 	movhi	r4,129
  8045fc:	21081a84 	addi	r4,r4,8298
  804600:	d9002b15 	stw	r4,172(sp)
  804604:	003c9106 	br	80384c <__alt_mem_onchip_mem+0xff7fb84c>
  804608:	e005883a 	mov	r2,fp
  80460c:	003e7906 	br	803ff4 <__alt_mem_onchip_mem+0xff7fbff4>
  804610:	d9402917 	ldw	r5,164(sp)
  804614:	df002783 	ldbu	fp,158(sp)
  804618:	dcc02d15 	stw	r19,180(sp)
  80461c:	d9402a15 	stw	r5,168(sp)
  804620:	d9402e15 	stw	r5,184(sp)
  804624:	d8002915 	stw	zero,164(sp)
  804628:	d8003215 	stw	zero,200(sp)
  80462c:	003a5d06 	br	802fa4 <__alt_mem_onchip_mem+0xff7fafa4>
  804630:	9080004c 	andi	r2,r18,1
  804634:	0039883a 	mov	fp,zero
  804638:	10000426 	beq	r2,zero,80464c <___vfprintf_internal_r+0x1ddc>
  80463c:	00800c04 	movi	r2,48
  804640:	dc001dc4 	addi	r16,sp,119
  804644:	d8801dc5 	stb	r2,119(sp)
  804648:	003b8006 	br	80344c <__alt_mem_onchip_mem+0xff7fb44c>
  80464c:	d8002e15 	stw	zero,184(sp)
  804650:	dc001e04 	addi	r16,sp,120
  804654:	003a4d06 	br	802f8c <__alt_mem_onchip_mem+0xff7faf8c>
  804658:	8c7fff84 	addi	r17,r17,-2
  80465c:	b5bfffc4 	addi	r22,r22,-1
  804660:	dd802615 	stw	r22,152(sp)
  804664:	dc4022c5 	stb	r17,139(sp)
  804668:	b000bf16 	blt	r22,zero,804968 <___vfprintf_internal_r+0x20f8>
  80466c:	00800ac4 	movi	r2,43
  804670:	d8802305 	stb	r2,140(sp)
  804674:	00800244 	movi	r2,9
  804678:	15807016 	blt	r2,r22,80483c <___vfprintf_internal_r+0x1fcc>
  80467c:	00800c04 	movi	r2,48
  804680:	b5800c04 	addi	r22,r22,48
  804684:	d8802345 	stb	r2,141(sp)
  804688:	dd802385 	stb	r22,142(sp)
  80468c:	d88023c4 	addi	r2,sp,143
  804690:	df0022c4 	addi	fp,sp,139
  804694:	d8c03317 	ldw	r3,204(sp)
  804698:	1739c83a 	sub	fp,r2,fp
  80469c:	d9003317 	ldw	r4,204(sp)
  8046a0:	e0c7883a 	add	r3,fp,r3
  8046a4:	df003a15 	stw	fp,232(sp)
  8046a8:	d8c02e15 	stw	r3,184(sp)
  8046ac:	00800044 	movi	r2,1
  8046b0:	1100b30e 	bge	r2,r4,804980 <___vfprintf_internal_r+0x2110>
  8046b4:	d8c02e17 	ldw	r3,184(sp)
  8046b8:	18c00044 	addi	r3,r3,1
  8046bc:	d8c02e15 	stw	r3,184(sp)
  8046c0:	1805883a 	mov	r2,r3
  8046c4:	1800ac16 	blt	r3,zero,804978 <___vfprintf_internal_r+0x2108>
  8046c8:	d8003215 	stw	zero,200(sp)
  8046cc:	003e5d06 	br	804044 <__alt_mem_onchip_mem+0xff7fc044>
  8046d0:	d9002c17 	ldw	r4,176(sp)
  8046d4:	d9801e04 	addi	r6,sp,120
  8046d8:	b80b883a 	mov	r5,r23
  8046dc:	08085580 	call	808558 <__sprint_r>
  8046e0:	1039651e 	bne	r2,zero,802c78 <__alt_mem_onchip_mem+0xff7fac78>
  8046e4:	dc402617 	ldw	r17,152(sp)
  8046e8:	d8c02017 	ldw	r3,128(sp)
  8046ec:	d8801f17 	ldw	r2,124(sp)
  8046f0:	da000404 	addi	r8,sp,16
  8046f4:	003ed606 	br	804250 <__alt_mem_onchip_mem+0xff7fc250>
  8046f8:	582b883a 	mov	r21,r11
  8046fc:	d8002915 	stw	zero,164(sp)
  804700:	0038bd06 	br	8029f8 <__alt_mem_onchip_mem+0xff7fa9f8>
  804704:	d8802917 	ldw	r2,164(sp)
  804708:	103e071e 	bne	r2,zero,803f28 <__alt_mem_onchip_mem+0xff7fbf28>
  80470c:	dc002915 	stw	r16,164(sp)
  804710:	003e0506 	br	803f28 <__alt_mem_onchip_mem+0xff7fbf28>
  804714:	d9002917 	ldw	r4,164(sp)
  804718:	20c00044 	addi	r3,r4,1
  80471c:	003e0f06 	br	803f5c <__alt_mem_onchip_mem+0xff7fbf5c>
  804720:	01400184 	movi	r5,6
  804724:	d9402915 	stw	r5,164(sp)
  804728:	003dff06 	br	803f28 <__alt_mem_onchip_mem+0xff7fbf28>
  80472c:	d8802104 	addi	r2,sp,132
  804730:	d8800315 	stw	r2,12(sp)
  804734:	d8802504 	addi	r2,sp,148
  804738:	d8800215 	stw	r2,8(sp)
  80473c:	d8802604 	addi	r2,sp,152
  804740:	d8800115 	stw	r2,4(sp)
  804744:	d8802917 	ldw	r2,164(sp)
  804748:	d9403617 	ldw	r5,216(sp)
  80474c:	d9002c17 	ldw	r4,176(sp)
  804750:	d8800015 	stw	r2,0(sp)
  804754:	01c000c4 	movi	r7,3
  804758:	980d883a 	mov	r6,r19
  80475c:	da003d15 	stw	r8,244(sp)
  804760:	0804f480 	call	804f48 <_dtoa_r>
  804764:	d8c02917 	ldw	r3,164(sp)
  804768:	da003d17 	ldw	r8,244(sp)
  80476c:	1021883a 	mov	r16,r2
  804770:	10f9883a 	add	fp,r2,r3
  804774:	81000007 	ldb	r4,0(r16)
  804778:	00800c04 	movi	r2,48
  80477c:	20805e26 	beq	r4,r2,8048f8 <___vfprintf_internal_r+0x2088>
  804780:	d8c02617 	ldw	r3,152(sp)
  804784:	e0f9883a 	add	fp,fp,r3
  804788:	003e0a06 	br	803fb4 <__alt_mem_onchip_mem+0xff7fbfb4>
  80478c:	00c00b44 	movi	r3,45
  804790:	24e0003c 	xorhi	r19,r4,32768
  804794:	d8c02a05 	stb	r3,168(sp)
  804798:	003de906 	br	803f40 <__alt_mem_onchip_mem+0xff7fbf40>
  80479c:	d8c03217 	ldw	r3,200(sp)
  8047a0:	00c07a0e 	bge	zero,r3,80498c <___vfprintf_internal_r+0x211c>
  8047a4:	00800044 	movi	r2,1
  8047a8:	d9003317 	ldw	r4,204(sp)
  8047ac:	1105883a 	add	r2,r2,r4
  8047b0:	d8802e15 	stw	r2,184(sp)
  8047b4:	10004e16 	blt	r2,zero,8048f0 <___vfprintf_internal_r+0x2080>
  8047b8:	044019c4 	movi	r17,103
  8047bc:	003e2106 	br	804044 <__alt_mem_onchip_mem+0xff7fc044>
  8047c0:	d9002917 	ldw	r4,164(sp)
  8047c4:	d8802104 	addi	r2,sp,132
  8047c8:	d8800315 	stw	r2,12(sp)
  8047cc:	d9000015 	stw	r4,0(sp)
  8047d0:	d8802504 	addi	r2,sp,148
  8047d4:	d9403617 	ldw	r5,216(sp)
  8047d8:	d9002c17 	ldw	r4,176(sp)
  8047dc:	d8800215 	stw	r2,8(sp)
  8047e0:	d8802604 	addi	r2,sp,152
  8047e4:	d8800115 	stw	r2,4(sp)
  8047e8:	01c000c4 	movi	r7,3
  8047ec:	980d883a 	mov	r6,r19
  8047f0:	da003d15 	stw	r8,244(sp)
  8047f4:	0804f480 	call	804f48 <_dtoa_r>
  8047f8:	d8c02917 	ldw	r3,164(sp)
  8047fc:	da003d17 	ldw	r8,244(sp)
  804800:	1021883a 	mov	r16,r2
  804804:	00801184 	movi	r2,70
  804808:	80f9883a 	add	fp,r16,r3
  80480c:	88bfd926 	beq	r17,r2,804774 <__alt_mem_onchip_mem+0xff7fc774>
  804810:	003de806 	br	803fb4 <__alt_mem_onchip_mem+0xff7fbfb4>
  804814:	d9002917 	ldw	r4,164(sp)
  804818:	00c04d0e 	bge	zero,r3,804950 <___vfprintf_internal_r+0x20e0>
  80481c:	2000441e 	bne	r4,zero,804930 <___vfprintf_internal_r+0x20c0>
  804820:	9480004c 	andi	r18,r18,1
  804824:	9000421e 	bne	r18,zero,804930 <___vfprintf_internal_r+0x20c0>
  804828:	1805883a 	mov	r2,r3
  80482c:	18007016 	blt	r3,zero,8049f0 <___vfprintf_internal_r+0x2180>
  804830:	d8c03217 	ldw	r3,200(sp)
  804834:	d8c02e15 	stw	r3,184(sp)
  804838:	003e0206 	br	804044 <__alt_mem_onchip_mem+0xff7fc044>
  80483c:	df0022c4 	addi	fp,sp,139
  804840:	dc002915 	stw	r16,164(sp)
  804844:	4027883a 	mov	r19,r8
  804848:	e021883a 	mov	r16,fp
  80484c:	b009883a 	mov	r4,r22
  804850:	01400284 	movi	r5,10
  804854:	0800b280 	call	800b28 <__modsi3>
  804858:	10800c04 	addi	r2,r2,48
  80485c:	843fffc4 	addi	r16,r16,-1
  804860:	b009883a 	mov	r4,r22
  804864:	01400284 	movi	r5,10
  804868:	80800005 	stb	r2,0(r16)
  80486c:	0800aa40 	call	800aa4 <__divsi3>
  804870:	102d883a 	mov	r22,r2
  804874:	00800244 	movi	r2,9
  804878:	15bff416 	blt	r2,r22,80484c <__alt_mem_onchip_mem+0xff7fc84c>
  80487c:	9811883a 	mov	r8,r19
  804880:	b0800c04 	addi	r2,r22,48
  804884:	8027883a 	mov	r19,r16
  804888:	997fffc4 	addi	r5,r19,-1
  80488c:	98bfffc5 	stb	r2,-1(r19)
  804890:	dc002917 	ldw	r16,164(sp)
  804894:	2f006a2e 	bgeu	r5,fp,804a40 <___vfprintf_internal_r+0x21d0>
  804898:	d9c02384 	addi	r7,sp,142
  80489c:	3ccfc83a 	sub	r7,r7,r19
  8048a0:	d9002344 	addi	r4,sp,141
  8048a4:	e1cf883a 	add	r7,fp,r7
  8048a8:	00000106 	br	8048b0 <___vfprintf_internal_r+0x2040>
  8048ac:	28800003 	ldbu	r2,0(r5)
  8048b0:	20800005 	stb	r2,0(r4)
  8048b4:	21000044 	addi	r4,r4,1
  8048b8:	29400044 	addi	r5,r5,1
  8048bc:	393ffb1e 	bne	r7,r4,8048ac <__alt_mem_onchip_mem+0xff7fc8ac>
  8048c0:	d8802304 	addi	r2,sp,140
  8048c4:	14c5c83a 	sub	r2,r2,r19
  8048c8:	d8c02344 	addi	r3,sp,141
  8048cc:	1885883a 	add	r2,r3,r2
  8048d0:	003f7006 	br	804694 <__alt_mem_onchip_mem+0xff7fc694>
  8048d4:	0005883a 	mov	r2,zero
  8048d8:	003f0f06 	br	804518 <__alt_mem_onchip_mem+0xff7fc518>
  8048dc:	d8c03217 	ldw	r3,200(sp)
  8048e0:	18c00044 	addi	r3,r3,1
  8048e4:	d8c02e15 	stw	r3,184(sp)
  8048e8:	1805883a 	mov	r2,r3
  8048ec:	183fb20e 	bge	r3,zero,8047b8 <__alt_mem_onchip_mem+0xff7fc7b8>
  8048f0:	0005883a 	mov	r2,zero
  8048f4:	003fb006 	br	8047b8 <__alt_mem_onchip_mem+0xff7fc7b8>
  8048f8:	d9003617 	ldw	r4,216(sp)
  8048fc:	000d883a 	mov	r6,zero
  804900:	000f883a 	mov	r7,zero
  804904:	980b883a 	mov	r5,r19
  804908:	d8c03c15 	stw	r3,240(sp)
  80490c:	da003d15 	stw	r8,244(sp)
  804910:	080c8700 	call	80c870 <__eqdf2>
  804914:	d8c03c17 	ldw	r3,240(sp)
  804918:	da003d17 	ldw	r8,244(sp)
  80491c:	103f9826 	beq	r2,zero,804780 <__alt_mem_onchip_mem+0xff7fc780>
  804920:	00800044 	movi	r2,1
  804924:	10c7c83a 	sub	r3,r2,r3
  804928:	d8c02615 	stw	r3,152(sp)
  80492c:	003f9506 	br	804784 <__alt_mem_onchip_mem+0xff7fc784>
  804930:	d9002917 	ldw	r4,164(sp)
  804934:	d8c03217 	ldw	r3,200(sp)
  804938:	20800044 	addi	r2,r4,1
  80493c:	1885883a 	add	r2,r3,r2
  804940:	d8802e15 	stw	r2,184(sp)
  804944:	103dbf0e 	bge	r2,zero,804044 <__alt_mem_onchip_mem+0xff7fc044>
  804948:	0005883a 	mov	r2,zero
  80494c:	003dbd06 	br	804044 <__alt_mem_onchip_mem+0xff7fc044>
  804950:	2000211e 	bne	r4,zero,8049d8 <___vfprintf_internal_r+0x2168>
  804954:	9480004c 	andi	r18,r18,1
  804958:	90001f1e 	bne	r18,zero,8049d8 <___vfprintf_internal_r+0x2168>
  80495c:	00800044 	movi	r2,1
  804960:	d8802e15 	stw	r2,184(sp)
  804964:	003db706 	br	804044 <__alt_mem_onchip_mem+0xff7fc044>
  804968:	00800b44 	movi	r2,45
  80496c:	05adc83a 	sub	r22,zero,r22
  804970:	d8802305 	stb	r2,140(sp)
  804974:	003f3f06 	br	804674 <__alt_mem_onchip_mem+0xff7fc674>
  804978:	0005883a 	mov	r2,zero
  80497c:	003f5206 	br	8046c8 <__alt_mem_onchip_mem+0xff7fc6c8>
  804980:	90a4703a 	and	r18,r18,r2
  804984:	903f4e26 	beq	r18,zero,8046c0 <__alt_mem_onchip_mem+0xff7fc6c0>
  804988:	003f4a06 	br	8046b4 <__alt_mem_onchip_mem+0xff7fc6b4>
  80498c:	00800084 	movi	r2,2
  804990:	10c5c83a 	sub	r2,r2,r3
  804994:	003f8406 	br	8047a8 <__alt_mem_onchip_mem+0xff7fc7a8>
  804998:	d8802d17 	ldw	r2,180(sp)
  80499c:	d9002d17 	ldw	r4,180(sp)
  8049a0:	ac400043 	ldbu	r17,1(r21)
  8049a4:	10800017 	ldw	r2,0(r2)
  8049a8:	582b883a 	mov	r21,r11
  8049ac:	d8802915 	stw	r2,164(sp)
  8049b0:	20800104 	addi	r2,r4,4
  8049b4:	d9002917 	ldw	r4,164(sp)
  8049b8:	d8802d15 	stw	r2,180(sp)
  8049bc:	203e7a0e 	bge	r4,zero,8043a8 <__alt_mem_onchip_mem+0xff7fc3a8>
  8049c0:	8c403fcc 	andi	r17,r17,255
  8049c4:	00bfffc4 	movi	r2,-1
  8049c8:	8c40201c 	xori	r17,r17,128
  8049cc:	d8802915 	stw	r2,164(sp)
  8049d0:	8c7fe004 	addi	r17,r17,-128
  8049d4:	00380706 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  8049d8:	d8c02917 	ldw	r3,164(sp)
  8049dc:	18c00084 	addi	r3,r3,2
  8049e0:	d8c02e15 	stw	r3,184(sp)
  8049e4:	1805883a 	mov	r2,r3
  8049e8:	183d960e 	bge	r3,zero,804044 <__alt_mem_onchip_mem+0xff7fc044>
  8049ec:	003fd606 	br	804948 <__alt_mem_onchip_mem+0xff7fc948>
  8049f0:	0005883a 	mov	r2,zero
  8049f4:	003f8e06 	br	804830 <__alt_mem_onchip_mem+0xff7fc830>
  8049f8:	9080004c 	andi	r2,r18,1
  8049fc:	103f811e 	bne	r2,zero,804804 <__alt_mem_onchip_mem+0xff7fc804>
  804a00:	d8802117 	ldw	r2,132(sp)
  804a04:	1405c83a 	sub	r2,r2,r16
  804a08:	d8803315 	stw	r2,204(sp)
  804a0c:	b47ef326 	beq	r22,r17,8045dc <__alt_mem_onchip_mem+0xff7fc5dc>
  804a10:	dd802617 	ldw	r22,152(sp)
  804a14:	003f1106 	br	80465c <__alt_mem_onchip_mem+0xff7fc65c>
  804a18:	d9c02785 	stb	r7,158(sp)
  804a1c:	00390406 	br	802e30 <__alt_mem_onchip_mem+0xff7fae30>
  804a20:	d9c02785 	stb	r7,158(sp)
  804a24:	0038d306 	br	802d74 <__alt_mem_onchip_mem+0xff7fad74>
  804a28:	d9c02785 	stb	r7,158(sp)
  804a2c:	003a6106 	br	8033b4 <__alt_mem_onchip_mem+0xff7fb3b4>
  804a30:	d9c02785 	stb	r7,158(sp)
  804a34:	003af806 	br	803618 <__alt_mem_onchip_mem+0xff7fb618>
  804a38:	0005883a 	mov	r2,zero
  804a3c:	003d7e06 	br	804038 <__alt_mem_onchip_mem+0xff7fc038>
  804a40:	d8802344 	addi	r2,sp,141
  804a44:	003f1306 	br	804694 <__alt_mem_onchip_mem+0xff7fc694>
  804a48:	d9c02785 	stb	r7,158(sp)
  804a4c:	00392306 	br	802edc <__alt_mem_onchip_mem+0xff7faedc>
  804a50:	d9c02785 	stb	r7,158(sp)
  804a54:	003aa906 	br	8034fc <__alt_mem_onchip_mem+0xff7fb4fc>
  804a58:	d9c02785 	stb	r7,158(sp)
  804a5c:	003a3d06 	br	803354 <__alt_mem_onchip_mem+0xff7fb354>
  804a60:	d9c02785 	stb	r7,158(sp)
  804a64:	003aca06 	br	803590 <__alt_mem_onchip_mem+0xff7fb590>

00804a68 <__vfprintf_internal>:
  804a68:	00802074 	movhi	r2,129
  804a6c:	10909704 	addi	r2,r2,16988
  804a70:	300f883a 	mov	r7,r6
  804a74:	280d883a 	mov	r6,r5
  804a78:	200b883a 	mov	r5,r4
  804a7c:	11000017 	ldw	r4,0(r2)
  804a80:	08028701 	jmpi	802870 <___vfprintf_internal_r>

00804a84 <__sbprintf>:
  804a84:	2880030b 	ldhu	r2,12(r5)
  804a88:	2ac01917 	ldw	r11,100(r5)
  804a8c:	2a80038b 	ldhu	r10,14(r5)
  804a90:	2a400717 	ldw	r9,28(r5)
  804a94:	2a000917 	ldw	r8,36(r5)
  804a98:	defee204 	addi	sp,sp,-1144
  804a9c:	00c10004 	movi	r3,1024
  804aa0:	dc011a15 	stw	r16,1128(sp)
  804aa4:	10bfff4c 	andi	r2,r2,65533
  804aa8:	2821883a 	mov	r16,r5
  804aac:	d8cb883a 	add	r5,sp,r3
  804ab0:	dc811c15 	stw	r18,1136(sp)
  804ab4:	dc411b15 	stw	r17,1132(sp)
  804ab8:	dfc11d15 	stw	ra,1140(sp)
  804abc:	2025883a 	mov	r18,r4
  804ac0:	d881030d 	sth	r2,1036(sp)
  804ac4:	dac11915 	stw	r11,1124(sp)
  804ac8:	da81038d 	sth	r10,1038(sp)
  804acc:	da410715 	stw	r9,1052(sp)
  804ad0:	da010915 	stw	r8,1060(sp)
  804ad4:	dec10015 	stw	sp,1024(sp)
  804ad8:	dec10415 	stw	sp,1040(sp)
  804adc:	d8c10215 	stw	r3,1032(sp)
  804ae0:	d8c10515 	stw	r3,1044(sp)
  804ae4:	d8010615 	stw	zero,1048(sp)
  804ae8:	08028700 	call	802870 <___vfprintf_internal_r>
  804aec:	1023883a 	mov	r17,r2
  804af0:	10000416 	blt	r2,zero,804b04 <__sbprintf+0x80>
  804af4:	d9410004 	addi	r5,sp,1024
  804af8:	9009883a 	mov	r4,r18
  804afc:	08068f00 	call	8068f0 <_fflush_r>
  804b00:	10000d1e 	bne	r2,zero,804b38 <__sbprintf+0xb4>
  804b04:	d881030b 	ldhu	r2,1036(sp)
  804b08:	1080100c 	andi	r2,r2,64
  804b0c:	10000326 	beq	r2,zero,804b1c <__sbprintf+0x98>
  804b10:	8080030b 	ldhu	r2,12(r16)
  804b14:	10801014 	ori	r2,r2,64
  804b18:	8080030d 	sth	r2,12(r16)
  804b1c:	8805883a 	mov	r2,r17
  804b20:	dfc11d17 	ldw	ra,1140(sp)
  804b24:	dc811c17 	ldw	r18,1136(sp)
  804b28:	dc411b17 	ldw	r17,1132(sp)
  804b2c:	dc011a17 	ldw	r16,1128(sp)
  804b30:	dec11e04 	addi	sp,sp,1144
  804b34:	f800283a 	ret
  804b38:	047fffc4 	movi	r17,-1
  804b3c:	003ff106 	br	804b04 <__alt_mem_onchip_mem+0xff7fcb04>

00804b40 <_write_r>:
  804b40:	defffd04 	addi	sp,sp,-12
  804b44:	2805883a 	mov	r2,r5
  804b48:	dc000015 	stw	r16,0(sp)
  804b4c:	04002074 	movhi	r16,129
  804b50:	dc400115 	stw	r17,4(sp)
  804b54:	300b883a 	mov	r5,r6
  804b58:	8417ea04 	addi	r16,r16,24488
  804b5c:	2023883a 	mov	r17,r4
  804b60:	380d883a 	mov	r6,r7
  804b64:	1009883a 	mov	r4,r2
  804b68:	dfc00215 	stw	ra,8(sp)
  804b6c:	80000015 	stw	zero,0(r16)
  804b70:	080ec340 	call	80ec34 <write>
  804b74:	00ffffc4 	movi	r3,-1
  804b78:	10c00526 	beq	r2,r3,804b90 <_write_r+0x50>
  804b7c:	dfc00217 	ldw	ra,8(sp)
  804b80:	dc400117 	ldw	r17,4(sp)
  804b84:	dc000017 	ldw	r16,0(sp)
  804b88:	dec00304 	addi	sp,sp,12
  804b8c:	f800283a 	ret
  804b90:	80c00017 	ldw	r3,0(r16)
  804b94:	183ff926 	beq	r3,zero,804b7c <__alt_mem_onchip_mem+0xff7fcb7c>
  804b98:	88c00015 	stw	r3,0(r17)
  804b9c:	003ff706 	br	804b7c <__alt_mem_onchip_mem+0xff7fcb7c>

00804ba0 <__swsetup_r>:
  804ba0:	00802074 	movhi	r2,129
  804ba4:	defffd04 	addi	sp,sp,-12
  804ba8:	10909704 	addi	r2,r2,16988
  804bac:	dc400115 	stw	r17,4(sp)
  804bb0:	2023883a 	mov	r17,r4
  804bb4:	11000017 	ldw	r4,0(r2)
  804bb8:	dc000015 	stw	r16,0(sp)
  804bbc:	dfc00215 	stw	ra,8(sp)
  804bc0:	2821883a 	mov	r16,r5
  804bc4:	20000226 	beq	r4,zero,804bd0 <__swsetup_r+0x30>
  804bc8:	20800e17 	ldw	r2,56(r4)
  804bcc:	10003126 	beq	r2,zero,804c94 <__swsetup_r+0xf4>
  804bd0:	8080030b 	ldhu	r2,12(r16)
  804bd4:	10c0020c 	andi	r3,r2,8
  804bd8:	1009883a 	mov	r4,r2
  804bdc:	18000f26 	beq	r3,zero,804c1c <__swsetup_r+0x7c>
  804be0:	80c00417 	ldw	r3,16(r16)
  804be4:	18001526 	beq	r3,zero,804c3c <__swsetup_r+0x9c>
  804be8:	1100004c 	andi	r4,r2,1
  804bec:	20001c1e 	bne	r4,zero,804c60 <__swsetup_r+0xc0>
  804bf0:	1080008c 	andi	r2,r2,2
  804bf4:	1000291e 	bne	r2,zero,804c9c <__swsetup_r+0xfc>
  804bf8:	80800517 	ldw	r2,20(r16)
  804bfc:	80800215 	stw	r2,8(r16)
  804c00:	18001c26 	beq	r3,zero,804c74 <__swsetup_r+0xd4>
  804c04:	0005883a 	mov	r2,zero
  804c08:	dfc00217 	ldw	ra,8(sp)
  804c0c:	dc400117 	ldw	r17,4(sp)
  804c10:	dc000017 	ldw	r16,0(sp)
  804c14:	dec00304 	addi	sp,sp,12
  804c18:	f800283a 	ret
  804c1c:	2080040c 	andi	r2,r4,16
  804c20:	10002e26 	beq	r2,zero,804cdc <__swsetup_r+0x13c>
  804c24:	2080010c 	andi	r2,r4,4
  804c28:	10001e1e 	bne	r2,zero,804ca4 <__swsetup_r+0x104>
  804c2c:	80c00417 	ldw	r3,16(r16)
  804c30:	20800214 	ori	r2,r4,8
  804c34:	8080030d 	sth	r2,12(r16)
  804c38:	183feb1e 	bne	r3,zero,804be8 <__alt_mem_onchip_mem+0xff7fcbe8>
  804c3c:	1100a00c 	andi	r4,r2,640
  804c40:	01408004 	movi	r5,512
  804c44:	217fe826 	beq	r4,r5,804be8 <__alt_mem_onchip_mem+0xff7fcbe8>
  804c48:	800b883a 	mov	r5,r16
  804c4c:	8809883a 	mov	r4,r17
  804c50:	08018ac0 	call	8018ac <__smakebuf_r>
  804c54:	8080030b 	ldhu	r2,12(r16)
  804c58:	80c00417 	ldw	r3,16(r16)
  804c5c:	003fe206 	br	804be8 <__alt_mem_onchip_mem+0xff7fcbe8>
  804c60:	80800517 	ldw	r2,20(r16)
  804c64:	80000215 	stw	zero,8(r16)
  804c68:	0085c83a 	sub	r2,zero,r2
  804c6c:	80800615 	stw	r2,24(r16)
  804c70:	183fe41e 	bne	r3,zero,804c04 <__alt_mem_onchip_mem+0xff7fcc04>
  804c74:	80c0030b 	ldhu	r3,12(r16)
  804c78:	0005883a 	mov	r2,zero
  804c7c:	1900200c 	andi	r4,r3,128
  804c80:	203fe126 	beq	r4,zero,804c08 <__alt_mem_onchip_mem+0xff7fcc08>
  804c84:	18c01014 	ori	r3,r3,64
  804c88:	80c0030d 	sth	r3,12(r16)
  804c8c:	00bfffc4 	movi	r2,-1
  804c90:	003fdd06 	br	804c08 <__alt_mem_onchip_mem+0xff7fcc08>
  804c94:	08010a00 	call	8010a0 <__sinit>
  804c98:	003fcd06 	br	804bd0 <__alt_mem_onchip_mem+0xff7fcbd0>
  804c9c:	0005883a 	mov	r2,zero
  804ca0:	003fd606 	br	804bfc <__alt_mem_onchip_mem+0xff7fcbfc>
  804ca4:	81400c17 	ldw	r5,48(r16)
  804ca8:	28000626 	beq	r5,zero,804cc4 <__swsetup_r+0x124>
  804cac:	80801004 	addi	r2,r16,64
  804cb0:	28800326 	beq	r5,r2,804cc0 <__swsetup_r+0x120>
  804cb4:	8809883a 	mov	r4,r17
  804cb8:	0806b4c0 	call	806b4c <_free_r>
  804cbc:	8100030b 	ldhu	r4,12(r16)
  804cc0:	80000c15 	stw	zero,48(r16)
  804cc4:	80c00417 	ldw	r3,16(r16)
  804cc8:	00bff6c4 	movi	r2,-37
  804ccc:	1108703a 	and	r4,r2,r4
  804cd0:	80000115 	stw	zero,4(r16)
  804cd4:	80c00015 	stw	r3,0(r16)
  804cd8:	003fd506 	br	804c30 <__alt_mem_onchip_mem+0xff7fcc30>
  804cdc:	00800244 	movi	r2,9
  804ce0:	88800015 	stw	r2,0(r17)
  804ce4:	20801014 	ori	r2,r4,64
  804ce8:	8080030d 	sth	r2,12(r16)
  804cec:	00bfffc4 	movi	r2,-1
  804cf0:	003fc506 	br	804c08 <__alt_mem_onchip_mem+0xff7fcc08>

00804cf4 <_close_r>:
  804cf4:	defffd04 	addi	sp,sp,-12
  804cf8:	dc000015 	stw	r16,0(sp)
  804cfc:	04002074 	movhi	r16,129
  804d00:	dc400115 	stw	r17,4(sp)
  804d04:	8417ea04 	addi	r16,r16,24488
  804d08:	2023883a 	mov	r17,r4
  804d0c:	2809883a 	mov	r4,r5
  804d10:	dfc00215 	stw	ra,8(sp)
  804d14:	80000015 	stw	zero,0(r16)
  804d18:	080deac0 	call	80deac <close>
  804d1c:	00ffffc4 	movi	r3,-1
  804d20:	10c00526 	beq	r2,r3,804d38 <_close_r+0x44>
  804d24:	dfc00217 	ldw	ra,8(sp)
  804d28:	dc400117 	ldw	r17,4(sp)
  804d2c:	dc000017 	ldw	r16,0(sp)
  804d30:	dec00304 	addi	sp,sp,12
  804d34:	f800283a 	ret
  804d38:	80c00017 	ldw	r3,0(r16)
  804d3c:	183ff926 	beq	r3,zero,804d24 <__alt_mem_onchip_mem+0xff7fcd24>
  804d40:	88c00015 	stw	r3,0(r17)
  804d44:	003ff706 	br	804d24 <__alt_mem_onchip_mem+0xff7fcd24>

00804d48 <quorem>:
  804d48:	defff704 	addi	sp,sp,-36
  804d4c:	dc800215 	stw	r18,8(sp)
  804d50:	20800417 	ldw	r2,16(r4)
  804d54:	2c800417 	ldw	r18,16(r5)
  804d58:	dfc00815 	stw	ra,32(sp)
  804d5c:	ddc00715 	stw	r23,28(sp)
  804d60:	dd800615 	stw	r22,24(sp)
  804d64:	dd400515 	stw	r21,20(sp)
  804d68:	dd000415 	stw	r20,16(sp)
  804d6c:	dcc00315 	stw	r19,12(sp)
  804d70:	dc400115 	stw	r17,4(sp)
  804d74:	dc000015 	stw	r16,0(sp)
  804d78:	14807116 	blt	r2,r18,804f40 <quorem+0x1f8>
  804d7c:	94bfffc4 	addi	r18,r18,-1
  804d80:	94ad883a 	add	r22,r18,r18
  804d84:	b5ad883a 	add	r22,r22,r22
  804d88:	2c400504 	addi	r17,r5,20
  804d8c:	8da9883a 	add	r20,r17,r22
  804d90:	25400504 	addi	r21,r4,20
  804d94:	282f883a 	mov	r23,r5
  804d98:	adad883a 	add	r22,r21,r22
  804d9c:	a1400017 	ldw	r5,0(r20)
  804da0:	2021883a 	mov	r16,r4
  804da4:	b1000017 	ldw	r4,0(r22)
  804da8:	29400044 	addi	r5,r5,1
  804dac:	0800b9c0 	call	800b9c <__udivsi3>
  804db0:	1027883a 	mov	r19,r2
  804db4:	10002c26 	beq	r2,zero,804e68 <quorem+0x120>
  804db8:	a813883a 	mov	r9,r21
  804dbc:	880b883a 	mov	r5,r17
  804dc0:	0009883a 	mov	r4,zero
  804dc4:	000d883a 	mov	r6,zero
  804dc8:	2a000017 	ldw	r8,0(r5)
  804dcc:	49c00017 	ldw	r7,0(r9)
  804dd0:	29400104 	addi	r5,r5,4
  804dd4:	40bfffcc 	andi	r2,r8,65535
  804dd8:	14c5383a 	mul	r2,r2,r19
  804ddc:	4010d43a 	srli	r8,r8,16
  804de0:	38ffffcc 	andi	r3,r7,65535
  804de4:	1105883a 	add	r2,r2,r4
  804de8:	1008d43a 	srli	r4,r2,16
  804dec:	44d1383a 	mul	r8,r8,r19
  804df0:	198d883a 	add	r6,r3,r6
  804df4:	10ffffcc 	andi	r3,r2,65535
  804df8:	30c7c83a 	sub	r3,r6,r3
  804dfc:	380ed43a 	srli	r7,r7,16
  804e00:	4105883a 	add	r2,r8,r4
  804e04:	180dd43a 	srai	r6,r3,16
  804e08:	113fffcc 	andi	r4,r2,65535
  804e0c:	390fc83a 	sub	r7,r7,r4
  804e10:	398d883a 	add	r6,r7,r6
  804e14:	300e943a 	slli	r7,r6,16
  804e18:	18ffffcc 	andi	r3,r3,65535
  804e1c:	1008d43a 	srli	r4,r2,16
  804e20:	38ceb03a 	or	r7,r7,r3
  804e24:	49c00015 	stw	r7,0(r9)
  804e28:	300dd43a 	srai	r6,r6,16
  804e2c:	4a400104 	addi	r9,r9,4
  804e30:	a17fe52e 	bgeu	r20,r5,804dc8 <__alt_mem_onchip_mem+0xff7fcdc8>
  804e34:	b0800017 	ldw	r2,0(r22)
  804e38:	10000b1e 	bne	r2,zero,804e68 <quorem+0x120>
  804e3c:	b0bfff04 	addi	r2,r22,-4
  804e40:	a880082e 	bgeu	r21,r2,804e64 <quorem+0x11c>
  804e44:	b0ffff17 	ldw	r3,-4(r22)
  804e48:	18000326 	beq	r3,zero,804e58 <quorem+0x110>
  804e4c:	00000506 	br	804e64 <quorem+0x11c>
  804e50:	10c00017 	ldw	r3,0(r2)
  804e54:	1800031e 	bne	r3,zero,804e64 <quorem+0x11c>
  804e58:	10bfff04 	addi	r2,r2,-4
  804e5c:	94bfffc4 	addi	r18,r18,-1
  804e60:	a8bffb36 	bltu	r21,r2,804e50 <__alt_mem_onchip_mem+0xff7fce50>
  804e64:	84800415 	stw	r18,16(r16)
  804e68:	b80b883a 	mov	r5,r23
  804e6c:	8009883a 	mov	r4,r16
  804e70:	0807ae00 	call	807ae0 <__mcmp>
  804e74:	10002616 	blt	r2,zero,804f10 <quorem+0x1c8>
  804e78:	9cc00044 	addi	r19,r19,1
  804e7c:	a805883a 	mov	r2,r21
  804e80:	000b883a 	mov	r5,zero
  804e84:	11000017 	ldw	r4,0(r2)
  804e88:	89800017 	ldw	r6,0(r17)
  804e8c:	10800104 	addi	r2,r2,4
  804e90:	20ffffcc 	andi	r3,r4,65535
  804e94:	194b883a 	add	r5,r3,r5
  804e98:	30ffffcc 	andi	r3,r6,65535
  804e9c:	28c7c83a 	sub	r3,r5,r3
  804ea0:	300cd43a 	srli	r6,r6,16
  804ea4:	2008d43a 	srli	r4,r4,16
  804ea8:	180bd43a 	srai	r5,r3,16
  804eac:	18ffffcc 	andi	r3,r3,65535
  804eb0:	2189c83a 	sub	r4,r4,r6
  804eb4:	2149883a 	add	r4,r4,r5
  804eb8:	200c943a 	slli	r6,r4,16
  804ebc:	8c400104 	addi	r17,r17,4
  804ec0:	200bd43a 	srai	r5,r4,16
  804ec4:	30c6b03a 	or	r3,r6,r3
  804ec8:	10ffff15 	stw	r3,-4(r2)
  804ecc:	a47fed2e 	bgeu	r20,r17,804e84 <__alt_mem_onchip_mem+0xff7fce84>
  804ed0:	9485883a 	add	r2,r18,r18
  804ed4:	1085883a 	add	r2,r2,r2
  804ed8:	a887883a 	add	r3,r21,r2
  804edc:	18800017 	ldw	r2,0(r3)
  804ee0:	10000b1e 	bne	r2,zero,804f10 <quorem+0x1c8>
  804ee4:	18bfff04 	addi	r2,r3,-4
  804ee8:	a880082e 	bgeu	r21,r2,804f0c <quorem+0x1c4>
  804eec:	18ffff17 	ldw	r3,-4(r3)
  804ef0:	18000326 	beq	r3,zero,804f00 <quorem+0x1b8>
  804ef4:	00000506 	br	804f0c <quorem+0x1c4>
  804ef8:	10c00017 	ldw	r3,0(r2)
  804efc:	1800031e 	bne	r3,zero,804f0c <quorem+0x1c4>
  804f00:	10bfff04 	addi	r2,r2,-4
  804f04:	94bfffc4 	addi	r18,r18,-1
  804f08:	a8bffb36 	bltu	r21,r2,804ef8 <__alt_mem_onchip_mem+0xff7fcef8>
  804f0c:	84800415 	stw	r18,16(r16)
  804f10:	9805883a 	mov	r2,r19
  804f14:	dfc00817 	ldw	ra,32(sp)
  804f18:	ddc00717 	ldw	r23,28(sp)
  804f1c:	dd800617 	ldw	r22,24(sp)
  804f20:	dd400517 	ldw	r21,20(sp)
  804f24:	dd000417 	ldw	r20,16(sp)
  804f28:	dcc00317 	ldw	r19,12(sp)
  804f2c:	dc800217 	ldw	r18,8(sp)
  804f30:	dc400117 	ldw	r17,4(sp)
  804f34:	dc000017 	ldw	r16,0(sp)
  804f38:	dec00904 	addi	sp,sp,36
  804f3c:	f800283a 	ret
  804f40:	0005883a 	mov	r2,zero
  804f44:	003ff306 	br	804f14 <__alt_mem_onchip_mem+0xff7fcf14>

00804f48 <_dtoa_r>:
  804f48:	20801017 	ldw	r2,64(r4)
  804f4c:	deffde04 	addi	sp,sp,-136
  804f50:	df002015 	stw	fp,128(sp)
  804f54:	dcc01b15 	stw	r19,108(sp)
  804f58:	dc801a15 	stw	r18,104(sp)
  804f5c:	dc401915 	stw	r17,100(sp)
  804f60:	dc001815 	stw	r16,96(sp)
  804f64:	dfc02115 	stw	ra,132(sp)
  804f68:	ddc01f15 	stw	r23,124(sp)
  804f6c:	dd801e15 	stw	r22,120(sp)
  804f70:	dd401d15 	stw	r21,116(sp)
  804f74:	dd001c15 	stw	r20,112(sp)
  804f78:	d9c00315 	stw	r7,12(sp)
  804f7c:	2039883a 	mov	fp,r4
  804f80:	3023883a 	mov	r17,r6
  804f84:	2825883a 	mov	r18,r5
  804f88:	dc002417 	ldw	r16,144(sp)
  804f8c:	3027883a 	mov	r19,r6
  804f90:	10000826 	beq	r2,zero,804fb4 <_dtoa_r+0x6c>
  804f94:	21801117 	ldw	r6,68(r4)
  804f98:	00c00044 	movi	r3,1
  804f9c:	100b883a 	mov	r5,r2
  804fa0:	1986983a 	sll	r3,r3,r6
  804fa4:	11800115 	stw	r6,4(r2)
  804fa8:	10c00215 	stw	r3,8(r2)
  804fac:	08072c00 	call	8072c0 <_Bfree>
  804fb0:	e0001015 	stw	zero,64(fp)
  804fb4:	88002e16 	blt	r17,zero,805070 <_dtoa_r+0x128>
  804fb8:	80000015 	stw	zero,0(r16)
  804fbc:	889ffc2c 	andhi	r2,r17,32752
  804fc0:	00dffc34 	movhi	r3,32752
  804fc4:	10c01c26 	beq	r2,r3,805038 <_dtoa_r+0xf0>
  804fc8:	000d883a 	mov	r6,zero
  804fcc:	000f883a 	mov	r7,zero
  804fd0:	9009883a 	mov	r4,r18
  804fd4:	980b883a 	mov	r5,r19
  804fd8:	080c8700 	call	80c870 <__eqdf2>
  804fdc:	10002b1e 	bne	r2,zero,80508c <_dtoa_r+0x144>
  804fe0:	d9c02317 	ldw	r7,140(sp)
  804fe4:	00800044 	movi	r2,1
  804fe8:	38800015 	stw	r2,0(r7)
  804fec:	d8802517 	ldw	r2,148(sp)
  804ff0:	10019e26 	beq	r2,zero,80566c <_dtoa_r+0x724>
  804ff4:	d8c02517 	ldw	r3,148(sp)
  804ff8:	00802074 	movhi	r2,129
  804ffc:	10881a44 	addi	r2,r2,8297
  805000:	18800015 	stw	r2,0(r3)
  805004:	10bfffc4 	addi	r2,r2,-1
  805008:	dfc02117 	ldw	ra,132(sp)
  80500c:	df002017 	ldw	fp,128(sp)
  805010:	ddc01f17 	ldw	r23,124(sp)
  805014:	dd801e17 	ldw	r22,120(sp)
  805018:	dd401d17 	ldw	r21,116(sp)
  80501c:	dd001c17 	ldw	r20,112(sp)
  805020:	dcc01b17 	ldw	r19,108(sp)
  805024:	dc801a17 	ldw	r18,104(sp)
  805028:	dc401917 	ldw	r17,100(sp)
  80502c:	dc001817 	ldw	r16,96(sp)
  805030:	dec02204 	addi	sp,sp,136
  805034:	f800283a 	ret
  805038:	d8c02317 	ldw	r3,140(sp)
  80503c:	0089c3c4 	movi	r2,9999
  805040:	18800015 	stw	r2,0(r3)
  805044:	90017726 	beq	r18,zero,805624 <_dtoa_r+0x6dc>
  805048:	00802074 	movhi	r2,129
  80504c:	10882604 	addi	r2,r2,8344
  805050:	d9002517 	ldw	r4,148(sp)
  805054:	203fec26 	beq	r4,zero,805008 <__alt_mem_onchip_mem+0xff7fd008>
  805058:	10c000c7 	ldb	r3,3(r2)
  80505c:	1801781e 	bne	r3,zero,805640 <_dtoa_r+0x6f8>
  805060:	10c000c4 	addi	r3,r2,3
  805064:	d9802517 	ldw	r6,148(sp)
  805068:	30c00015 	stw	r3,0(r6)
  80506c:	003fe606 	br	805008 <__alt_mem_onchip_mem+0xff7fd008>
  805070:	04e00034 	movhi	r19,32768
  805074:	9cffffc4 	addi	r19,r19,-1
  805078:	00800044 	movi	r2,1
  80507c:	8ce6703a 	and	r19,r17,r19
  805080:	80800015 	stw	r2,0(r16)
  805084:	9823883a 	mov	r17,r19
  805088:	003fcc06 	br	804fbc <__alt_mem_onchip_mem+0xff7fcfbc>
  80508c:	d8800204 	addi	r2,sp,8
  805090:	d8800015 	stw	r2,0(sp)
  805094:	d9c00104 	addi	r7,sp,4
  805098:	900b883a 	mov	r5,r18
  80509c:	980d883a 	mov	r6,r19
  8050a0:	e009883a 	mov	r4,fp
  8050a4:	8820d53a 	srli	r16,r17,20
  8050a8:	0807eac0 	call	807eac <__d2b>
  8050ac:	d8800915 	stw	r2,36(sp)
  8050b0:	8001651e 	bne	r16,zero,805648 <_dtoa_r+0x700>
  8050b4:	dd800217 	ldw	r22,8(sp)
  8050b8:	dc000117 	ldw	r16,4(sp)
  8050bc:	00800804 	movi	r2,32
  8050c0:	b421883a 	add	r16,r22,r16
  8050c4:	80c10c84 	addi	r3,r16,1074
  8050c8:	10c2d10e 	bge	r2,r3,805c10 <_dtoa_r+0xcc8>
  8050cc:	00801004 	movi	r2,64
  8050d0:	81010484 	addi	r4,r16,1042
  8050d4:	10c7c83a 	sub	r3,r2,r3
  8050d8:	9108d83a 	srl	r4,r18,r4
  8050dc:	88e2983a 	sll	r17,r17,r3
  8050e0:	2448b03a 	or	r4,r4,r17
  8050e4:	080dc380 	call	80dc38 <__floatunsidf>
  8050e8:	017f8434 	movhi	r5,65040
  8050ec:	01800044 	movi	r6,1
  8050f0:	1009883a 	mov	r4,r2
  8050f4:	194b883a 	add	r5,r3,r5
  8050f8:	843fffc4 	addi	r16,r16,-1
  8050fc:	d9801115 	stw	r6,68(sp)
  805100:	000d883a 	mov	r6,zero
  805104:	01cffe34 	movhi	r7,16376
  805108:	080d1e00 	call	80d1e0 <__subdf3>
  80510c:	0198dbf4 	movhi	r6,25455
  805110:	01cff4f4 	movhi	r7,16339
  805114:	3190d844 	addi	r6,r6,17249
  805118:	39e1e9c4 	addi	r7,r7,-30809
  80511c:	1009883a 	mov	r4,r2
  805120:	180b883a 	mov	r5,r3
  805124:	080cac80 	call	80cac8 <__muldf3>
  805128:	01a2d874 	movhi	r6,35681
  80512c:	01cff1f4 	movhi	r7,16327
  805130:	31b22cc4 	addi	r6,r6,-14157
  805134:	39e28a04 	addi	r7,r7,-30168
  805138:	180b883a 	mov	r5,r3
  80513c:	1009883a 	mov	r4,r2
  805140:	080b6dc0 	call	80b6dc <__adddf3>
  805144:	8009883a 	mov	r4,r16
  805148:	1029883a 	mov	r20,r2
  80514c:	1823883a 	mov	r17,r3
  805150:	080db5c0 	call	80db5c <__floatsidf>
  805154:	019427f4 	movhi	r6,20639
  805158:	01cff4f4 	movhi	r7,16339
  80515c:	319e7ec4 	addi	r6,r6,31227
  805160:	39d104c4 	addi	r7,r7,17427
  805164:	1009883a 	mov	r4,r2
  805168:	180b883a 	mov	r5,r3
  80516c:	080cac80 	call	80cac8 <__muldf3>
  805170:	100d883a 	mov	r6,r2
  805174:	180f883a 	mov	r7,r3
  805178:	a009883a 	mov	r4,r20
  80517c:	880b883a 	mov	r5,r17
  805180:	080b6dc0 	call	80b6dc <__adddf3>
  805184:	1009883a 	mov	r4,r2
  805188:	180b883a 	mov	r5,r3
  80518c:	1029883a 	mov	r20,r2
  805190:	1823883a 	mov	r17,r3
  805194:	080dadc0 	call	80dadc <__fixdfsi>
  805198:	000d883a 	mov	r6,zero
  80519c:	000f883a 	mov	r7,zero
  8051a0:	a009883a 	mov	r4,r20
  8051a4:	880b883a 	mov	r5,r17
  8051a8:	d8800515 	stw	r2,20(sp)
  8051ac:	080c9d40 	call	80c9d4 <__ledf2>
  8051b0:	10028716 	blt	r2,zero,805bd0 <_dtoa_r+0xc88>
  8051b4:	d8c00517 	ldw	r3,20(sp)
  8051b8:	00800584 	movi	r2,22
  8051bc:	10c27536 	bltu	r2,r3,805b94 <_dtoa_r+0xc4c>
  8051c0:	180490fa 	slli	r2,r3,3
  8051c4:	00c02074 	movhi	r3,129
  8051c8:	18c84104 	addi	r3,r3,8452
  8051cc:	1885883a 	add	r2,r3,r2
  8051d0:	11000017 	ldw	r4,0(r2)
  8051d4:	11400117 	ldw	r5,4(r2)
  8051d8:	900d883a 	mov	r6,r18
  8051dc:	980f883a 	mov	r7,r19
  8051e0:	080c8f80 	call	80c8f8 <__gedf2>
  8051e4:	00828d0e 	bge	zero,r2,805c1c <_dtoa_r+0xcd4>
  8051e8:	d9000517 	ldw	r4,20(sp)
  8051ec:	d8000e15 	stw	zero,56(sp)
  8051f0:	213fffc4 	addi	r4,r4,-1
  8051f4:	d9000515 	stw	r4,20(sp)
  8051f8:	b42dc83a 	sub	r22,r22,r16
  8051fc:	b5bfffc4 	addi	r22,r22,-1
  805200:	b0026f16 	blt	r22,zero,805bc0 <_dtoa_r+0xc78>
  805204:	d8000815 	stw	zero,32(sp)
  805208:	d9c00517 	ldw	r7,20(sp)
  80520c:	38026416 	blt	r7,zero,805ba0 <_dtoa_r+0xc58>
  805210:	b1ed883a 	add	r22,r22,r7
  805214:	d9c00d15 	stw	r7,52(sp)
  805218:	d8000a15 	stw	zero,40(sp)
  80521c:	d9800317 	ldw	r6,12(sp)
  805220:	00800244 	movi	r2,9
  805224:	11811436 	bltu	r2,r6,805678 <_dtoa_r+0x730>
  805228:	00800144 	movi	r2,5
  80522c:	1184e10e 	bge	r2,r6,8065b4 <_dtoa_r+0x166c>
  805230:	31bfff04 	addi	r6,r6,-4
  805234:	d9800315 	stw	r6,12(sp)
  805238:	0023883a 	mov	r17,zero
  80523c:	d9800317 	ldw	r6,12(sp)
  805240:	008000c4 	movi	r2,3
  805244:	30836726 	beq	r6,r2,805fe4 <_dtoa_r+0x109c>
  805248:	1183410e 	bge	r2,r6,805f50 <_dtoa_r+0x1008>
  80524c:	d9c00317 	ldw	r7,12(sp)
  805250:	00800104 	movi	r2,4
  805254:	38827c26 	beq	r7,r2,805c48 <_dtoa_r+0xd00>
  805258:	00800144 	movi	r2,5
  80525c:	3884c41e 	bne	r7,r2,806570 <_dtoa_r+0x1628>
  805260:	00800044 	movi	r2,1
  805264:	d8800b15 	stw	r2,44(sp)
  805268:	d8c00517 	ldw	r3,20(sp)
  80526c:	d9002217 	ldw	r4,136(sp)
  805270:	1907883a 	add	r3,r3,r4
  805274:	19800044 	addi	r6,r3,1
  805278:	d8c00c15 	stw	r3,48(sp)
  80527c:	d9800615 	stw	r6,24(sp)
  805280:	0183a40e 	bge	zero,r6,806114 <_dtoa_r+0x11cc>
  805284:	d9800617 	ldw	r6,24(sp)
  805288:	3021883a 	mov	r16,r6
  80528c:	e0001115 	stw	zero,68(fp)
  805290:	008005c4 	movi	r2,23
  805294:	1184c92e 	bgeu	r2,r6,8065bc <_dtoa_r+0x1674>
  805298:	00c00044 	movi	r3,1
  80529c:	00800104 	movi	r2,4
  8052a0:	1085883a 	add	r2,r2,r2
  8052a4:	11000504 	addi	r4,r2,20
  8052a8:	180b883a 	mov	r5,r3
  8052ac:	18c00044 	addi	r3,r3,1
  8052b0:	313ffb2e 	bgeu	r6,r4,8052a0 <__alt_mem_onchip_mem+0xff7fd2a0>
  8052b4:	e1401115 	stw	r5,68(fp)
  8052b8:	e009883a 	mov	r4,fp
  8052bc:	08072180 	call	807218 <_Balloc>
  8052c0:	d8800715 	stw	r2,28(sp)
  8052c4:	e0801015 	stw	r2,64(fp)
  8052c8:	00800384 	movi	r2,14
  8052cc:	1400f736 	bltu	r2,r16,8056ac <_dtoa_r+0x764>
  8052d0:	8800f626 	beq	r17,zero,8056ac <_dtoa_r+0x764>
  8052d4:	d9c00517 	ldw	r7,20(sp)
  8052d8:	01c39a0e 	bge	zero,r7,806144 <_dtoa_r+0x11fc>
  8052dc:	388003cc 	andi	r2,r7,15
  8052e0:	100490fa 	slli	r2,r2,3
  8052e4:	382bd13a 	srai	r21,r7,4
  8052e8:	00c02074 	movhi	r3,129
  8052ec:	18c84104 	addi	r3,r3,8452
  8052f0:	1885883a 	add	r2,r3,r2
  8052f4:	a8c0040c 	andi	r3,r21,16
  8052f8:	12400017 	ldw	r9,0(r2)
  8052fc:	12000117 	ldw	r8,4(r2)
  805300:	18037926 	beq	r3,zero,8060e8 <_dtoa_r+0x11a0>
  805304:	00802074 	movhi	r2,129
  805308:	10883704 	addi	r2,r2,8412
  80530c:	11800817 	ldw	r6,32(r2)
  805310:	11c00917 	ldw	r7,36(r2)
  805314:	9009883a 	mov	r4,r18
  805318:	980b883a 	mov	r5,r19
  80531c:	da001715 	stw	r8,92(sp)
  805320:	da401615 	stw	r9,88(sp)
  805324:	080bf880 	call	80bf88 <__divdf3>
  805328:	da001717 	ldw	r8,92(sp)
  80532c:	da401617 	ldw	r9,88(sp)
  805330:	ad4003cc 	andi	r21,r21,15
  805334:	040000c4 	movi	r16,3
  805338:	1023883a 	mov	r17,r2
  80533c:	1829883a 	mov	r20,r3
  805340:	a8001126 	beq	r21,zero,805388 <_dtoa_r+0x440>
  805344:	05c02074 	movhi	r23,129
  805348:	bdc83704 	addi	r23,r23,8412
  80534c:	4805883a 	mov	r2,r9
  805350:	4007883a 	mov	r3,r8
  805354:	a980004c 	andi	r6,r21,1
  805358:	1009883a 	mov	r4,r2
  80535c:	a82bd07a 	srai	r21,r21,1
  805360:	180b883a 	mov	r5,r3
  805364:	30000426 	beq	r6,zero,805378 <_dtoa_r+0x430>
  805368:	b9800017 	ldw	r6,0(r23)
  80536c:	b9c00117 	ldw	r7,4(r23)
  805370:	84000044 	addi	r16,r16,1
  805374:	080cac80 	call	80cac8 <__muldf3>
  805378:	bdc00204 	addi	r23,r23,8
  80537c:	a83ff51e 	bne	r21,zero,805354 <__alt_mem_onchip_mem+0xff7fd354>
  805380:	1013883a 	mov	r9,r2
  805384:	1811883a 	mov	r8,r3
  805388:	480d883a 	mov	r6,r9
  80538c:	400f883a 	mov	r7,r8
  805390:	8809883a 	mov	r4,r17
  805394:	a00b883a 	mov	r5,r20
  805398:	080bf880 	call	80bf88 <__divdf3>
  80539c:	d8800f15 	stw	r2,60(sp)
  8053a0:	d8c01015 	stw	r3,64(sp)
  8053a4:	d8c00e17 	ldw	r3,56(sp)
  8053a8:	18000626 	beq	r3,zero,8053c4 <_dtoa_r+0x47c>
  8053ac:	d9000f17 	ldw	r4,60(sp)
  8053b0:	d9401017 	ldw	r5,64(sp)
  8053b4:	000d883a 	mov	r6,zero
  8053b8:	01cffc34 	movhi	r7,16368
  8053bc:	080c9d40 	call	80c9d4 <__ledf2>
  8053c0:	10040b16 	blt	r2,zero,8063f0 <_dtoa_r+0x14a8>
  8053c4:	8009883a 	mov	r4,r16
  8053c8:	080db5c0 	call	80db5c <__floatsidf>
  8053cc:	d9800f17 	ldw	r6,60(sp)
  8053d0:	d9c01017 	ldw	r7,64(sp)
  8053d4:	1009883a 	mov	r4,r2
  8053d8:	180b883a 	mov	r5,r3
  8053dc:	080cac80 	call	80cac8 <__muldf3>
  8053e0:	000d883a 	mov	r6,zero
  8053e4:	01d00734 	movhi	r7,16412
  8053e8:	1009883a 	mov	r4,r2
  8053ec:	180b883a 	mov	r5,r3
  8053f0:	080b6dc0 	call	80b6dc <__adddf3>
  8053f4:	1021883a 	mov	r16,r2
  8053f8:	d8800617 	ldw	r2,24(sp)
  8053fc:	047f3034 	movhi	r17,64704
  805400:	1c63883a 	add	r17,r3,r17
  805404:	10031826 	beq	r2,zero,806068 <_dtoa_r+0x1120>
  805408:	d8c00517 	ldw	r3,20(sp)
  80540c:	db000617 	ldw	r12,24(sp)
  805410:	d8c01315 	stw	r3,76(sp)
  805414:	d9000b17 	ldw	r4,44(sp)
  805418:	20038f26 	beq	r4,zero,806258 <_dtoa_r+0x1310>
  80541c:	60bfffc4 	addi	r2,r12,-1
  805420:	100490fa 	slli	r2,r2,3
  805424:	00c02074 	movhi	r3,129
  805428:	18c84104 	addi	r3,r3,8452
  80542c:	1885883a 	add	r2,r3,r2
  805430:	11800017 	ldw	r6,0(r2)
  805434:	11c00117 	ldw	r7,4(r2)
  805438:	d8800717 	ldw	r2,28(sp)
  80543c:	0009883a 	mov	r4,zero
  805440:	014ff834 	movhi	r5,16352
  805444:	db001615 	stw	r12,88(sp)
  805448:	15c00044 	addi	r23,r2,1
  80544c:	080bf880 	call	80bf88 <__divdf3>
  805450:	800d883a 	mov	r6,r16
  805454:	880f883a 	mov	r7,r17
  805458:	1009883a 	mov	r4,r2
  80545c:	180b883a 	mov	r5,r3
  805460:	080d1e00 	call	80d1e0 <__subdf3>
  805464:	d9401017 	ldw	r5,64(sp)
  805468:	d9000f17 	ldw	r4,60(sp)
  80546c:	102b883a 	mov	r21,r2
  805470:	d8c01215 	stw	r3,72(sp)
  805474:	080dadc0 	call	80dadc <__fixdfsi>
  805478:	1009883a 	mov	r4,r2
  80547c:	1029883a 	mov	r20,r2
  805480:	080db5c0 	call	80db5c <__floatsidf>
  805484:	d9000f17 	ldw	r4,60(sp)
  805488:	d9401017 	ldw	r5,64(sp)
  80548c:	100d883a 	mov	r6,r2
  805490:	180f883a 	mov	r7,r3
  805494:	080d1e00 	call	80d1e0 <__subdf3>
  805498:	1823883a 	mov	r17,r3
  80549c:	d8c00717 	ldw	r3,28(sp)
  8054a0:	d9401217 	ldw	r5,72(sp)
  8054a4:	a2000c04 	addi	r8,r20,48
  8054a8:	1021883a 	mov	r16,r2
  8054ac:	1a000005 	stb	r8,0(r3)
  8054b0:	800d883a 	mov	r6,r16
  8054b4:	880f883a 	mov	r7,r17
  8054b8:	a809883a 	mov	r4,r21
  8054bc:	4029883a 	mov	r20,r8
  8054c0:	080c8f80 	call	80c8f8 <__gedf2>
  8054c4:	00841d16 	blt	zero,r2,80653c <_dtoa_r+0x15f4>
  8054c8:	800d883a 	mov	r6,r16
  8054cc:	880f883a 	mov	r7,r17
  8054d0:	0009883a 	mov	r4,zero
  8054d4:	014ffc34 	movhi	r5,16368
  8054d8:	080d1e00 	call	80d1e0 <__subdf3>
  8054dc:	d9401217 	ldw	r5,72(sp)
  8054e0:	100d883a 	mov	r6,r2
  8054e4:	180f883a 	mov	r7,r3
  8054e8:	a809883a 	mov	r4,r21
  8054ec:	080c8f80 	call	80c8f8 <__gedf2>
  8054f0:	db001617 	ldw	r12,88(sp)
  8054f4:	00840e16 	blt	zero,r2,806530 <_dtoa_r+0x15e8>
  8054f8:	00800044 	movi	r2,1
  8054fc:	13006b0e 	bge	r2,r12,8056ac <_dtoa_r+0x764>
  805500:	d9000717 	ldw	r4,28(sp)
  805504:	dd800f15 	stw	r22,60(sp)
  805508:	dcc01015 	stw	r19,64(sp)
  80550c:	2319883a 	add	r12,r4,r12
  805510:	dcc01217 	ldw	r19,72(sp)
  805514:	602d883a 	mov	r22,r12
  805518:	dc801215 	stw	r18,72(sp)
  80551c:	b825883a 	mov	r18,r23
  805520:	00000906 	br	805548 <_dtoa_r+0x600>
  805524:	080d1e00 	call	80d1e0 <__subdf3>
  805528:	a80d883a 	mov	r6,r21
  80552c:	980f883a 	mov	r7,r19
  805530:	1009883a 	mov	r4,r2
  805534:	180b883a 	mov	r5,r3
  805538:	080c9d40 	call	80c9d4 <__ledf2>
  80553c:	1003e816 	blt	r2,zero,8064e0 <_dtoa_r+0x1598>
  805540:	b825883a 	mov	r18,r23
  805544:	bd83e926 	beq	r23,r22,8064ec <_dtoa_r+0x15a4>
  805548:	a809883a 	mov	r4,r21
  80554c:	980b883a 	mov	r5,r19
  805550:	000d883a 	mov	r6,zero
  805554:	01d00934 	movhi	r7,16420
  805558:	080cac80 	call	80cac8 <__muldf3>
  80555c:	000d883a 	mov	r6,zero
  805560:	01d00934 	movhi	r7,16420
  805564:	8009883a 	mov	r4,r16
  805568:	880b883a 	mov	r5,r17
  80556c:	102b883a 	mov	r21,r2
  805570:	1827883a 	mov	r19,r3
  805574:	080cac80 	call	80cac8 <__muldf3>
  805578:	180b883a 	mov	r5,r3
  80557c:	1009883a 	mov	r4,r2
  805580:	1821883a 	mov	r16,r3
  805584:	1023883a 	mov	r17,r2
  805588:	080dadc0 	call	80dadc <__fixdfsi>
  80558c:	1009883a 	mov	r4,r2
  805590:	1029883a 	mov	r20,r2
  805594:	080db5c0 	call	80db5c <__floatsidf>
  805598:	8809883a 	mov	r4,r17
  80559c:	800b883a 	mov	r5,r16
  8055a0:	100d883a 	mov	r6,r2
  8055a4:	180f883a 	mov	r7,r3
  8055a8:	080d1e00 	call	80d1e0 <__subdf3>
  8055ac:	a5000c04 	addi	r20,r20,48
  8055b0:	a80d883a 	mov	r6,r21
  8055b4:	980f883a 	mov	r7,r19
  8055b8:	1009883a 	mov	r4,r2
  8055bc:	180b883a 	mov	r5,r3
  8055c0:	95000005 	stb	r20,0(r18)
  8055c4:	1021883a 	mov	r16,r2
  8055c8:	1823883a 	mov	r17,r3
  8055cc:	080c9d40 	call	80c9d4 <__ledf2>
  8055d0:	bdc00044 	addi	r23,r23,1
  8055d4:	800d883a 	mov	r6,r16
  8055d8:	880f883a 	mov	r7,r17
  8055dc:	0009883a 	mov	r4,zero
  8055e0:	014ffc34 	movhi	r5,16368
  8055e4:	103fcf0e 	bge	r2,zero,805524 <__alt_mem_onchip_mem+0xff7fd524>
  8055e8:	d8c01317 	ldw	r3,76(sp)
  8055ec:	d8c00515 	stw	r3,20(sp)
  8055f0:	d9400917 	ldw	r5,36(sp)
  8055f4:	e009883a 	mov	r4,fp
  8055f8:	08072c00 	call	8072c0 <_Bfree>
  8055fc:	d9000517 	ldw	r4,20(sp)
  805600:	d9802317 	ldw	r6,140(sp)
  805604:	d9c02517 	ldw	r7,148(sp)
  805608:	b8000005 	stb	zero,0(r23)
  80560c:	20800044 	addi	r2,r4,1
  805610:	30800015 	stw	r2,0(r6)
  805614:	3802aa26 	beq	r7,zero,8060c0 <_dtoa_r+0x1178>
  805618:	3dc00015 	stw	r23,0(r7)
  80561c:	d8800717 	ldw	r2,28(sp)
  805620:	003e7906 	br	805008 <__alt_mem_onchip_mem+0xff7fd008>
  805624:	00800434 	movhi	r2,16
  805628:	10bfffc4 	addi	r2,r2,-1
  80562c:	88a2703a 	and	r17,r17,r2
  805630:	883e851e 	bne	r17,zero,805048 <__alt_mem_onchip_mem+0xff7fd048>
  805634:	00802074 	movhi	r2,129
  805638:	10882304 	addi	r2,r2,8332
  80563c:	003e8406 	br	805050 <__alt_mem_onchip_mem+0xff7fd050>
  805640:	10c00204 	addi	r3,r2,8
  805644:	003e8706 	br	805064 <__alt_mem_onchip_mem+0xff7fd064>
  805648:	01400434 	movhi	r5,16
  80564c:	297fffc4 	addi	r5,r5,-1
  805650:	994a703a 	and	r5,r19,r5
  805654:	9009883a 	mov	r4,r18
  805658:	843f0044 	addi	r16,r16,-1023
  80565c:	294ffc34 	orhi	r5,r5,16368
  805660:	dd800217 	ldw	r22,8(sp)
  805664:	d8001115 	stw	zero,68(sp)
  805668:	003ea506 	br	805100 <__alt_mem_onchip_mem+0xff7fd100>
  80566c:	00802074 	movhi	r2,129
  805670:	10881a04 	addi	r2,r2,8296
  805674:	003e6406 	br	805008 <__alt_mem_onchip_mem+0xff7fd008>
  805678:	e0001115 	stw	zero,68(fp)
  80567c:	000b883a 	mov	r5,zero
  805680:	e009883a 	mov	r4,fp
  805684:	08072180 	call	807218 <_Balloc>
  805688:	01bfffc4 	movi	r6,-1
  80568c:	01c00044 	movi	r7,1
  805690:	d8800715 	stw	r2,28(sp)
  805694:	d9800c15 	stw	r6,48(sp)
  805698:	e0801015 	stw	r2,64(fp)
  80569c:	d8000315 	stw	zero,12(sp)
  8056a0:	d9c00b15 	stw	r7,44(sp)
  8056a4:	d9800615 	stw	r6,24(sp)
  8056a8:	d8002215 	stw	zero,136(sp)
  8056ac:	d8800117 	ldw	r2,4(sp)
  8056b0:	10008916 	blt	r2,zero,8058d8 <_dtoa_r+0x990>
  8056b4:	d9000517 	ldw	r4,20(sp)
  8056b8:	00c00384 	movi	r3,14
  8056bc:	19008616 	blt	r3,r4,8058d8 <_dtoa_r+0x990>
  8056c0:	200490fa 	slli	r2,r4,3
  8056c4:	00c02074 	movhi	r3,129
  8056c8:	d9802217 	ldw	r6,136(sp)
  8056cc:	18c84104 	addi	r3,r3,8452
  8056d0:	1885883a 	add	r2,r3,r2
  8056d4:	14000017 	ldw	r16,0(r2)
  8056d8:	14400117 	ldw	r17,4(r2)
  8056dc:	30016316 	blt	r6,zero,805c6c <_dtoa_r+0xd24>
  8056e0:	800d883a 	mov	r6,r16
  8056e4:	880f883a 	mov	r7,r17
  8056e8:	9009883a 	mov	r4,r18
  8056ec:	980b883a 	mov	r5,r19
  8056f0:	080bf880 	call	80bf88 <__divdf3>
  8056f4:	180b883a 	mov	r5,r3
  8056f8:	1009883a 	mov	r4,r2
  8056fc:	080dadc0 	call	80dadc <__fixdfsi>
  805700:	1009883a 	mov	r4,r2
  805704:	102b883a 	mov	r21,r2
  805708:	080db5c0 	call	80db5c <__floatsidf>
  80570c:	800d883a 	mov	r6,r16
  805710:	880f883a 	mov	r7,r17
  805714:	1009883a 	mov	r4,r2
  805718:	180b883a 	mov	r5,r3
  80571c:	080cac80 	call	80cac8 <__muldf3>
  805720:	100d883a 	mov	r6,r2
  805724:	180f883a 	mov	r7,r3
  805728:	9009883a 	mov	r4,r18
  80572c:	980b883a 	mov	r5,r19
  805730:	080d1e00 	call	80d1e0 <__subdf3>
  805734:	d9c00717 	ldw	r7,28(sp)
  805738:	1009883a 	mov	r4,r2
  80573c:	a8800c04 	addi	r2,r21,48
  805740:	38800005 	stb	r2,0(r7)
  805744:	3dc00044 	addi	r23,r7,1
  805748:	d9c00617 	ldw	r7,24(sp)
  80574c:	01800044 	movi	r6,1
  805750:	180b883a 	mov	r5,r3
  805754:	2005883a 	mov	r2,r4
  805758:	39803826 	beq	r7,r6,80583c <_dtoa_r+0x8f4>
  80575c:	000d883a 	mov	r6,zero
  805760:	01d00934 	movhi	r7,16420
  805764:	080cac80 	call	80cac8 <__muldf3>
  805768:	000d883a 	mov	r6,zero
  80576c:	000f883a 	mov	r7,zero
  805770:	1009883a 	mov	r4,r2
  805774:	180b883a 	mov	r5,r3
  805778:	1025883a 	mov	r18,r2
  80577c:	1827883a 	mov	r19,r3
  805780:	080c8700 	call	80c870 <__eqdf2>
  805784:	103f9a26 	beq	r2,zero,8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805788:	d9c00617 	ldw	r7,24(sp)
  80578c:	d8c00717 	ldw	r3,28(sp)
  805790:	b829883a 	mov	r20,r23
  805794:	38bfffc4 	addi	r2,r7,-1
  805798:	18ad883a 	add	r22,r3,r2
  80579c:	00000a06 	br	8057c8 <_dtoa_r+0x880>
  8057a0:	080cac80 	call	80cac8 <__muldf3>
  8057a4:	000d883a 	mov	r6,zero
  8057a8:	000f883a 	mov	r7,zero
  8057ac:	1009883a 	mov	r4,r2
  8057b0:	180b883a 	mov	r5,r3
  8057b4:	1025883a 	mov	r18,r2
  8057b8:	1827883a 	mov	r19,r3
  8057bc:	b829883a 	mov	r20,r23
  8057c0:	080c8700 	call	80c870 <__eqdf2>
  8057c4:	103f8a26 	beq	r2,zero,8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  8057c8:	800d883a 	mov	r6,r16
  8057cc:	880f883a 	mov	r7,r17
  8057d0:	9009883a 	mov	r4,r18
  8057d4:	980b883a 	mov	r5,r19
  8057d8:	080bf880 	call	80bf88 <__divdf3>
  8057dc:	180b883a 	mov	r5,r3
  8057e0:	1009883a 	mov	r4,r2
  8057e4:	080dadc0 	call	80dadc <__fixdfsi>
  8057e8:	1009883a 	mov	r4,r2
  8057ec:	102b883a 	mov	r21,r2
  8057f0:	080db5c0 	call	80db5c <__floatsidf>
  8057f4:	800d883a 	mov	r6,r16
  8057f8:	880f883a 	mov	r7,r17
  8057fc:	1009883a 	mov	r4,r2
  805800:	180b883a 	mov	r5,r3
  805804:	080cac80 	call	80cac8 <__muldf3>
  805808:	100d883a 	mov	r6,r2
  80580c:	180f883a 	mov	r7,r3
  805810:	9009883a 	mov	r4,r18
  805814:	980b883a 	mov	r5,r19
  805818:	080d1e00 	call	80d1e0 <__subdf3>
  80581c:	aa000c04 	addi	r8,r21,48
  805820:	a2000005 	stb	r8,0(r20)
  805824:	000d883a 	mov	r6,zero
  805828:	01d00934 	movhi	r7,16420
  80582c:	1009883a 	mov	r4,r2
  805830:	180b883a 	mov	r5,r3
  805834:	a5c00044 	addi	r23,r20,1
  805838:	b53fd91e 	bne	r22,r20,8057a0 <__alt_mem_onchip_mem+0xff7fd7a0>
  80583c:	100d883a 	mov	r6,r2
  805840:	180f883a 	mov	r7,r3
  805844:	1009883a 	mov	r4,r2
  805848:	180b883a 	mov	r5,r3
  80584c:	080b6dc0 	call	80b6dc <__adddf3>
  805850:	100d883a 	mov	r6,r2
  805854:	180f883a 	mov	r7,r3
  805858:	8009883a 	mov	r4,r16
  80585c:	880b883a 	mov	r5,r17
  805860:	1027883a 	mov	r19,r2
  805864:	1825883a 	mov	r18,r3
  805868:	080c9d40 	call	80c9d4 <__ledf2>
  80586c:	10000816 	blt	r2,zero,805890 <_dtoa_r+0x948>
  805870:	980d883a 	mov	r6,r19
  805874:	900f883a 	mov	r7,r18
  805878:	8009883a 	mov	r4,r16
  80587c:	880b883a 	mov	r5,r17
  805880:	080c8700 	call	80c870 <__eqdf2>
  805884:	103f5a1e 	bne	r2,zero,8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805888:	ad40004c 	andi	r21,r21,1
  80588c:	a83f5826 	beq	r21,zero,8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805890:	bd3fffc3 	ldbu	r20,-1(r23)
  805894:	b8bfffc4 	addi	r2,r23,-1
  805898:	1007883a 	mov	r3,r2
  80589c:	01400e44 	movi	r5,57
  8058a0:	d9800717 	ldw	r6,28(sp)
  8058a4:	00000506 	br	8058bc <_dtoa_r+0x974>
  8058a8:	18ffffc4 	addi	r3,r3,-1
  8058ac:	11824726 	beq	r2,r6,8061cc <_dtoa_r+0x1284>
  8058b0:	1d000003 	ldbu	r20,0(r3)
  8058b4:	102f883a 	mov	r23,r2
  8058b8:	10bfffc4 	addi	r2,r2,-1
  8058bc:	a1003fcc 	andi	r4,r20,255
  8058c0:	2100201c 	xori	r4,r4,128
  8058c4:	213fe004 	addi	r4,r4,-128
  8058c8:	217ff726 	beq	r4,r5,8058a8 <__alt_mem_onchip_mem+0xff7fd8a8>
  8058cc:	a2000044 	addi	r8,r20,1
  8058d0:	12000005 	stb	r8,0(r2)
  8058d4:	003f4606 	br	8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  8058d8:	d9000b17 	ldw	r4,44(sp)
  8058dc:	2000c826 	beq	r4,zero,805c00 <_dtoa_r+0xcb8>
  8058e0:	d9800317 	ldw	r6,12(sp)
  8058e4:	00c00044 	movi	r3,1
  8058e8:	1980f90e 	bge	r3,r6,805cd0 <_dtoa_r+0xd88>
  8058ec:	d8800617 	ldw	r2,24(sp)
  8058f0:	d8c00a17 	ldw	r3,40(sp)
  8058f4:	157fffc4 	addi	r21,r2,-1
  8058f8:	1d41f316 	blt	r3,r21,8060c8 <_dtoa_r+0x1180>
  8058fc:	1d6bc83a 	sub	r21,r3,r21
  805900:	d9c00617 	ldw	r7,24(sp)
  805904:	3802aa16 	blt	r7,zero,8063b0 <_dtoa_r+0x1468>
  805908:	dd000817 	ldw	r20,32(sp)
  80590c:	d8800617 	ldw	r2,24(sp)
  805910:	d8c00817 	ldw	r3,32(sp)
  805914:	01400044 	movi	r5,1
  805918:	e009883a 	mov	r4,fp
  80591c:	1887883a 	add	r3,r3,r2
  805920:	d8c00815 	stw	r3,32(sp)
  805924:	b0ad883a 	add	r22,r22,r2
  805928:	08076240 	call	807624 <__i2b>
  80592c:	1023883a 	mov	r17,r2
  805930:	a0000826 	beq	r20,zero,805954 <_dtoa_r+0xa0c>
  805934:	0580070e 	bge	zero,r22,805954 <_dtoa_r+0xa0c>
  805938:	a005883a 	mov	r2,r20
  80593c:	b500b916 	blt	r22,r20,805c24 <_dtoa_r+0xcdc>
  805940:	d9000817 	ldw	r4,32(sp)
  805944:	a0a9c83a 	sub	r20,r20,r2
  805948:	b0adc83a 	sub	r22,r22,r2
  80594c:	2089c83a 	sub	r4,r4,r2
  805950:	d9000815 	stw	r4,32(sp)
  805954:	d9800a17 	ldw	r6,40(sp)
  805958:	0181810e 	bge	zero,r6,805f60 <_dtoa_r+0x1018>
  80595c:	d9c00b17 	ldw	r7,44(sp)
  805960:	3800b326 	beq	r7,zero,805c30 <_dtoa_r+0xce8>
  805964:	a800b226 	beq	r21,zero,805c30 <_dtoa_r+0xce8>
  805968:	880b883a 	mov	r5,r17
  80596c:	a80d883a 	mov	r6,r21
  805970:	e009883a 	mov	r4,fp
  805974:	08078580 	call	807858 <__pow5mult>
  805978:	d9800917 	ldw	r6,36(sp)
  80597c:	100b883a 	mov	r5,r2
  805980:	e009883a 	mov	r4,fp
  805984:	1023883a 	mov	r17,r2
  805988:	08076600 	call	807660 <__multiply>
  80598c:	1021883a 	mov	r16,r2
  805990:	d8800a17 	ldw	r2,40(sp)
  805994:	d9400917 	ldw	r5,36(sp)
  805998:	e009883a 	mov	r4,fp
  80599c:	1545c83a 	sub	r2,r2,r21
  8059a0:	d8800a15 	stw	r2,40(sp)
  8059a4:	08072c00 	call	8072c0 <_Bfree>
  8059a8:	d8c00a17 	ldw	r3,40(sp)
  8059ac:	18009f1e 	bne	r3,zero,805c2c <_dtoa_r+0xce4>
  8059b0:	05c00044 	movi	r23,1
  8059b4:	e009883a 	mov	r4,fp
  8059b8:	b80b883a 	mov	r5,r23
  8059bc:	08076240 	call	807624 <__i2b>
  8059c0:	d9000d17 	ldw	r4,52(sp)
  8059c4:	102b883a 	mov	r21,r2
  8059c8:	2000ce26 	beq	r4,zero,805d04 <_dtoa_r+0xdbc>
  8059cc:	200d883a 	mov	r6,r4
  8059d0:	100b883a 	mov	r5,r2
  8059d4:	e009883a 	mov	r4,fp
  8059d8:	08078580 	call	807858 <__pow5mult>
  8059dc:	d9800317 	ldw	r6,12(sp)
  8059e0:	102b883a 	mov	r21,r2
  8059e4:	b981810e 	bge	r23,r6,805fec <_dtoa_r+0x10a4>
  8059e8:	0027883a 	mov	r19,zero
  8059ec:	a8800417 	ldw	r2,16(r21)
  8059f0:	05c00804 	movi	r23,32
  8059f4:	10800104 	addi	r2,r2,4
  8059f8:	1085883a 	add	r2,r2,r2
  8059fc:	1085883a 	add	r2,r2,r2
  805a00:	a885883a 	add	r2,r21,r2
  805a04:	11000017 	ldw	r4,0(r2)
  805a08:	080750c0 	call	80750c <__hi0bits>
  805a0c:	b885c83a 	sub	r2,r23,r2
  805a10:	1585883a 	add	r2,r2,r22
  805a14:	108007cc 	andi	r2,r2,31
  805a18:	1000b326 	beq	r2,zero,805ce8 <_dtoa_r+0xda0>
  805a1c:	00c00804 	movi	r3,32
  805a20:	1887c83a 	sub	r3,r3,r2
  805a24:	01000104 	movi	r4,4
  805a28:	20c2cd0e 	bge	r4,r3,806560 <_dtoa_r+0x1618>
  805a2c:	00c00704 	movi	r3,28
  805a30:	1885c83a 	sub	r2,r3,r2
  805a34:	d8c00817 	ldw	r3,32(sp)
  805a38:	a0a9883a 	add	r20,r20,r2
  805a3c:	b0ad883a 	add	r22,r22,r2
  805a40:	1887883a 	add	r3,r3,r2
  805a44:	d8c00815 	stw	r3,32(sp)
  805a48:	d9800817 	ldw	r6,32(sp)
  805a4c:	0180040e 	bge	zero,r6,805a60 <_dtoa_r+0xb18>
  805a50:	800b883a 	mov	r5,r16
  805a54:	e009883a 	mov	r4,fp
  805a58:	08079980 	call	807998 <__lshift>
  805a5c:	1021883a 	mov	r16,r2
  805a60:	0580050e 	bge	zero,r22,805a78 <_dtoa_r+0xb30>
  805a64:	a80b883a 	mov	r5,r21
  805a68:	b00d883a 	mov	r6,r22
  805a6c:	e009883a 	mov	r4,fp
  805a70:	08079980 	call	807998 <__lshift>
  805a74:	102b883a 	mov	r21,r2
  805a78:	d9c00e17 	ldw	r7,56(sp)
  805a7c:	3801211e 	bne	r7,zero,805f04 <_dtoa_r+0xfbc>
  805a80:	d9800617 	ldw	r6,24(sp)
  805a84:	0181380e 	bge	zero,r6,805f68 <_dtoa_r+0x1020>
  805a88:	d8c00b17 	ldw	r3,44(sp)
  805a8c:	1800ab1e 	bne	r3,zero,805d3c <_dtoa_r+0xdf4>
  805a90:	dc800717 	ldw	r18,28(sp)
  805a94:	dcc00617 	ldw	r19,24(sp)
  805a98:	9029883a 	mov	r20,r18
  805a9c:	00000206 	br	805aa8 <_dtoa_r+0xb60>
  805aa0:	08072e80 	call	8072e8 <__multadd>
  805aa4:	1021883a 	mov	r16,r2
  805aa8:	a80b883a 	mov	r5,r21
  805aac:	8009883a 	mov	r4,r16
  805ab0:	0804d480 	call	804d48 <quorem>
  805ab4:	10800c04 	addi	r2,r2,48
  805ab8:	90800005 	stb	r2,0(r18)
  805abc:	94800044 	addi	r18,r18,1
  805ac0:	9507c83a 	sub	r3,r18,r20
  805ac4:	000f883a 	mov	r7,zero
  805ac8:	01800284 	movi	r6,10
  805acc:	800b883a 	mov	r5,r16
  805ad0:	e009883a 	mov	r4,fp
  805ad4:	1cfff216 	blt	r3,r19,805aa0 <__alt_mem_onchip_mem+0xff7fdaa0>
  805ad8:	1011883a 	mov	r8,r2
  805adc:	d8800617 	ldw	r2,24(sp)
  805ae0:	0082370e 	bge	zero,r2,8063c0 <_dtoa_r+0x1478>
  805ae4:	d9000717 	ldw	r4,28(sp)
  805ae8:	0025883a 	mov	r18,zero
  805aec:	20af883a 	add	r23,r4,r2
  805af0:	01800044 	movi	r6,1
  805af4:	800b883a 	mov	r5,r16
  805af8:	e009883a 	mov	r4,fp
  805afc:	da001715 	stw	r8,92(sp)
  805b00:	08079980 	call	807998 <__lshift>
  805b04:	a80b883a 	mov	r5,r21
  805b08:	1009883a 	mov	r4,r2
  805b0c:	d8800915 	stw	r2,36(sp)
  805b10:	0807ae00 	call	807ae0 <__mcmp>
  805b14:	da001717 	ldw	r8,92(sp)
  805b18:	0081800e 	bge	zero,r2,80611c <_dtoa_r+0x11d4>
  805b1c:	b93fffc3 	ldbu	r4,-1(r23)
  805b20:	b8bfffc4 	addi	r2,r23,-1
  805b24:	1007883a 	mov	r3,r2
  805b28:	01800e44 	movi	r6,57
  805b2c:	d9c00717 	ldw	r7,28(sp)
  805b30:	00000506 	br	805b48 <_dtoa_r+0xc00>
  805b34:	18ffffc4 	addi	r3,r3,-1
  805b38:	11c12326 	beq	r2,r7,805fc8 <_dtoa_r+0x1080>
  805b3c:	19000003 	ldbu	r4,0(r3)
  805b40:	102f883a 	mov	r23,r2
  805b44:	10bfffc4 	addi	r2,r2,-1
  805b48:	21403fcc 	andi	r5,r4,255
  805b4c:	2940201c 	xori	r5,r5,128
  805b50:	297fe004 	addi	r5,r5,-128
  805b54:	29bff726 	beq	r5,r6,805b34 <__alt_mem_onchip_mem+0xff7fdb34>
  805b58:	21000044 	addi	r4,r4,1
  805b5c:	11000005 	stb	r4,0(r2)
  805b60:	a80b883a 	mov	r5,r21
  805b64:	e009883a 	mov	r4,fp
  805b68:	08072c00 	call	8072c0 <_Bfree>
  805b6c:	883ea026 	beq	r17,zero,8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805b70:	90000426 	beq	r18,zero,805b84 <_dtoa_r+0xc3c>
  805b74:	94400326 	beq	r18,r17,805b84 <_dtoa_r+0xc3c>
  805b78:	900b883a 	mov	r5,r18
  805b7c:	e009883a 	mov	r4,fp
  805b80:	08072c00 	call	8072c0 <_Bfree>
  805b84:	880b883a 	mov	r5,r17
  805b88:	e009883a 	mov	r4,fp
  805b8c:	08072c00 	call	8072c0 <_Bfree>
  805b90:	003e9706 	br	8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805b94:	01800044 	movi	r6,1
  805b98:	d9800e15 	stw	r6,56(sp)
  805b9c:	003d9606 	br	8051f8 <__alt_mem_onchip_mem+0xff7fd1f8>
  805ba0:	d8800817 	ldw	r2,32(sp)
  805ba4:	d8c00517 	ldw	r3,20(sp)
  805ba8:	d8000d15 	stw	zero,52(sp)
  805bac:	10c5c83a 	sub	r2,r2,r3
  805bb0:	00c9c83a 	sub	r4,zero,r3
  805bb4:	d8800815 	stw	r2,32(sp)
  805bb8:	d9000a15 	stw	r4,40(sp)
  805bbc:	003d9706 	br	80521c <__alt_mem_onchip_mem+0xff7fd21c>
  805bc0:	05adc83a 	sub	r22,zero,r22
  805bc4:	dd800815 	stw	r22,32(sp)
  805bc8:	002d883a 	mov	r22,zero
  805bcc:	003d8e06 	br	805208 <__alt_mem_onchip_mem+0xff7fd208>
  805bd0:	d9000517 	ldw	r4,20(sp)
  805bd4:	080db5c0 	call	80db5c <__floatsidf>
  805bd8:	100d883a 	mov	r6,r2
  805bdc:	180f883a 	mov	r7,r3
  805be0:	a009883a 	mov	r4,r20
  805be4:	880b883a 	mov	r5,r17
  805be8:	080c8700 	call	80c870 <__eqdf2>
  805bec:	103d7126 	beq	r2,zero,8051b4 <__alt_mem_onchip_mem+0xff7fd1b4>
  805bf0:	d9c00517 	ldw	r7,20(sp)
  805bf4:	39ffffc4 	addi	r7,r7,-1
  805bf8:	d9c00515 	stw	r7,20(sp)
  805bfc:	003d6d06 	br	8051b4 <__alt_mem_onchip_mem+0xff7fd1b4>
  805c00:	dd400a17 	ldw	r21,40(sp)
  805c04:	dd000817 	ldw	r20,32(sp)
  805c08:	0023883a 	mov	r17,zero
  805c0c:	003f4806 	br	805930 <__alt_mem_onchip_mem+0xff7fd930>
  805c10:	10e3c83a 	sub	r17,r2,r3
  805c14:	9448983a 	sll	r4,r18,r17
  805c18:	003d3206 	br	8050e4 <__alt_mem_onchip_mem+0xff7fd0e4>
  805c1c:	d8000e15 	stw	zero,56(sp)
  805c20:	003d7506 	br	8051f8 <__alt_mem_onchip_mem+0xff7fd1f8>
  805c24:	b005883a 	mov	r2,r22
  805c28:	003f4506 	br	805940 <__alt_mem_onchip_mem+0xff7fd940>
  805c2c:	dc000915 	stw	r16,36(sp)
  805c30:	d9800a17 	ldw	r6,40(sp)
  805c34:	d9400917 	ldw	r5,36(sp)
  805c38:	e009883a 	mov	r4,fp
  805c3c:	08078580 	call	807858 <__pow5mult>
  805c40:	1021883a 	mov	r16,r2
  805c44:	003f5a06 	br	8059b0 <__alt_mem_onchip_mem+0xff7fd9b0>
  805c48:	01c00044 	movi	r7,1
  805c4c:	d9c00b15 	stw	r7,44(sp)
  805c50:	d8802217 	ldw	r2,136(sp)
  805c54:	0081280e 	bge	zero,r2,8060f8 <_dtoa_r+0x11b0>
  805c58:	100d883a 	mov	r6,r2
  805c5c:	1021883a 	mov	r16,r2
  805c60:	d8800c15 	stw	r2,48(sp)
  805c64:	d8800615 	stw	r2,24(sp)
  805c68:	003d8806 	br	80528c <__alt_mem_onchip_mem+0xff7fd28c>
  805c6c:	d8800617 	ldw	r2,24(sp)
  805c70:	00be9b16 	blt	zero,r2,8056e0 <__alt_mem_onchip_mem+0xff7fd6e0>
  805c74:	10010f1e 	bne	r2,zero,8060b4 <_dtoa_r+0x116c>
  805c78:	880b883a 	mov	r5,r17
  805c7c:	000d883a 	mov	r6,zero
  805c80:	01d00534 	movhi	r7,16404
  805c84:	8009883a 	mov	r4,r16
  805c88:	080cac80 	call	80cac8 <__muldf3>
  805c8c:	900d883a 	mov	r6,r18
  805c90:	980f883a 	mov	r7,r19
  805c94:	1009883a 	mov	r4,r2
  805c98:	180b883a 	mov	r5,r3
  805c9c:	080c8f80 	call	80c8f8 <__gedf2>
  805ca0:	002b883a 	mov	r21,zero
  805ca4:	0023883a 	mov	r17,zero
  805ca8:	1000bf16 	blt	r2,zero,805fa8 <_dtoa_r+0x1060>
  805cac:	d9802217 	ldw	r6,136(sp)
  805cb0:	ddc00717 	ldw	r23,28(sp)
  805cb4:	018c303a 	nor	r6,zero,r6
  805cb8:	d9800515 	stw	r6,20(sp)
  805cbc:	a80b883a 	mov	r5,r21
  805cc0:	e009883a 	mov	r4,fp
  805cc4:	08072c00 	call	8072c0 <_Bfree>
  805cc8:	883e4926 	beq	r17,zero,8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805ccc:	003fad06 	br	805b84 <__alt_mem_onchip_mem+0xff7fdb84>
  805cd0:	d9c01117 	ldw	r7,68(sp)
  805cd4:	3801bc26 	beq	r7,zero,8063c8 <_dtoa_r+0x1480>
  805cd8:	10810cc4 	addi	r2,r2,1075
  805cdc:	dd400a17 	ldw	r21,40(sp)
  805ce0:	dd000817 	ldw	r20,32(sp)
  805ce4:	003f0a06 	br	805910 <__alt_mem_onchip_mem+0xff7fd910>
  805ce8:	00800704 	movi	r2,28
  805cec:	d9000817 	ldw	r4,32(sp)
  805cf0:	a0a9883a 	add	r20,r20,r2
  805cf4:	b0ad883a 	add	r22,r22,r2
  805cf8:	2089883a 	add	r4,r4,r2
  805cfc:	d9000815 	stw	r4,32(sp)
  805d00:	003f5106 	br	805a48 <__alt_mem_onchip_mem+0xff7fda48>
  805d04:	d8c00317 	ldw	r3,12(sp)
  805d08:	b8c1fc0e 	bge	r23,r3,8064fc <_dtoa_r+0x15b4>
  805d0c:	0027883a 	mov	r19,zero
  805d10:	b805883a 	mov	r2,r23
  805d14:	003f3e06 	br	805a10 <__alt_mem_onchip_mem+0xff7fda10>
  805d18:	880b883a 	mov	r5,r17
  805d1c:	e009883a 	mov	r4,fp
  805d20:	000f883a 	mov	r7,zero
  805d24:	01800284 	movi	r6,10
  805d28:	08072e80 	call	8072e8 <__multadd>
  805d2c:	d9000c17 	ldw	r4,48(sp)
  805d30:	1023883a 	mov	r17,r2
  805d34:	0102040e 	bge	zero,r4,806548 <_dtoa_r+0x1600>
  805d38:	d9000615 	stw	r4,24(sp)
  805d3c:	0500050e 	bge	zero,r20,805d54 <_dtoa_r+0xe0c>
  805d40:	880b883a 	mov	r5,r17
  805d44:	a00d883a 	mov	r6,r20
  805d48:	e009883a 	mov	r4,fp
  805d4c:	08079980 	call	807998 <__lshift>
  805d50:	1023883a 	mov	r17,r2
  805d54:	9801241e 	bne	r19,zero,8061e8 <_dtoa_r+0x12a0>
  805d58:	8829883a 	mov	r20,r17
  805d5c:	d9000617 	ldw	r4,24(sp)
  805d60:	dcc00717 	ldw	r19,28(sp)
  805d64:	9480004c 	andi	r18,r18,1
  805d68:	20bfffc4 	addi	r2,r4,-1
  805d6c:	9885883a 	add	r2,r19,r2
  805d70:	d8800415 	stw	r2,16(sp)
  805d74:	dc800615 	stw	r18,24(sp)
  805d78:	a80b883a 	mov	r5,r21
  805d7c:	8009883a 	mov	r4,r16
  805d80:	0804d480 	call	804d48 <quorem>
  805d84:	880b883a 	mov	r5,r17
  805d88:	8009883a 	mov	r4,r16
  805d8c:	102f883a 	mov	r23,r2
  805d90:	0807ae00 	call	807ae0 <__mcmp>
  805d94:	a80b883a 	mov	r5,r21
  805d98:	a00d883a 	mov	r6,r20
  805d9c:	e009883a 	mov	r4,fp
  805da0:	102d883a 	mov	r22,r2
  805da4:	0807b400 	call	807b40 <__mdiff>
  805da8:	1007883a 	mov	r3,r2
  805dac:	10800317 	ldw	r2,12(r2)
  805db0:	bc800c04 	addi	r18,r23,48
  805db4:	180b883a 	mov	r5,r3
  805db8:	10004e1e 	bne	r2,zero,805ef4 <_dtoa_r+0xfac>
  805dbc:	8009883a 	mov	r4,r16
  805dc0:	d8c01615 	stw	r3,88(sp)
  805dc4:	0807ae00 	call	807ae0 <__mcmp>
  805dc8:	d8c01617 	ldw	r3,88(sp)
  805dcc:	e009883a 	mov	r4,fp
  805dd0:	d8801615 	stw	r2,88(sp)
  805dd4:	180b883a 	mov	r5,r3
  805dd8:	08072c00 	call	8072c0 <_Bfree>
  805ddc:	d8801617 	ldw	r2,88(sp)
  805de0:	1000041e 	bne	r2,zero,805df4 <_dtoa_r+0xeac>
  805de4:	d9800317 	ldw	r6,12(sp)
  805de8:	3000021e 	bne	r6,zero,805df4 <_dtoa_r+0xeac>
  805dec:	d8c00617 	ldw	r3,24(sp)
  805df0:	18003726 	beq	r3,zero,805ed0 <_dtoa_r+0xf88>
  805df4:	b0002016 	blt	r22,zero,805e78 <_dtoa_r+0xf30>
  805df8:	b000041e 	bne	r22,zero,805e0c <_dtoa_r+0xec4>
  805dfc:	d9000317 	ldw	r4,12(sp)
  805e00:	2000021e 	bne	r4,zero,805e0c <_dtoa_r+0xec4>
  805e04:	d8c00617 	ldw	r3,24(sp)
  805e08:	18001b26 	beq	r3,zero,805e78 <_dtoa_r+0xf30>
  805e0c:	00810716 	blt	zero,r2,80622c <_dtoa_r+0x12e4>
  805e10:	d8c00417 	ldw	r3,16(sp)
  805e14:	9d800044 	addi	r22,r19,1
  805e18:	9c800005 	stb	r18,0(r19)
  805e1c:	b02f883a 	mov	r23,r22
  805e20:	98c10626 	beq	r19,r3,80623c <_dtoa_r+0x12f4>
  805e24:	800b883a 	mov	r5,r16
  805e28:	000f883a 	mov	r7,zero
  805e2c:	01800284 	movi	r6,10
  805e30:	e009883a 	mov	r4,fp
  805e34:	08072e80 	call	8072e8 <__multadd>
  805e38:	1021883a 	mov	r16,r2
  805e3c:	000f883a 	mov	r7,zero
  805e40:	01800284 	movi	r6,10
  805e44:	880b883a 	mov	r5,r17
  805e48:	e009883a 	mov	r4,fp
  805e4c:	8d002526 	beq	r17,r20,805ee4 <_dtoa_r+0xf9c>
  805e50:	08072e80 	call	8072e8 <__multadd>
  805e54:	a00b883a 	mov	r5,r20
  805e58:	000f883a 	mov	r7,zero
  805e5c:	01800284 	movi	r6,10
  805e60:	e009883a 	mov	r4,fp
  805e64:	1023883a 	mov	r17,r2
  805e68:	08072e80 	call	8072e8 <__multadd>
  805e6c:	1029883a 	mov	r20,r2
  805e70:	b027883a 	mov	r19,r22
  805e74:	003fc006 	br	805d78 <__alt_mem_onchip_mem+0xff7fdd78>
  805e78:	9011883a 	mov	r8,r18
  805e7c:	00800e0e 	bge	zero,r2,805eb8 <_dtoa_r+0xf70>
  805e80:	800b883a 	mov	r5,r16
  805e84:	01800044 	movi	r6,1
  805e88:	e009883a 	mov	r4,fp
  805e8c:	da001715 	stw	r8,92(sp)
  805e90:	08079980 	call	807998 <__lshift>
  805e94:	a80b883a 	mov	r5,r21
  805e98:	1009883a 	mov	r4,r2
  805e9c:	1021883a 	mov	r16,r2
  805ea0:	0807ae00 	call	807ae0 <__mcmp>
  805ea4:	da001717 	ldw	r8,92(sp)
  805ea8:	0081960e 	bge	zero,r2,806504 <_dtoa_r+0x15bc>
  805eac:	00800e44 	movi	r2,57
  805eb0:	40817026 	beq	r8,r2,806474 <_dtoa_r+0x152c>
  805eb4:	ba000c44 	addi	r8,r23,49
  805eb8:	8825883a 	mov	r18,r17
  805ebc:	9dc00044 	addi	r23,r19,1
  805ec0:	9a000005 	stb	r8,0(r19)
  805ec4:	a023883a 	mov	r17,r20
  805ec8:	dc000915 	stw	r16,36(sp)
  805ecc:	003f2406 	br	805b60 <__alt_mem_onchip_mem+0xff7fdb60>
  805ed0:	00800e44 	movi	r2,57
  805ed4:	9011883a 	mov	r8,r18
  805ed8:	90816626 	beq	r18,r2,806474 <_dtoa_r+0x152c>
  805edc:	05bff516 	blt	zero,r22,805eb4 <__alt_mem_onchip_mem+0xff7fdeb4>
  805ee0:	003ff506 	br	805eb8 <__alt_mem_onchip_mem+0xff7fdeb8>
  805ee4:	08072e80 	call	8072e8 <__multadd>
  805ee8:	1023883a 	mov	r17,r2
  805eec:	1029883a 	mov	r20,r2
  805ef0:	003fdf06 	br	805e70 <__alt_mem_onchip_mem+0xff7fde70>
  805ef4:	e009883a 	mov	r4,fp
  805ef8:	08072c00 	call	8072c0 <_Bfree>
  805efc:	00800044 	movi	r2,1
  805f00:	003fbc06 	br	805df4 <__alt_mem_onchip_mem+0xff7fddf4>
  805f04:	a80b883a 	mov	r5,r21
  805f08:	8009883a 	mov	r4,r16
  805f0c:	0807ae00 	call	807ae0 <__mcmp>
  805f10:	103edb0e 	bge	r2,zero,805a80 <__alt_mem_onchip_mem+0xff7fda80>
  805f14:	800b883a 	mov	r5,r16
  805f18:	000f883a 	mov	r7,zero
  805f1c:	01800284 	movi	r6,10
  805f20:	e009883a 	mov	r4,fp
  805f24:	08072e80 	call	8072e8 <__multadd>
  805f28:	1021883a 	mov	r16,r2
  805f2c:	d8800517 	ldw	r2,20(sp)
  805f30:	d8c00b17 	ldw	r3,44(sp)
  805f34:	10bfffc4 	addi	r2,r2,-1
  805f38:	d8800515 	stw	r2,20(sp)
  805f3c:	183f761e 	bne	r3,zero,805d18 <__alt_mem_onchip_mem+0xff7fdd18>
  805f40:	d9000c17 	ldw	r4,48(sp)
  805f44:	0101730e 	bge	zero,r4,806514 <_dtoa_r+0x15cc>
  805f48:	d9000615 	stw	r4,24(sp)
  805f4c:	003ed006 	br	805a90 <__alt_mem_onchip_mem+0xff7fda90>
  805f50:	00800084 	movi	r2,2
  805f54:	3081861e 	bne	r6,r2,806570 <_dtoa_r+0x1628>
  805f58:	d8000b15 	stw	zero,44(sp)
  805f5c:	003f3c06 	br	805c50 <__alt_mem_onchip_mem+0xff7fdc50>
  805f60:	dc000917 	ldw	r16,36(sp)
  805f64:	003e9206 	br	8059b0 <__alt_mem_onchip_mem+0xff7fd9b0>
  805f68:	d9c00317 	ldw	r7,12(sp)
  805f6c:	00800084 	movi	r2,2
  805f70:	11fec50e 	bge	r2,r7,805a88 <__alt_mem_onchip_mem+0xff7fda88>
  805f74:	d9000617 	ldw	r4,24(sp)
  805f78:	20013c1e 	bne	r4,zero,80646c <_dtoa_r+0x1524>
  805f7c:	a80b883a 	mov	r5,r21
  805f80:	000f883a 	mov	r7,zero
  805f84:	01800144 	movi	r6,5
  805f88:	e009883a 	mov	r4,fp
  805f8c:	08072e80 	call	8072e8 <__multadd>
  805f90:	100b883a 	mov	r5,r2
  805f94:	8009883a 	mov	r4,r16
  805f98:	102b883a 	mov	r21,r2
  805f9c:	0807ae00 	call	807ae0 <__mcmp>
  805fa0:	dc000915 	stw	r16,36(sp)
  805fa4:	00bf410e 	bge	zero,r2,805cac <__alt_mem_onchip_mem+0xff7fdcac>
  805fa8:	d9c00717 	ldw	r7,28(sp)
  805fac:	00800c44 	movi	r2,49
  805fb0:	38800005 	stb	r2,0(r7)
  805fb4:	d8800517 	ldw	r2,20(sp)
  805fb8:	3dc00044 	addi	r23,r7,1
  805fbc:	10800044 	addi	r2,r2,1
  805fc0:	d8800515 	stw	r2,20(sp)
  805fc4:	003f3d06 	br	805cbc <__alt_mem_onchip_mem+0xff7fdcbc>
  805fc8:	d9800517 	ldw	r6,20(sp)
  805fcc:	d9c00717 	ldw	r7,28(sp)
  805fd0:	00800c44 	movi	r2,49
  805fd4:	31800044 	addi	r6,r6,1
  805fd8:	d9800515 	stw	r6,20(sp)
  805fdc:	38800005 	stb	r2,0(r7)
  805fe0:	003edf06 	br	805b60 <__alt_mem_onchip_mem+0xff7fdb60>
  805fe4:	d8000b15 	stw	zero,44(sp)
  805fe8:	003c9f06 	br	805268 <__alt_mem_onchip_mem+0xff7fd268>
  805fec:	903e7e1e 	bne	r18,zero,8059e8 <__alt_mem_onchip_mem+0xff7fd9e8>
  805ff0:	00800434 	movhi	r2,16
  805ff4:	10bfffc4 	addi	r2,r2,-1
  805ff8:	9884703a 	and	r2,r19,r2
  805ffc:	1000ea1e 	bne	r2,zero,8063a8 <_dtoa_r+0x1460>
  806000:	9cdffc2c 	andhi	r19,r19,32752
  806004:	9800e826 	beq	r19,zero,8063a8 <_dtoa_r+0x1460>
  806008:	d9c00817 	ldw	r7,32(sp)
  80600c:	b5800044 	addi	r22,r22,1
  806010:	04c00044 	movi	r19,1
  806014:	39c00044 	addi	r7,r7,1
  806018:	d9c00815 	stw	r7,32(sp)
  80601c:	d8800d17 	ldw	r2,52(sp)
  806020:	103e721e 	bne	r2,zero,8059ec <__alt_mem_onchip_mem+0xff7fd9ec>
  806024:	00800044 	movi	r2,1
  806028:	003e7906 	br	805a10 <__alt_mem_onchip_mem+0xff7fda10>
  80602c:	8009883a 	mov	r4,r16
  806030:	080db5c0 	call	80db5c <__floatsidf>
  806034:	d9800f17 	ldw	r6,60(sp)
  806038:	d9c01017 	ldw	r7,64(sp)
  80603c:	1009883a 	mov	r4,r2
  806040:	180b883a 	mov	r5,r3
  806044:	080cac80 	call	80cac8 <__muldf3>
  806048:	000d883a 	mov	r6,zero
  80604c:	01d00734 	movhi	r7,16412
  806050:	1009883a 	mov	r4,r2
  806054:	180b883a 	mov	r5,r3
  806058:	080b6dc0 	call	80b6dc <__adddf3>
  80605c:	047f3034 	movhi	r17,64704
  806060:	1021883a 	mov	r16,r2
  806064:	1c63883a 	add	r17,r3,r17
  806068:	d9000f17 	ldw	r4,60(sp)
  80606c:	d9401017 	ldw	r5,64(sp)
  806070:	000d883a 	mov	r6,zero
  806074:	01d00534 	movhi	r7,16404
  806078:	080d1e00 	call	80d1e0 <__subdf3>
  80607c:	800d883a 	mov	r6,r16
  806080:	880f883a 	mov	r7,r17
  806084:	1009883a 	mov	r4,r2
  806088:	180b883a 	mov	r5,r3
  80608c:	102b883a 	mov	r21,r2
  806090:	1829883a 	mov	r20,r3
  806094:	080c8f80 	call	80c8f8 <__gedf2>
  806098:	00806c16 	blt	zero,r2,80624c <_dtoa_r+0x1304>
  80609c:	89e0003c 	xorhi	r7,r17,32768
  8060a0:	800d883a 	mov	r6,r16
  8060a4:	a809883a 	mov	r4,r21
  8060a8:	a00b883a 	mov	r5,r20
  8060ac:	080c9d40 	call	80c9d4 <__ledf2>
  8060b0:	103d7e0e 	bge	r2,zero,8056ac <__alt_mem_onchip_mem+0xff7fd6ac>
  8060b4:	002b883a 	mov	r21,zero
  8060b8:	0023883a 	mov	r17,zero
  8060bc:	003efb06 	br	805cac <__alt_mem_onchip_mem+0xff7fdcac>
  8060c0:	d8800717 	ldw	r2,28(sp)
  8060c4:	003bd006 	br	805008 <__alt_mem_onchip_mem+0xff7fd008>
  8060c8:	d9000a17 	ldw	r4,40(sp)
  8060cc:	d9800d17 	ldw	r6,52(sp)
  8060d0:	dd400a15 	stw	r21,40(sp)
  8060d4:	a905c83a 	sub	r2,r21,r4
  8060d8:	308d883a 	add	r6,r6,r2
  8060dc:	d9800d15 	stw	r6,52(sp)
  8060e0:	002b883a 	mov	r21,zero
  8060e4:	003e0606 	br	805900 <__alt_mem_onchip_mem+0xff7fd900>
  8060e8:	9023883a 	mov	r17,r18
  8060ec:	9829883a 	mov	r20,r19
  8060f0:	04000084 	movi	r16,2
  8060f4:	003c9206 	br	805340 <__alt_mem_onchip_mem+0xff7fd340>
  8060f8:	04000044 	movi	r16,1
  8060fc:	dc000c15 	stw	r16,48(sp)
  806100:	dc000615 	stw	r16,24(sp)
  806104:	dc002215 	stw	r16,136(sp)
  806108:	e0001115 	stw	zero,68(fp)
  80610c:	000b883a 	mov	r5,zero
  806110:	003c6906 	br	8052b8 <__alt_mem_onchip_mem+0xff7fd2b8>
  806114:	3021883a 	mov	r16,r6
  806118:	003ffb06 	br	806108 <__alt_mem_onchip_mem+0xff7fe108>
  80611c:	1000021e 	bne	r2,zero,806128 <_dtoa_r+0x11e0>
  806120:	4200004c 	andi	r8,r8,1
  806124:	403e7d1e 	bne	r8,zero,805b1c <__alt_mem_onchip_mem+0xff7fdb1c>
  806128:	01000c04 	movi	r4,48
  80612c:	00000106 	br	806134 <_dtoa_r+0x11ec>
  806130:	102f883a 	mov	r23,r2
  806134:	b8bfffc4 	addi	r2,r23,-1
  806138:	10c00007 	ldb	r3,0(r2)
  80613c:	193ffc26 	beq	r3,r4,806130 <__alt_mem_onchip_mem+0xff7fe130>
  806140:	003e8706 	br	805b60 <__alt_mem_onchip_mem+0xff7fdb60>
  806144:	d8800517 	ldw	r2,20(sp)
  806148:	00a3c83a 	sub	r17,zero,r2
  80614c:	8800a426 	beq	r17,zero,8063e0 <_dtoa_r+0x1498>
  806150:	888003cc 	andi	r2,r17,15
  806154:	100490fa 	slli	r2,r2,3
  806158:	00c02074 	movhi	r3,129
  80615c:	18c84104 	addi	r3,r3,8452
  806160:	1885883a 	add	r2,r3,r2
  806164:	11800017 	ldw	r6,0(r2)
  806168:	11c00117 	ldw	r7,4(r2)
  80616c:	9009883a 	mov	r4,r18
  806170:	980b883a 	mov	r5,r19
  806174:	8823d13a 	srai	r17,r17,4
  806178:	080cac80 	call	80cac8 <__muldf3>
  80617c:	d8800f15 	stw	r2,60(sp)
  806180:	d8c01015 	stw	r3,64(sp)
  806184:	8800e826 	beq	r17,zero,806528 <_dtoa_r+0x15e0>
  806188:	05002074 	movhi	r20,129
  80618c:	a5083704 	addi	r20,r20,8412
  806190:	04000084 	movi	r16,2
  806194:	8980004c 	andi	r6,r17,1
  806198:	1009883a 	mov	r4,r2
  80619c:	8823d07a 	srai	r17,r17,1
  8061a0:	180b883a 	mov	r5,r3
  8061a4:	30000426 	beq	r6,zero,8061b8 <_dtoa_r+0x1270>
  8061a8:	a1800017 	ldw	r6,0(r20)
  8061ac:	a1c00117 	ldw	r7,4(r20)
  8061b0:	84000044 	addi	r16,r16,1
  8061b4:	080cac80 	call	80cac8 <__muldf3>
  8061b8:	a5000204 	addi	r20,r20,8
  8061bc:	883ff51e 	bne	r17,zero,806194 <__alt_mem_onchip_mem+0xff7fe194>
  8061c0:	d8800f15 	stw	r2,60(sp)
  8061c4:	d8c01015 	stw	r3,64(sp)
  8061c8:	003c7606 	br	8053a4 <__alt_mem_onchip_mem+0xff7fd3a4>
  8061cc:	00c00c04 	movi	r3,48
  8061d0:	10c00005 	stb	r3,0(r2)
  8061d4:	d8c00517 	ldw	r3,20(sp)
  8061d8:	bd3fffc3 	ldbu	r20,-1(r23)
  8061dc:	18c00044 	addi	r3,r3,1
  8061e0:	d8c00515 	stw	r3,20(sp)
  8061e4:	003db906 	br	8058cc <__alt_mem_onchip_mem+0xff7fd8cc>
  8061e8:	89400117 	ldw	r5,4(r17)
  8061ec:	e009883a 	mov	r4,fp
  8061f0:	08072180 	call	807218 <_Balloc>
  8061f4:	89800417 	ldw	r6,16(r17)
  8061f8:	89400304 	addi	r5,r17,12
  8061fc:	11000304 	addi	r4,r2,12
  806200:	31800084 	addi	r6,r6,2
  806204:	318d883a 	add	r6,r6,r6
  806208:	318d883a 	add	r6,r6,r6
  80620c:	1027883a 	mov	r19,r2
  806210:	08070d00 	call	8070d0 <memcpy>
  806214:	01800044 	movi	r6,1
  806218:	980b883a 	mov	r5,r19
  80621c:	e009883a 	mov	r4,fp
  806220:	08079980 	call	807998 <__lshift>
  806224:	1029883a 	mov	r20,r2
  806228:	003ecc06 	br	805d5c <__alt_mem_onchip_mem+0xff7fdd5c>
  80622c:	00800e44 	movi	r2,57
  806230:	90809026 	beq	r18,r2,806474 <_dtoa_r+0x152c>
  806234:	92000044 	addi	r8,r18,1
  806238:	003f1f06 	br	805eb8 <__alt_mem_onchip_mem+0xff7fdeb8>
  80623c:	9011883a 	mov	r8,r18
  806240:	8825883a 	mov	r18,r17
  806244:	a023883a 	mov	r17,r20
  806248:	003e2906 	br	805af0 <__alt_mem_onchip_mem+0xff7fdaf0>
  80624c:	002b883a 	mov	r21,zero
  806250:	0023883a 	mov	r17,zero
  806254:	003f5406 	br	805fa8 <__alt_mem_onchip_mem+0xff7fdfa8>
  806258:	61bfffc4 	addi	r6,r12,-1
  80625c:	300490fa 	slli	r2,r6,3
  806260:	00c02074 	movhi	r3,129
  806264:	18c84104 	addi	r3,r3,8452
  806268:	1885883a 	add	r2,r3,r2
  80626c:	11000017 	ldw	r4,0(r2)
  806270:	11400117 	ldw	r5,4(r2)
  806274:	d8800717 	ldw	r2,28(sp)
  806278:	880f883a 	mov	r7,r17
  80627c:	d9801215 	stw	r6,72(sp)
  806280:	800d883a 	mov	r6,r16
  806284:	db001615 	stw	r12,88(sp)
  806288:	15c00044 	addi	r23,r2,1
  80628c:	080cac80 	call	80cac8 <__muldf3>
  806290:	d9401017 	ldw	r5,64(sp)
  806294:	d9000f17 	ldw	r4,60(sp)
  806298:	d8c01515 	stw	r3,84(sp)
  80629c:	d8801415 	stw	r2,80(sp)
  8062a0:	080dadc0 	call	80dadc <__fixdfsi>
  8062a4:	1009883a 	mov	r4,r2
  8062a8:	1021883a 	mov	r16,r2
  8062ac:	080db5c0 	call	80db5c <__floatsidf>
  8062b0:	d9000f17 	ldw	r4,60(sp)
  8062b4:	d9401017 	ldw	r5,64(sp)
  8062b8:	100d883a 	mov	r6,r2
  8062bc:	180f883a 	mov	r7,r3
  8062c0:	080d1e00 	call	80d1e0 <__subdf3>
  8062c4:	1829883a 	mov	r20,r3
  8062c8:	d8c00717 	ldw	r3,28(sp)
  8062cc:	84000c04 	addi	r16,r16,48
  8062d0:	1023883a 	mov	r17,r2
  8062d4:	1c000005 	stb	r16,0(r3)
  8062d8:	db001617 	ldw	r12,88(sp)
  8062dc:	00800044 	movi	r2,1
  8062e0:	60802226 	beq	r12,r2,80636c <_dtoa_r+0x1424>
  8062e4:	d9c00717 	ldw	r7,28(sp)
  8062e8:	8805883a 	mov	r2,r17
  8062ec:	b82b883a 	mov	r21,r23
  8062f0:	3b19883a 	add	r12,r7,r12
  8062f4:	6023883a 	mov	r17,r12
  8062f8:	a007883a 	mov	r3,r20
  8062fc:	dc800f15 	stw	r18,60(sp)
  806300:	000d883a 	mov	r6,zero
  806304:	01d00934 	movhi	r7,16420
  806308:	1009883a 	mov	r4,r2
  80630c:	180b883a 	mov	r5,r3
  806310:	080cac80 	call	80cac8 <__muldf3>
  806314:	180b883a 	mov	r5,r3
  806318:	1009883a 	mov	r4,r2
  80631c:	1829883a 	mov	r20,r3
  806320:	1025883a 	mov	r18,r2
  806324:	080dadc0 	call	80dadc <__fixdfsi>
  806328:	1009883a 	mov	r4,r2
  80632c:	1021883a 	mov	r16,r2
  806330:	080db5c0 	call	80db5c <__floatsidf>
  806334:	100d883a 	mov	r6,r2
  806338:	180f883a 	mov	r7,r3
  80633c:	9009883a 	mov	r4,r18
  806340:	a00b883a 	mov	r5,r20
  806344:	84000c04 	addi	r16,r16,48
  806348:	080d1e00 	call	80d1e0 <__subdf3>
  80634c:	ad400044 	addi	r21,r21,1
  806350:	ac3fffc5 	stb	r16,-1(r21)
  806354:	ac7fea1e 	bne	r21,r17,806300 <__alt_mem_onchip_mem+0xff7fe300>
  806358:	1023883a 	mov	r17,r2
  80635c:	d8801217 	ldw	r2,72(sp)
  806360:	dc800f17 	ldw	r18,60(sp)
  806364:	1829883a 	mov	r20,r3
  806368:	b8af883a 	add	r23,r23,r2
  80636c:	d9001417 	ldw	r4,80(sp)
  806370:	d9401517 	ldw	r5,84(sp)
  806374:	000d883a 	mov	r6,zero
  806378:	01cff834 	movhi	r7,16352
  80637c:	080b6dc0 	call	80b6dc <__adddf3>
  806380:	880d883a 	mov	r6,r17
  806384:	a00f883a 	mov	r7,r20
  806388:	1009883a 	mov	r4,r2
  80638c:	180b883a 	mov	r5,r3
  806390:	080c9d40 	call	80c9d4 <__ledf2>
  806394:	10003e0e 	bge	r2,zero,806490 <_dtoa_r+0x1548>
  806398:	d9001317 	ldw	r4,76(sp)
  80639c:	bd3fffc3 	ldbu	r20,-1(r23)
  8063a0:	d9000515 	stw	r4,20(sp)
  8063a4:	003d3b06 	br	805894 <__alt_mem_onchip_mem+0xff7fd894>
  8063a8:	0027883a 	mov	r19,zero
  8063ac:	003f1b06 	br	80601c <__alt_mem_onchip_mem+0xff7fe01c>
  8063b0:	d8800817 	ldw	r2,32(sp)
  8063b4:	11e9c83a 	sub	r20,r2,r7
  8063b8:	0005883a 	mov	r2,zero
  8063bc:	003d5406 	br	805910 <__alt_mem_onchip_mem+0xff7fd910>
  8063c0:	00800044 	movi	r2,1
  8063c4:	003dc706 	br	805ae4 <__alt_mem_onchip_mem+0xff7fdae4>
  8063c8:	d8c00217 	ldw	r3,8(sp)
  8063cc:	00800d84 	movi	r2,54
  8063d0:	dd400a17 	ldw	r21,40(sp)
  8063d4:	10c5c83a 	sub	r2,r2,r3
  8063d8:	dd000817 	ldw	r20,32(sp)
  8063dc:	003d4c06 	br	805910 <__alt_mem_onchip_mem+0xff7fd910>
  8063e0:	dc800f15 	stw	r18,60(sp)
  8063e4:	dcc01015 	stw	r19,64(sp)
  8063e8:	04000084 	movi	r16,2
  8063ec:	003bed06 	br	8053a4 <__alt_mem_onchip_mem+0xff7fd3a4>
  8063f0:	d9000617 	ldw	r4,24(sp)
  8063f4:	203f0d26 	beq	r4,zero,80602c <__alt_mem_onchip_mem+0xff7fe02c>
  8063f8:	d9800c17 	ldw	r6,48(sp)
  8063fc:	01bcab0e 	bge	zero,r6,8056ac <__alt_mem_onchip_mem+0xff7fd6ac>
  806400:	d9401017 	ldw	r5,64(sp)
  806404:	d9000f17 	ldw	r4,60(sp)
  806408:	000d883a 	mov	r6,zero
  80640c:	01d00934 	movhi	r7,16420
  806410:	080cac80 	call	80cac8 <__muldf3>
  806414:	81000044 	addi	r4,r16,1
  806418:	d8800f15 	stw	r2,60(sp)
  80641c:	d8c01015 	stw	r3,64(sp)
  806420:	080db5c0 	call	80db5c <__floatsidf>
  806424:	d9800f17 	ldw	r6,60(sp)
  806428:	d9c01017 	ldw	r7,64(sp)
  80642c:	1009883a 	mov	r4,r2
  806430:	180b883a 	mov	r5,r3
  806434:	080cac80 	call	80cac8 <__muldf3>
  806438:	01d00734 	movhi	r7,16412
  80643c:	000d883a 	mov	r6,zero
  806440:	1009883a 	mov	r4,r2
  806444:	180b883a 	mov	r5,r3
  806448:	080b6dc0 	call	80b6dc <__adddf3>
  80644c:	d9c00517 	ldw	r7,20(sp)
  806450:	047f3034 	movhi	r17,64704
  806454:	1021883a 	mov	r16,r2
  806458:	39ffffc4 	addi	r7,r7,-1
  80645c:	d9c01315 	stw	r7,76(sp)
  806460:	1c63883a 	add	r17,r3,r17
  806464:	db000c17 	ldw	r12,48(sp)
  806468:	003bea06 	br	805414 <__alt_mem_onchip_mem+0xff7fd414>
  80646c:	dc000915 	stw	r16,36(sp)
  806470:	003e0e06 	br	805cac <__alt_mem_onchip_mem+0xff7fdcac>
  806474:	01000e44 	movi	r4,57
  806478:	8825883a 	mov	r18,r17
  80647c:	9dc00044 	addi	r23,r19,1
  806480:	99000005 	stb	r4,0(r19)
  806484:	a023883a 	mov	r17,r20
  806488:	dc000915 	stw	r16,36(sp)
  80648c:	003da406 	br	805b20 <__alt_mem_onchip_mem+0xff7fdb20>
  806490:	d9801417 	ldw	r6,80(sp)
  806494:	d9c01517 	ldw	r7,84(sp)
  806498:	0009883a 	mov	r4,zero
  80649c:	014ff834 	movhi	r5,16352
  8064a0:	080d1e00 	call	80d1e0 <__subdf3>
  8064a4:	880d883a 	mov	r6,r17
  8064a8:	a00f883a 	mov	r7,r20
  8064ac:	1009883a 	mov	r4,r2
  8064b0:	180b883a 	mov	r5,r3
  8064b4:	080c8f80 	call	80c8f8 <__gedf2>
  8064b8:	00bc7c0e 	bge	zero,r2,8056ac <__alt_mem_onchip_mem+0xff7fd6ac>
  8064bc:	01000c04 	movi	r4,48
  8064c0:	00000106 	br	8064c8 <_dtoa_r+0x1580>
  8064c4:	102f883a 	mov	r23,r2
  8064c8:	b8bfffc4 	addi	r2,r23,-1
  8064cc:	10c00007 	ldb	r3,0(r2)
  8064d0:	193ffc26 	beq	r3,r4,8064c4 <__alt_mem_onchip_mem+0xff7fe4c4>
  8064d4:	d9801317 	ldw	r6,76(sp)
  8064d8:	d9800515 	stw	r6,20(sp)
  8064dc:	003c4406 	br	8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  8064e0:	d9801317 	ldw	r6,76(sp)
  8064e4:	d9800515 	stw	r6,20(sp)
  8064e8:	003cea06 	br	805894 <__alt_mem_onchip_mem+0xff7fd894>
  8064ec:	dd800f17 	ldw	r22,60(sp)
  8064f0:	dcc01017 	ldw	r19,64(sp)
  8064f4:	dc801217 	ldw	r18,72(sp)
  8064f8:	003c6c06 	br	8056ac <__alt_mem_onchip_mem+0xff7fd6ac>
  8064fc:	903e031e 	bne	r18,zero,805d0c <__alt_mem_onchip_mem+0xff7fdd0c>
  806500:	003ebb06 	br	805ff0 <__alt_mem_onchip_mem+0xff7fdff0>
  806504:	103e6c1e 	bne	r2,zero,805eb8 <__alt_mem_onchip_mem+0xff7fdeb8>
  806508:	4080004c 	andi	r2,r8,1
  80650c:	103e6a26 	beq	r2,zero,805eb8 <__alt_mem_onchip_mem+0xff7fdeb8>
  806510:	003e6606 	br	805eac <__alt_mem_onchip_mem+0xff7fdeac>
  806514:	d8c00317 	ldw	r3,12(sp)
  806518:	00800084 	movi	r2,2
  80651c:	10c02916 	blt	r2,r3,8065c4 <_dtoa_r+0x167c>
  806520:	d9000c17 	ldw	r4,48(sp)
  806524:	003e8806 	br	805f48 <__alt_mem_onchip_mem+0xff7fdf48>
  806528:	04000084 	movi	r16,2
  80652c:	003b9d06 	br	8053a4 <__alt_mem_onchip_mem+0xff7fd3a4>
  806530:	d9001317 	ldw	r4,76(sp)
  806534:	d9000515 	stw	r4,20(sp)
  806538:	003cd606 	br	805894 <__alt_mem_onchip_mem+0xff7fd894>
  80653c:	d8801317 	ldw	r2,76(sp)
  806540:	d8800515 	stw	r2,20(sp)
  806544:	003c2a06 	br	8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  806548:	d9800317 	ldw	r6,12(sp)
  80654c:	00800084 	movi	r2,2
  806550:	11801516 	blt	r2,r6,8065a8 <_dtoa_r+0x1660>
  806554:	d9c00c17 	ldw	r7,48(sp)
  806558:	d9c00615 	stw	r7,24(sp)
  80655c:	003df706 	br	805d3c <__alt_mem_onchip_mem+0xff7fdd3c>
  806560:	193d3926 	beq	r3,r4,805a48 <__alt_mem_onchip_mem+0xff7fda48>
  806564:	00c00f04 	movi	r3,60
  806568:	1885c83a 	sub	r2,r3,r2
  80656c:	003ddf06 	br	805cec <__alt_mem_onchip_mem+0xff7fdcec>
  806570:	e009883a 	mov	r4,fp
  806574:	e0001115 	stw	zero,68(fp)
  806578:	000b883a 	mov	r5,zero
  80657c:	08072180 	call	807218 <_Balloc>
  806580:	d8800715 	stw	r2,28(sp)
  806584:	d8c00717 	ldw	r3,28(sp)
  806588:	00bfffc4 	movi	r2,-1
  80658c:	01000044 	movi	r4,1
  806590:	d8800c15 	stw	r2,48(sp)
  806594:	e0c01015 	stw	r3,64(fp)
  806598:	d9000b15 	stw	r4,44(sp)
  80659c:	d8800615 	stw	r2,24(sp)
  8065a0:	d8002215 	stw	zero,136(sp)
  8065a4:	003c4106 	br	8056ac <__alt_mem_onchip_mem+0xff7fd6ac>
  8065a8:	d8c00c17 	ldw	r3,48(sp)
  8065ac:	d8c00615 	stw	r3,24(sp)
  8065b0:	003e7006 	br	805f74 <__alt_mem_onchip_mem+0xff7fdf74>
  8065b4:	04400044 	movi	r17,1
  8065b8:	003b2006 	br	80523c <__alt_mem_onchip_mem+0xff7fd23c>
  8065bc:	000b883a 	mov	r5,zero
  8065c0:	003b3d06 	br	8052b8 <__alt_mem_onchip_mem+0xff7fd2b8>
  8065c4:	d8800c17 	ldw	r2,48(sp)
  8065c8:	d8800615 	stw	r2,24(sp)
  8065cc:	003e6906 	br	805f74 <__alt_mem_onchip_mem+0xff7fdf74>

008065d0 <_fclose_r>:
  8065d0:	28003926 	beq	r5,zero,8066b8 <_fclose_r+0xe8>
  8065d4:	defffc04 	addi	sp,sp,-16
  8065d8:	dc400115 	stw	r17,4(sp)
  8065dc:	dc000015 	stw	r16,0(sp)
  8065e0:	dfc00315 	stw	ra,12(sp)
  8065e4:	dc800215 	stw	r18,8(sp)
  8065e8:	2023883a 	mov	r17,r4
  8065ec:	2821883a 	mov	r16,r5
  8065f0:	20000226 	beq	r4,zero,8065fc <_fclose_r+0x2c>
  8065f4:	20800e17 	ldw	r2,56(r4)
  8065f8:	10002726 	beq	r2,zero,806698 <_fclose_r+0xc8>
  8065fc:	8080030f 	ldh	r2,12(r16)
  806600:	1000071e 	bne	r2,zero,806620 <_fclose_r+0x50>
  806604:	0005883a 	mov	r2,zero
  806608:	dfc00317 	ldw	ra,12(sp)
  80660c:	dc800217 	ldw	r18,8(sp)
  806610:	dc400117 	ldw	r17,4(sp)
  806614:	dc000017 	ldw	r16,0(sp)
  806618:	dec00404 	addi	sp,sp,16
  80661c:	f800283a 	ret
  806620:	800b883a 	mov	r5,r16
  806624:	8809883a 	mov	r4,r17
  806628:	08066d40 	call	8066d4 <__sflush_r>
  80662c:	1025883a 	mov	r18,r2
  806630:	80800b17 	ldw	r2,44(r16)
  806634:	10000426 	beq	r2,zero,806648 <_fclose_r+0x78>
  806638:	81400717 	ldw	r5,28(r16)
  80663c:	8809883a 	mov	r4,r17
  806640:	103ee83a 	callr	r2
  806644:	10001616 	blt	r2,zero,8066a0 <_fclose_r+0xd0>
  806648:	8080030b 	ldhu	r2,12(r16)
  80664c:	1080200c 	andi	r2,r2,128
  806650:	1000151e 	bne	r2,zero,8066a8 <_fclose_r+0xd8>
  806654:	81400c17 	ldw	r5,48(r16)
  806658:	28000526 	beq	r5,zero,806670 <_fclose_r+0xa0>
  80665c:	80801004 	addi	r2,r16,64
  806660:	28800226 	beq	r5,r2,80666c <_fclose_r+0x9c>
  806664:	8809883a 	mov	r4,r17
  806668:	0806b4c0 	call	806b4c <_free_r>
  80666c:	80000c15 	stw	zero,48(r16)
  806670:	81401117 	ldw	r5,68(r16)
  806674:	28000326 	beq	r5,zero,806684 <_fclose_r+0xb4>
  806678:	8809883a 	mov	r4,r17
  80667c:	0806b4c0 	call	806b4c <_free_r>
  806680:	80001115 	stw	zero,68(r16)
  806684:	08010b00 	call	8010b0 <__sfp_lock_acquire>
  806688:	8000030d 	sth	zero,12(r16)
  80668c:	08010b40 	call	8010b4 <__sfp_lock_release>
  806690:	9005883a 	mov	r2,r18
  806694:	003fdc06 	br	806608 <__alt_mem_onchip_mem+0xff7fe608>
  806698:	08010a00 	call	8010a0 <__sinit>
  80669c:	003fd706 	br	8065fc <__alt_mem_onchip_mem+0xff7fe5fc>
  8066a0:	04bfffc4 	movi	r18,-1
  8066a4:	003fe806 	br	806648 <__alt_mem_onchip_mem+0xff7fe648>
  8066a8:	81400417 	ldw	r5,16(r16)
  8066ac:	8809883a 	mov	r4,r17
  8066b0:	0806b4c0 	call	806b4c <_free_r>
  8066b4:	003fe706 	br	806654 <__alt_mem_onchip_mem+0xff7fe654>
  8066b8:	0005883a 	mov	r2,zero
  8066bc:	f800283a 	ret

008066c0 <fclose>:
  8066c0:	00802074 	movhi	r2,129
  8066c4:	10909704 	addi	r2,r2,16988
  8066c8:	200b883a 	mov	r5,r4
  8066cc:	11000017 	ldw	r4,0(r2)
  8066d0:	08065d01 	jmpi	8065d0 <_fclose_r>

008066d4 <__sflush_r>:
  8066d4:	2880030b 	ldhu	r2,12(r5)
  8066d8:	defffb04 	addi	sp,sp,-20
  8066dc:	dcc00315 	stw	r19,12(sp)
  8066e0:	dc400115 	stw	r17,4(sp)
  8066e4:	dfc00415 	stw	ra,16(sp)
  8066e8:	dc800215 	stw	r18,8(sp)
  8066ec:	dc000015 	stw	r16,0(sp)
  8066f0:	10c0020c 	andi	r3,r2,8
  8066f4:	2823883a 	mov	r17,r5
  8066f8:	2027883a 	mov	r19,r4
  8066fc:	1800311e 	bne	r3,zero,8067c4 <__sflush_r+0xf0>
  806700:	28c00117 	ldw	r3,4(r5)
  806704:	10820014 	ori	r2,r2,2048
  806708:	2880030d 	sth	r2,12(r5)
  80670c:	00c04b0e 	bge	zero,r3,80683c <__sflush_r+0x168>
  806710:	8a000a17 	ldw	r8,40(r17)
  806714:	40002326 	beq	r8,zero,8067a4 <__sflush_r+0xd0>
  806718:	9c000017 	ldw	r16,0(r19)
  80671c:	10c4000c 	andi	r3,r2,4096
  806720:	98000015 	stw	zero,0(r19)
  806724:	18004826 	beq	r3,zero,806848 <__sflush_r+0x174>
  806728:	89801417 	ldw	r6,80(r17)
  80672c:	10c0010c 	andi	r3,r2,4
  806730:	18000626 	beq	r3,zero,80674c <__sflush_r+0x78>
  806734:	88c00117 	ldw	r3,4(r17)
  806738:	88800c17 	ldw	r2,48(r17)
  80673c:	30cdc83a 	sub	r6,r6,r3
  806740:	10000226 	beq	r2,zero,80674c <__sflush_r+0x78>
  806744:	88800f17 	ldw	r2,60(r17)
  806748:	308dc83a 	sub	r6,r6,r2
  80674c:	89400717 	ldw	r5,28(r17)
  806750:	000f883a 	mov	r7,zero
  806754:	9809883a 	mov	r4,r19
  806758:	403ee83a 	callr	r8
  80675c:	00ffffc4 	movi	r3,-1
  806760:	10c04426 	beq	r2,r3,806874 <__sflush_r+0x1a0>
  806764:	88c0030b 	ldhu	r3,12(r17)
  806768:	89000417 	ldw	r4,16(r17)
  80676c:	88000115 	stw	zero,4(r17)
  806770:	197dffcc 	andi	r5,r3,63487
  806774:	8940030d 	sth	r5,12(r17)
  806778:	89000015 	stw	r4,0(r17)
  80677c:	18c4000c 	andi	r3,r3,4096
  806780:	18002c1e 	bne	r3,zero,806834 <__sflush_r+0x160>
  806784:	89400c17 	ldw	r5,48(r17)
  806788:	9c000015 	stw	r16,0(r19)
  80678c:	28000526 	beq	r5,zero,8067a4 <__sflush_r+0xd0>
  806790:	88801004 	addi	r2,r17,64
  806794:	28800226 	beq	r5,r2,8067a0 <__sflush_r+0xcc>
  806798:	9809883a 	mov	r4,r19
  80679c:	0806b4c0 	call	806b4c <_free_r>
  8067a0:	88000c15 	stw	zero,48(r17)
  8067a4:	0005883a 	mov	r2,zero
  8067a8:	dfc00417 	ldw	ra,16(sp)
  8067ac:	dcc00317 	ldw	r19,12(sp)
  8067b0:	dc800217 	ldw	r18,8(sp)
  8067b4:	dc400117 	ldw	r17,4(sp)
  8067b8:	dc000017 	ldw	r16,0(sp)
  8067bc:	dec00504 	addi	sp,sp,20
  8067c0:	f800283a 	ret
  8067c4:	2c800417 	ldw	r18,16(r5)
  8067c8:	903ff626 	beq	r18,zero,8067a4 <__alt_mem_onchip_mem+0xff7fe7a4>
  8067cc:	2c000017 	ldw	r16,0(r5)
  8067d0:	108000cc 	andi	r2,r2,3
  8067d4:	2c800015 	stw	r18,0(r5)
  8067d8:	84a1c83a 	sub	r16,r16,r18
  8067dc:	1000131e 	bne	r2,zero,80682c <__sflush_r+0x158>
  8067e0:	28800517 	ldw	r2,20(r5)
  8067e4:	88800215 	stw	r2,8(r17)
  8067e8:	04000316 	blt	zero,r16,8067f8 <__sflush_r+0x124>
  8067ec:	003fed06 	br	8067a4 <__alt_mem_onchip_mem+0xff7fe7a4>
  8067f0:	90a5883a 	add	r18,r18,r2
  8067f4:	043feb0e 	bge	zero,r16,8067a4 <__alt_mem_onchip_mem+0xff7fe7a4>
  8067f8:	88800917 	ldw	r2,36(r17)
  8067fc:	89400717 	ldw	r5,28(r17)
  806800:	800f883a 	mov	r7,r16
  806804:	900d883a 	mov	r6,r18
  806808:	9809883a 	mov	r4,r19
  80680c:	103ee83a 	callr	r2
  806810:	80a1c83a 	sub	r16,r16,r2
  806814:	00bff616 	blt	zero,r2,8067f0 <__alt_mem_onchip_mem+0xff7fe7f0>
  806818:	88c0030b 	ldhu	r3,12(r17)
  80681c:	00bfffc4 	movi	r2,-1
  806820:	18c01014 	ori	r3,r3,64
  806824:	88c0030d 	sth	r3,12(r17)
  806828:	003fdf06 	br	8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>
  80682c:	0005883a 	mov	r2,zero
  806830:	003fec06 	br	8067e4 <__alt_mem_onchip_mem+0xff7fe7e4>
  806834:	88801415 	stw	r2,80(r17)
  806838:	003fd206 	br	806784 <__alt_mem_onchip_mem+0xff7fe784>
  80683c:	28c00f17 	ldw	r3,60(r5)
  806840:	00ffb316 	blt	zero,r3,806710 <__alt_mem_onchip_mem+0xff7fe710>
  806844:	003fd706 	br	8067a4 <__alt_mem_onchip_mem+0xff7fe7a4>
  806848:	89400717 	ldw	r5,28(r17)
  80684c:	000d883a 	mov	r6,zero
  806850:	01c00044 	movi	r7,1
  806854:	9809883a 	mov	r4,r19
  806858:	403ee83a 	callr	r8
  80685c:	100d883a 	mov	r6,r2
  806860:	00bfffc4 	movi	r2,-1
  806864:	30801426 	beq	r6,r2,8068b8 <__sflush_r+0x1e4>
  806868:	8880030b 	ldhu	r2,12(r17)
  80686c:	8a000a17 	ldw	r8,40(r17)
  806870:	003fae06 	br	80672c <__alt_mem_onchip_mem+0xff7fe72c>
  806874:	98c00017 	ldw	r3,0(r19)
  806878:	183fba26 	beq	r3,zero,806764 <__alt_mem_onchip_mem+0xff7fe764>
  80687c:	01000744 	movi	r4,29
  806880:	19000626 	beq	r3,r4,80689c <__sflush_r+0x1c8>
  806884:	01000584 	movi	r4,22
  806888:	19000426 	beq	r3,r4,80689c <__sflush_r+0x1c8>
  80688c:	88c0030b 	ldhu	r3,12(r17)
  806890:	18c01014 	ori	r3,r3,64
  806894:	88c0030d 	sth	r3,12(r17)
  806898:	003fc306 	br	8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>
  80689c:	8880030b 	ldhu	r2,12(r17)
  8068a0:	88c00417 	ldw	r3,16(r17)
  8068a4:	88000115 	stw	zero,4(r17)
  8068a8:	10bdffcc 	andi	r2,r2,63487
  8068ac:	8880030d 	sth	r2,12(r17)
  8068b0:	88c00015 	stw	r3,0(r17)
  8068b4:	003fb306 	br	806784 <__alt_mem_onchip_mem+0xff7fe784>
  8068b8:	98800017 	ldw	r2,0(r19)
  8068bc:	103fea26 	beq	r2,zero,806868 <__alt_mem_onchip_mem+0xff7fe868>
  8068c0:	00c00744 	movi	r3,29
  8068c4:	10c00226 	beq	r2,r3,8068d0 <__sflush_r+0x1fc>
  8068c8:	00c00584 	movi	r3,22
  8068cc:	10c0031e 	bne	r2,r3,8068dc <__sflush_r+0x208>
  8068d0:	9c000015 	stw	r16,0(r19)
  8068d4:	0005883a 	mov	r2,zero
  8068d8:	003fb306 	br	8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>
  8068dc:	88c0030b 	ldhu	r3,12(r17)
  8068e0:	3005883a 	mov	r2,r6
  8068e4:	18c01014 	ori	r3,r3,64
  8068e8:	88c0030d 	sth	r3,12(r17)
  8068ec:	003fae06 	br	8067a8 <__alt_mem_onchip_mem+0xff7fe7a8>

008068f0 <_fflush_r>:
  8068f0:	defffd04 	addi	sp,sp,-12
  8068f4:	dc000115 	stw	r16,4(sp)
  8068f8:	dfc00215 	stw	ra,8(sp)
  8068fc:	2021883a 	mov	r16,r4
  806900:	20000226 	beq	r4,zero,80690c <_fflush_r+0x1c>
  806904:	20800e17 	ldw	r2,56(r4)
  806908:	10000c26 	beq	r2,zero,80693c <_fflush_r+0x4c>
  80690c:	2880030f 	ldh	r2,12(r5)
  806910:	1000051e 	bne	r2,zero,806928 <_fflush_r+0x38>
  806914:	0005883a 	mov	r2,zero
  806918:	dfc00217 	ldw	ra,8(sp)
  80691c:	dc000117 	ldw	r16,4(sp)
  806920:	dec00304 	addi	sp,sp,12
  806924:	f800283a 	ret
  806928:	8009883a 	mov	r4,r16
  80692c:	dfc00217 	ldw	ra,8(sp)
  806930:	dc000117 	ldw	r16,4(sp)
  806934:	dec00304 	addi	sp,sp,12
  806938:	08066d41 	jmpi	8066d4 <__sflush_r>
  80693c:	d9400015 	stw	r5,0(sp)
  806940:	08010a00 	call	8010a0 <__sinit>
  806944:	d9400017 	ldw	r5,0(sp)
  806948:	003ff006 	br	80690c <__alt_mem_onchip_mem+0xff7fe90c>

0080694c <fflush>:
  80694c:	20000526 	beq	r4,zero,806964 <fflush+0x18>
  806950:	00802074 	movhi	r2,129
  806954:	10909704 	addi	r2,r2,16988
  806958:	200b883a 	mov	r5,r4
  80695c:	11000017 	ldw	r4,0(r2)
  806960:	08068f01 	jmpi	8068f0 <_fflush_r>
  806964:	00802074 	movhi	r2,129
  806968:	10909604 	addi	r2,r2,16984
  80696c:	11000017 	ldw	r4,0(r2)
  806970:	01402034 	movhi	r5,128
  806974:	295a3c04 	addi	r5,r5,26864
  806978:	08017e81 	jmpi	8017e8 <_fwalk_reent>

0080697c <__sflags>:
  80697c:	28800007 	ldb	r2,0(r5)
  806980:	00c01c84 	movi	r3,114
  806984:	10c02426 	beq	r2,r3,806a18 <__sflags+0x9c>
  806988:	00c01dc4 	movi	r3,119
  80698c:	10c01e26 	beq	r2,r3,806a08 <__sflags+0x8c>
  806990:	00c01844 	movi	r3,97
  806994:	10c00426 	beq	r2,r3,8069a8 <__sflags+0x2c>
  806998:	00800584 	movi	r2,22
  80699c:	20800015 	stw	r2,0(r4)
  8069a0:	0005883a 	mov	r2,zero
  8069a4:	f800283a 	ret
  8069a8:	02c08204 	movi	r11,520
  8069ac:	01000044 	movi	r4,1
  8069b0:	00804204 	movi	r2,264
  8069b4:	01c00ac4 	movi	r7,43
  8069b8:	02bff8c4 	movi	r10,-29
  8069bc:	027fff04 	movi	r9,-4
  8069c0:	02001e04 	movi	r8,120
  8069c4:	29400044 	addi	r5,r5,1
  8069c8:	28c00007 	ldb	r3,0(r5)
  8069cc:	18000626 	beq	r3,zero,8069e8 <__sflags+0x6c>
  8069d0:	19c00826 	beq	r3,r7,8069f4 <__sflags+0x78>
  8069d4:	1a3ffb1e 	bne	r3,r8,8069c4 <__alt_mem_onchip_mem+0xff7fe9c4>
  8069d8:	29400044 	addi	r5,r5,1
  8069dc:	28c00007 	ldb	r3,0(r5)
  8069e0:	21020014 	ori	r4,r4,2048
  8069e4:	183ffa1e 	bne	r3,zero,8069d0 <__alt_mem_onchip_mem+0xff7fe9d0>
  8069e8:	22c8b03a 	or	r4,r4,r11
  8069ec:	31000015 	stw	r4,0(r6)
  8069f0:	f800283a 	ret
  8069f4:	1284703a 	and	r2,r2,r10
  8069f8:	2248703a 	and	r4,r4,r9
  8069fc:	10800414 	ori	r2,r2,16
  806a00:	21000094 	ori	r4,r4,2
  806a04:	003fef06 	br	8069c4 <__alt_mem_onchip_mem+0xff7fe9c4>
  806a08:	02c18004 	movi	r11,1536
  806a0c:	01000044 	movi	r4,1
  806a10:	00800204 	movi	r2,8
  806a14:	003fe706 	br	8069b4 <__alt_mem_onchip_mem+0xff7fe9b4>
  806a18:	0017883a 	mov	r11,zero
  806a1c:	0009883a 	mov	r4,zero
  806a20:	00800104 	movi	r2,4
  806a24:	003fe306 	br	8069b4 <__alt_mem_onchip_mem+0xff7fe9b4>

00806a28 <_malloc_trim_r>:
  806a28:	defffb04 	addi	sp,sp,-20
  806a2c:	dcc00315 	stw	r19,12(sp)
  806a30:	04c02074 	movhi	r19,129
  806a34:	dc800215 	stw	r18,8(sp)
  806a38:	dc400115 	stw	r17,4(sp)
  806a3c:	dc000015 	stw	r16,0(sp)
  806a40:	dfc00415 	stw	ra,16(sp)
  806a44:	2821883a 	mov	r16,r5
  806a48:	9cca7504 	addi	r19,r19,10708
  806a4c:	2025883a 	mov	r18,r4
  806a50:	080e56c0 	call	80e56c <__malloc_lock>
  806a54:	98800217 	ldw	r2,8(r19)
  806a58:	14400117 	ldw	r17,4(r2)
  806a5c:	00bfff04 	movi	r2,-4
  806a60:	88a2703a 	and	r17,r17,r2
  806a64:	8c21c83a 	sub	r16,r17,r16
  806a68:	8403fbc4 	addi	r16,r16,4079
  806a6c:	8020d33a 	srli	r16,r16,12
  806a70:	0083ffc4 	movi	r2,4095
  806a74:	843fffc4 	addi	r16,r16,-1
  806a78:	8020933a 	slli	r16,r16,12
  806a7c:	1400060e 	bge	r2,r16,806a98 <_malloc_trim_r+0x70>
  806a80:	000b883a 	mov	r5,zero
  806a84:	9009883a 	mov	r4,r18
  806a88:	08026e00 	call	8026e0 <_sbrk_r>
  806a8c:	98c00217 	ldw	r3,8(r19)
  806a90:	1c47883a 	add	r3,r3,r17
  806a94:	10c00a26 	beq	r2,r3,806ac0 <_malloc_trim_r+0x98>
  806a98:	9009883a 	mov	r4,r18
  806a9c:	080e5900 	call	80e590 <__malloc_unlock>
  806aa0:	0005883a 	mov	r2,zero
  806aa4:	dfc00417 	ldw	ra,16(sp)
  806aa8:	dcc00317 	ldw	r19,12(sp)
  806aac:	dc800217 	ldw	r18,8(sp)
  806ab0:	dc400117 	ldw	r17,4(sp)
  806ab4:	dc000017 	ldw	r16,0(sp)
  806ab8:	dec00504 	addi	sp,sp,20
  806abc:	f800283a 	ret
  806ac0:	040bc83a 	sub	r5,zero,r16
  806ac4:	9009883a 	mov	r4,r18
  806ac8:	08026e00 	call	8026e0 <_sbrk_r>
  806acc:	00ffffc4 	movi	r3,-1
  806ad0:	10c00d26 	beq	r2,r3,806b08 <_malloc_trim_r+0xe0>
  806ad4:	00c02074 	movhi	r3,129
  806ad8:	18d7f804 	addi	r3,r3,24544
  806adc:	18800017 	ldw	r2,0(r3)
  806ae0:	99000217 	ldw	r4,8(r19)
  806ae4:	8c23c83a 	sub	r17,r17,r16
  806ae8:	8c400054 	ori	r17,r17,1
  806aec:	1421c83a 	sub	r16,r2,r16
  806af0:	24400115 	stw	r17,4(r4)
  806af4:	9009883a 	mov	r4,r18
  806af8:	1c000015 	stw	r16,0(r3)
  806afc:	080e5900 	call	80e590 <__malloc_unlock>
  806b00:	00800044 	movi	r2,1
  806b04:	003fe706 	br	806aa4 <__alt_mem_onchip_mem+0xff7feaa4>
  806b08:	000b883a 	mov	r5,zero
  806b0c:	9009883a 	mov	r4,r18
  806b10:	08026e00 	call	8026e0 <_sbrk_r>
  806b14:	99000217 	ldw	r4,8(r19)
  806b18:	014003c4 	movi	r5,15
  806b1c:	1107c83a 	sub	r3,r2,r4
  806b20:	28ffdd0e 	bge	r5,r3,806a98 <__alt_mem_onchip_mem+0xff7fea98>
  806b24:	01402074 	movhi	r5,129
  806b28:	29509804 	addi	r5,r5,16992
  806b2c:	29400017 	ldw	r5,0(r5)
  806b30:	18c00054 	ori	r3,r3,1
  806b34:	20c00115 	stw	r3,4(r4)
  806b38:	00c02074 	movhi	r3,129
  806b3c:	1145c83a 	sub	r2,r2,r5
  806b40:	18d7f804 	addi	r3,r3,24544
  806b44:	18800015 	stw	r2,0(r3)
  806b48:	003fd306 	br	806a98 <__alt_mem_onchip_mem+0xff7fea98>

00806b4c <_free_r>:
  806b4c:	28004126 	beq	r5,zero,806c54 <_free_r+0x108>
  806b50:	defffd04 	addi	sp,sp,-12
  806b54:	dc400115 	stw	r17,4(sp)
  806b58:	dc000015 	stw	r16,0(sp)
  806b5c:	2023883a 	mov	r17,r4
  806b60:	2821883a 	mov	r16,r5
  806b64:	dfc00215 	stw	ra,8(sp)
  806b68:	080e56c0 	call	80e56c <__malloc_lock>
  806b6c:	81ffff17 	ldw	r7,-4(r16)
  806b70:	00bfff84 	movi	r2,-2
  806b74:	01002074 	movhi	r4,129
  806b78:	81bffe04 	addi	r6,r16,-8
  806b7c:	3884703a 	and	r2,r7,r2
  806b80:	210a7504 	addi	r4,r4,10708
  806b84:	308b883a 	add	r5,r6,r2
  806b88:	2a400117 	ldw	r9,4(r5)
  806b8c:	22000217 	ldw	r8,8(r4)
  806b90:	00ffff04 	movi	r3,-4
  806b94:	48c6703a 	and	r3,r9,r3
  806b98:	2a005726 	beq	r5,r8,806cf8 <_free_r+0x1ac>
  806b9c:	28c00115 	stw	r3,4(r5)
  806ba0:	39c0004c 	andi	r7,r7,1
  806ba4:	3800091e 	bne	r7,zero,806bcc <_free_r+0x80>
  806ba8:	823ffe17 	ldw	r8,-8(r16)
  806bac:	22400204 	addi	r9,r4,8
  806bb0:	320dc83a 	sub	r6,r6,r8
  806bb4:	31c00217 	ldw	r7,8(r6)
  806bb8:	1205883a 	add	r2,r2,r8
  806bbc:	3a406526 	beq	r7,r9,806d54 <_free_r+0x208>
  806bc0:	32000317 	ldw	r8,12(r6)
  806bc4:	3a000315 	stw	r8,12(r7)
  806bc8:	41c00215 	stw	r7,8(r8)
  806bcc:	28cf883a 	add	r7,r5,r3
  806bd0:	39c00117 	ldw	r7,4(r7)
  806bd4:	39c0004c 	andi	r7,r7,1
  806bd8:	38003a26 	beq	r7,zero,806cc4 <_free_r+0x178>
  806bdc:	10c00054 	ori	r3,r2,1
  806be0:	30c00115 	stw	r3,4(r6)
  806be4:	3087883a 	add	r3,r6,r2
  806be8:	18800015 	stw	r2,0(r3)
  806bec:	00c07fc4 	movi	r3,511
  806bf0:	18801936 	bltu	r3,r2,806c58 <_free_r+0x10c>
  806bf4:	1004d0fa 	srli	r2,r2,3
  806bf8:	01c00044 	movi	r7,1
  806bfc:	21400117 	ldw	r5,4(r4)
  806c00:	10c00044 	addi	r3,r2,1
  806c04:	18c7883a 	add	r3,r3,r3
  806c08:	1005d0ba 	srai	r2,r2,2
  806c0c:	18c7883a 	add	r3,r3,r3
  806c10:	18c7883a 	add	r3,r3,r3
  806c14:	1907883a 	add	r3,r3,r4
  806c18:	3884983a 	sll	r2,r7,r2
  806c1c:	19c00017 	ldw	r7,0(r3)
  806c20:	1a3ffe04 	addi	r8,r3,-8
  806c24:	1144b03a 	or	r2,r2,r5
  806c28:	32000315 	stw	r8,12(r6)
  806c2c:	31c00215 	stw	r7,8(r6)
  806c30:	20800115 	stw	r2,4(r4)
  806c34:	19800015 	stw	r6,0(r3)
  806c38:	39800315 	stw	r6,12(r7)
  806c3c:	8809883a 	mov	r4,r17
  806c40:	dfc00217 	ldw	ra,8(sp)
  806c44:	dc400117 	ldw	r17,4(sp)
  806c48:	dc000017 	ldw	r16,0(sp)
  806c4c:	dec00304 	addi	sp,sp,12
  806c50:	080e5901 	jmpi	80e590 <__malloc_unlock>
  806c54:	f800283a 	ret
  806c58:	100ad27a 	srli	r5,r2,9
  806c5c:	00c00104 	movi	r3,4
  806c60:	19404a36 	bltu	r3,r5,806d8c <_free_r+0x240>
  806c64:	100ad1ba 	srli	r5,r2,6
  806c68:	28c00e44 	addi	r3,r5,57
  806c6c:	18c7883a 	add	r3,r3,r3
  806c70:	29400e04 	addi	r5,r5,56
  806c74:	18c7883a 	add	r3,r3,r3
  806c78:	18c7883a 	add	r3,r3,r3
  806c7c:	1909883a 	add	r4,r3,r4
  806c80:	20c00017 	ldw	r3,0(r4)
  806c84:	01c02074 	movhi	r7,129
  806c88:	213ffe04 	addi	r4,r4,-8
  806c8c:	39ca7504 	addi	r7,r7,10708
  806c90:	20c04426 	beq	r4,r3,806da4 <_free_r+0x258>
  806c94:	01ffff04 	movi	r7,-4
  806c98:	19400117 	ldw	r5,4(r3)
  806c9c:	29ca703a 	and	r5,r5,r7
  806ca0:	1140022e 	bgeu	r2,r5,806cac <_free_r+0x160>
  806ca4:	18c00217 	ldw	r3,8(r3)
  806ca8:	20fffb1e 	bne	r4,r3,806c98 <__alt_mem_onchip_mem+0xff7fec98>
  806cac:	19000317 	ldw	r4,12(r3)
  806cb0:	31000315 	stw	r4,12(r6)
  806cb4:	30c00215 	stw	r3,8(r6)
  806cb8:	21800215 	stw	r6,8(r4)
  806cbc:	19800315 	stw	r6,12(r3)
  806cc0:	003fde06 	br	806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  806cc4:	29c00217 	ldw	r7,8(r5)
  806cc8:	10c5883a 	add	r2,r2,r3
  806ccc:	00c02074 	movhi	r3,129
  806cd0:	18ca7704 	addi	r3,r3,10716
  806cd4:	38c03b26 	beq	r7,r3,806dc4 <_free_r+0x278>
  806cd8:	2a000317 	ldw	r8,12(r5)
  806cdc:	11400054 	ori	r5,r2,1
  806ce0:	3087883a 	add	r3,r6,r2
  806ce4:	3a000315 	stw	r8,12(r7)
  806ce8:	41c00215 	stw	r7,8(r8)
  806cec:	31400115 	stw	r5,4(r6)
  806cf0:	18800015 	stw	r2,0(r3)
  806cf4:	003fbd06 	br	806bec <__alt_mem_onchip_mem+0xff7febec>
  806cf8:	39c0004c 	andi	r7,r7,1
  806cfc:	10c5883a 	add	r2,r2,r3
  806d00:	3800071e 	bne	r7,zero,806d20 <_free_r+0x1d4>
  806d04:	81fffe17 	ldw	r7,-8(r16)
  806d08:	31cdc83a 	sub	r6,r6,r7
  806d0c:	30c00317 	ldw	r3,12(r6)
  806d10:	31400217 	ldw	r5,8(r6)
  806d14:	11c5883a 	add	r2,r2,r7
  806d18:	28c00315 	stw	r3,12(r5)
  806d1c:	19400215 	stw	r5,8(r3)
  806d20:	10c00054 	ori	r3,r2,1
  806d24:	30c00115 	stw	r3,4(r6)
  806d28:	00c02074 	movhi	r3,129
  806d2c:	18d09904 	addi	r3,r3,16996
  806d30:	18c00017 	ldw	r3,0(r3)
  806d34:	21800215 	stw	r6,8(r4)
  806d38:	10ffc036 	bltu	r2,r3,806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  806d3c:	00802074 	movhi	r2,129
  806d40:	1097ed04 	addi	r2,r2,24500
  806d44:	11400017 	ldw	r5,0(r2)
  806d48:	8809883a 	mov	r4,r17
  806d4c:	0806a280 	call	806a28 <_malloc_trim_r>
  806d50:	003fba06 	br	806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  806d54:	28c9883a 	add	r4,r5,r3
  806d58:	21000117 	ldw	r4,4(r4)
  806d5c:	2100004c 	andi	r4,r4,1
  806d60:	2000391e 	bne	r4,zero,806e48 <_free_r+0x2fc>
  806d64:	29c00217 	ldw	r7,8(r5)
  806d68:	29000317 	ldw	r4,12(r5)
  806d6c:	1885883a 	add	r2,r3,r2
  806d70:	10c00054 	ori	r3,r2,1
  806d74:	39000315 	stw	r4,12(r7)
  806d78:	21c00215 	stw	r7,8(r4)
  806d7c:	30c00115 	stw	r3,4(r6)
  806d80:	308d883a 	add	r6,r6,r2
  806d84:	30800015 	stw	r2,0(r6)
  806d88:	003fac06 	br	806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  806d8c:	00c00504 	movi	r3,20
  806d90:	19401536 	bltu	r3,r5,806de8 <_free_r+0x29c>
  806d94:	28c01704 	addi	r3,r5,92
  806d98:	18c7883a 	add	r3,r3,r3
  806d9c:	294016c4 	addi	r5,r5,91
  806da0:	003fb406 	br	806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806da4:	280bd0ba 	srai	r5,r5,2
  806da8:	00c00044 	movi	r3,1
  806dac:	38800117 	ldw	r2,4(r7)
  806db0:	194a983a 	sll	r5,r3,r5
  806db4:	2007883a 	mov	r3,r4
  806db8:	2884b03a 	or	r2,r5,r2
  806dbc:	38800115 	stw	r2,4(r7)
  806dc0:	003fbb06 	br	806cb0 <__alt_mem_onchip_mem+0xff7fecb0>
  806dc4:	21800515 	stw	r6,20(r4)
  806dc8:	21800415 	stw	r6,16(r4)
  806dcc:	10c00054 	ori	r3,r2,1
  806dd0:	31c00315 	stw	r7,12(r6)
  806dd4:	31c00215 	stw	r7,8(r6)
  806dd8:	30c00115 	stw	r3,4(r6)
  806ddc:	308d883a 	add	r6,r6,r2
  806de0:	30800015 	stw	r2,0(r6)
  806de4:	003f9506 	br	806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  806de8:	00c01504 	movi	r3,84
  806dec:	19400536 	bltu	r3,r5,806e04 <_free_r+0x2b8>
  806df0:	100ad33a 	srli	r5,r2,12
  806df4:	28c01bc4 	addi	r3,r5,111
  806df8:	18c7883a 	add	r3,r3,r3
  806dfc:	29401b84 	addi	r5,r5,110
  806e00:	003f9c06 	br	806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806e04:	00c05504 	movi	r3,340
  806e08:	19400536 	bltu	r3,r5,806e20 <_free_r+0x2d4>
  806e0c:	100ad3fa 	srli	r5,r2,15
  806e10:	28c01e04 	addi	r3,r5,120
  806e14:	18c7883a 	add	r3,r3,r3
  806e18:	29401dc4 	addi	r5,r5,119
  806e1c:	003f9506 	br	806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806e20:	00c15504 	movi	r3,1364
  806e24:	19400536 	bltu	r3,r5,806e3c <_free_r+0x2f0>
  806e28:	100ad4ba 	srli	r5,r2,18
  806e2c:	28c01f44 	addi	r3,r5,125
  806e30:	18c7883a 	add	r3,r3,r3
  806e34:	29401f04 	addi	r5,r5,124
  806e38:	003f8e06 	br	806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806e3c:	00c03f84 	movi	r3,254
  806e40:	01401f84 	movi	r5,126
  806e44:	003f8b06 	br	806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806e48:	10c00054 	ori	r3,r2,1
  806e4c:	30c00115 	stw	r3,4(r6)
  806e50:	308d883a 	add	r6,r6,r2
  806e54:	30800015 	stw	r2,0(r6)
  806e58:	003f7806 	br	806c3c <__alt_mem_onchip_mem+0xff7fec3c>

00806e5c <_isatty_r>:
  806e5c:	defffd04 	addi	sp,sp,-12
  806e60:	dc000015 	stw	r16,0(sp)
  806e64:	04002074 	movhi	r16,129
  806e68:	dc400115 	stw	r17,4(sp)
  806e6c:	8417ea04 	addi	r16,r16,24488
  806e70:	2023883a 	mov	r17,r4
  806e74:	2809883a 	mov	r4,r5
  806e78:	dfc00215 	stw	ra,8(sp)
  806e7c:	80000015 	stw	zero,0(r16)
  806e80:	080e2500 	call	80e250 <isatty>
  806e84:	00ffffc4 	movi	r3,-1
  806e88:	10c00526 	beq	r2,r3,806ea0 <_isatty_r+0x44>
  806e8c:	dfc00217 	ldw	ra,8(sp)
  806e90:	dc400117 	ldw	r17,4(sp)
  806e94:	dc000017 	ldw	r16,0(sp)
  806e98:	dec00304 	addi	sp,sp,12
  806e9c:	f800283a 	ret
  806ea0:	80c00017 	ldw	r3,0(r16)
  806ea4:	183ff926 	beq	r3,zero,806e8c <__alt_mem_onchip_mem+0xff7fee8c>
  806ea8:	88c00015 	stw	r3,0(r17)
  806eac:	003ff706 	br	806e8c <__alt_mem_onchip_mem+0xff7fee8c>

00806eb0 <_setlocale_r>:
  806eb0:	30001b26 	beq	r6,zero,806f20 <_setlocale_r+0x70>
  806eb4:	01402074 	movhi	r5,129
  806eb8:	defffe04 	addi	sp,sp,-8
  806ebc:	29482704 	addi	r5,r5,8348
  806ec0:	3009883a 	mov	r4,r6
  806ec4:	dc000015 	stw	r16,0(sp)
  806ec8:	dfc00115 	stw	ra,4(sp)
  806ecc:	3021883a 	mov	r16,r6
  806ed0:	08082e80 	call	8082e8 <strcmp>
  806ed4:	1000061e 	bne	r2,zero,806ef0 <_setlocale_r+0x40>
  806ed8:	00802074 	movhi	r2,129
  806edc:	10880904 	addi	r2,r2,8228
  806ee0:	dfc00117 	ldw	ra,4(sp)
  806ee4:	dc000017 	ldw	r16,0(sp)
  806ee8:	dec00204 	addi	sp,sp,8
  806eec:	f800283a 	ret
  806ef0:	01402074 	movhi	r5,129
  806ef4:	29480904 	addi	r5,r5,8228
  806ef8:	8009883a 	mov	r4,r16
  806efc:	08082e80 	call	8082e8 <strcmp>
  806f00:	103ff526 	beq	r2,zero,806ed8 <__alt_mem_onchip_mem+0xff7feed8>
  806f04:	01402074 	movhi	r5,129
  806f08:	29481204 	addi	r5,r5,8264
  806f0c:	8009883a 	mov	r4,r16
  806f10:	08082e80 	call	8082e8 <strcmp>
  806f14:	103ff026 	beq	r2,zero,806ed8 <__alt_mem_onchip_mem+0xff7feed8>
  806f18:	0005883a 	mov	r2,zero
  806f1c:	003ff006 	br	806ee0 <__alt_mem_onchip_mem+0xff7feee0>
  806f20:	00802074 	movhi	r2,129
  806f24:	10880904 	addi	r2,r2,8228
  806f28:	f800283a 	ret

00806f2c <__locale_charset>:
  806f2c:	00802074 	movhi	r2,129
  806f30:	108b7f04 	addi	r2,r2,11772
  806f34:	f800283a 	ret

00806f38 <__locale_mb_cur_max>:
  806f38:	00802074 	movhi	r2,129
  806f3c:	10909a04 	addi	r2,r2,17000
  806f40:	10800017 	ldw	r2,0(r2)
  806f44:	f800283a 	ret

00806f48 <__locale_msgcharset>:
  806f48:	00802074 	movhi	r2,129
  806f4c:	108b7704 	addi	r2,r2,11740
  806f50:	f800283a 	ret

00806f54 <__locale_cjk_lang>:
  806f54:	0005883a 	mov	r2,zero
  806f58:	f800283a 	ret

00806f5c <_localeconv_r>:
  806f5c:	00802074 	movhi	r2,129
  806f60:	108b8704 	addi	r2,r2,11804
  806f64:	f800283a 	ret

00806f68 <setlocale>:
  806f68:	00802074 	movhi	r2,129
  806f6c:	10909704 	addi	r2,r2,16988
  806f70:	280d883a 	mov	r6,r5
  806f74:	200b883a 	mov	r5,r4
  806f78:	11000017 	ldw	r4,0(r2)
  806f7c:	0806eb01 	jmpi	806eb0 <_setlocale_r>

00806f80 <localeconv>:
  806f80:	00802074 	movhi	r2,129
  806f84:	108b8704 	addi	r2,r2,11804
  806f88:	f800283a 	ret

00806f8c <_lseek_r>:
  806f8c:	defffd04 	addi	sp,sp,-12
  806f90:	2805883a 	mov	r2,r5
  806f94:	dc000015 	stw	r16,0(sp)
  806f98:	04002074 	movhi	r16,129
  806f9c:	dc400115 	stw	r17,4(sp)
  806fa0:	300b883a 	mov	r5,r6
  806fa4:	8417ea04 	addi	r16,r16,24488
  806fa8:	2023883a 	mov	r17,r4
  806fac:	380d883a 	mov	r6,r7
  806fb0:	1009883a 	mov	r4,r2
  806fb4:	dfc00215 	stw	ra,8(sp)
  806fb8:	80000015 	stw	zero,0(r16)
  806fbc:	080e41c0 	call	80e41c <lseek>
  806fc0:	00ffffc4 	movi	r3,-1
  806fc4:	10c00526 	beq	r2,r3,806fdc <_lseek_r+0x50>
  806fc8:	dfc00217 	ldw	ra,8(sp)
  806fcc:	dc400117 	ldw	r17,4(sp)
  806fd0:	dc000017 	ldw	r16,0(sp)
  806fd4:	dec00304 	addi	sp,sp,12
  806fd8:	f800283a 	ret
  806fdc:	80c00017 	ldw	r3,0(r16)
  806fe0:	183ff926 	beq	r3,zero,806fc8 <__alt_mem_onchip_mem+0xff7fefc8>
  806fe4:	88c00015 	stw	r3,0(r17)
  806fe8:	003ff706 	br	806fc8 <__alt_mem_onchip_mem+0xff7fefc8>

00806fec <memchr>:
  806fec:	208000cc 	andi	r2,r4,3
  806ff0:	280f883a 	mov	r7,r5
  806ff4:	10003426 	beq	r2,zero,8070c8 <memchr+0xdc>
  806ff8:	30bfffc4 	addi	r2,r6,-1
  806ffc:	30001a26 	beq	r6,zero,807068 <memchr+0x7c>
  807000:	20c00003 	ldbu	r3,0(r4)
  807004:	29803fcc 	andi	r6,r5,255
  807008:	30c0051e 	bne	r6,r3,807020 <memchr+0x34>
  80700c:	00001806 	br	807070 <memchr+0x84>
  807010:	10001526 	beq	r2,zero,807068 <memchr+0x7c>
  807014:	20c00003 	ldbu	r3,0(r4)
  807018:	10bfffc4 	addi	r2,r2,-1
  80701c:	30c01426 	beq	r6,r3,807070 <memchr+0x84>
  807020:	21000044 	addi	r4,r4,1
  807024:	20c000cc 	andi	r3,r4,3
  807028:	183ff91e 	bne	r3,zero,807010 <__alt_mem_onchip_mem+0xff7ff010>
  80702c:	020000c4 	movi	r8,3
  807030:	40801136 	bltu	r8,r2,807078 <memchr+0x8c>
  807034:	10000c26 	beq	r2,zero,807068 <memchr+0x7c>
  807038:	20c00003 	ldbu	r3,0(r4)
  80703c:	29403fcc 	andi	r5,r5,255
  807040:	28c00b26 	beq	r5,r3,807070 <memchr+0x84>
  807044:	20c00044 	addi	r3,r4,1
  807048:	39803fcc 	andi	r6,r7,255
  80704c:	2089883a 	add	r4,r4,r2
  807050:	00000306 	br	807060 <memchr+0x74>
  807054:	18c00044 	addi	r3,r3,1
  807058:	197fffc3 	ldbu	r5,-1(r3)
  80705c:	31400526 	beq	r6,r5,807074 <memchr+0x88>
  807060:	1805883a 	mov	r2,r3
  807064:	20fffb1e 	bne	r4,r3,807054 <__alt_mem_onchip_mem+0xff7ff054>
  807068:	0005883a 	mov	r2,zero
  80706c:	f800283a 	ret
  807070:	2005883a 	mov	r2,r4
  807074:	f800283a 	ret
  807078:	28c03fcc 	andi	r3,r5,255
  80707c:	1812923a 	slli	r9,r3,8
  807080:	02ffbff4 	movhi	r11,65279
  807084:	02a02074 	movhi	r10,32897
  807088:	48d2b03a 	or	r9,r9,r3
  80708c:	4806943a 	slli	r3,r9,16
  807090:	5affbfc4 	addi	r11,r11,-257
  807094:	52a02004 	addi	r10,r10,-32640
  807098:	48d2b03a 	or	r9,r9,r3
  80709c:	20c00017 	ldw	r3,0(r4)
  8070a0:	48c6f03a 	xor	r3,r9,r3
  8070a4:	1acd883a 	add	r6,r3,r11
  8070a8:	00c6303a 	nor	r3,zero,r3
  8070ac:	30c6703a 	and	r3,r6,r3
  8070b0:	1a86703a 	and	r3,r3,r10
  8070b4:	183fe01e 	bne	r3,zero,807038 <__alt_mem_onchip_mem+0xff7ff038>
  8070b8:	10bfff04 	addi	r2,r2,-4
  8070bc:	21000104 	addi	r4,r4,4
  8070c0:	40bff636 	bltu	r8,r2,80709c <__alt_mem_onchip_mem+0xff7ff09c>
  8070c4:	003fdb06 	br	807034 <__alt_mem_onchip_mem+0xff7ff034>
  8070c8:	3005883a 	mov	r2,r6
  8070cc:	003fd706 	br	80702c <__alt_mem_onchip_mem+0xff7ff02c>

008070d0 <memcpy>:
  8070d0:	defffd04 	addi	sp,sp,-12
  8070d4:	dfc00215 	stw	ra,8(sp)
  8070d8:	dc400115 	stw	r17,4(sp)
  8070dc:	dc000015 	stw	r16,0(sp)
  8070e0:	00c003c4 	movi	r3,15
  8070e4:	2005883a 	mov	r2,r4
  8070e8:	1980452e 	bgeu	r3,r6,807200 <memcpy+0x130>
  8070ec:	2906b03a 	or	r3,r5,r4
  8070f0:	18c000cc 	andi	r3,r3,3
  8070f4:	1800441e 	bne	r3,zero,807208 <memcpy+0x138>
  8070f8:	347ffc04 	addi	r17,r6,-16
  8070fc:	8822d13a 	srli	r17,r17,4
  807100:	28c00104 	addi	r3,r5,4
  807104:	23400104 	addi	r13,r4,4
  807108:	8820913a 	slli	r16,r17,4
  80710c:	2b000204 	addi	r12,r5,8
  807110:	22c00204 	addi	r11,r4,8
  807114:	84000504 	addi	r16,r16,20
  807118:	2a800304 	addi	r10,r5,12
  80711c:	22400304 	addi	r9,r4,12
  807120:	2c21883a 	add	r16,r5,r16
  807124:	2811883a 	mov	r8,r5
  807128:	200f883a 	mov	r7,r4
  80712c:	41000017 	ldw	r4,0(r8)
  807130:	1fc00017 	ldw	ra,0(r3)
  807134:	63c00017 	ldw	r15,0(r12)
  807138:	39000015 	stw	r4,0(r7)
  80713c:	53800017 	ldw	r14,0(r10)
  807140:	6fc00015 	stw	ra,0(r13)
  807144:	5bc00015 	stw	r15,0(r11)
  807148:	4b800015 	stw	r14,0(r9)
  80714c:	18c00404 	addi	r3,r3,16
  807150:	39c00404 	addi	r7,r7,16
  807154:	42000404 	addi	r8,r8,16
  807158:	6b400404 	addi	r13,r13,16
  80715c:	63000404 	addi	r12,r12,16
  807160:	5ac00404 	addi	r11,r11,16
  807164:	52800404 	addi	r10,r10,16
  807168:	4a400404 	addi	r9,r9,16
  80716c:	1c3fef1e 	bne	r3,r16,80712c <__alt_mem_onchip_mem+0xff7ff12c>
  807170:	89c00044 	addi	r7,r17,1
  807174:	380e913a 	slli	r7,r7,4
  807178:	310003cc 	andi	r4,r6,15
  80717c:	02c000c4 	movi	r11,3
  807180:	11c7883a 	add	r3,r2,r7
  807184:	29cb883a 	add	r5,r5,r7
  807188:	5900212e 	bgeu	r11,r4,807210 <memcpy+0x140>
  80718c:	1813883a 	mov	r9,r3
  807190:	2811883a 	mov	r8,r5
  807194:	200f883a 	mov	r7,r4
  807198:	42800017 	ldw	r10,0(r8)
  80719c:	4a400104 	addi	r9,r9,4
  8071a0:	39ffff04 	addi	r7,r7,-4
  8071a4:	4abfff15 	stw	r10,-4(r9)
  8071a8:	42000104 	addi	r8,r8,4
  8071ac:	59fffa36 	bltu	r11,r7,807198 <__alt_mem_onchip_mem+0xff7ff198>
  8071b0:	213fff04 	addi	r4,r4,-4
  8071b4:	2008d0ba 	srli	r4,r4,2
  8071b8:	318000cc 	andi	r6,r6,3
  8071bc:	21000044 	addi	r4,r4,1
  8071c0:	2109883a 	add	r4,r4,r4
  8071c4:	2109883a 	add	r4,r4,r4
  8071c8:	1907883a 	add	r3,r3,r4
  8071cc:	290b883a 	add	r5,r5,r4
  8071d0:	30000626 	beq	r6,zero,8071ec <memcpy+0x11c>
  8071d4:	198d883a 	add	r6,r3,r6
  8071d8:	29c00003 	ldbu	r7,0(r5)
  8071dc:	18c00044 	addi	r3,r3,1
  8071e0:	29400044 	addi	r5,r5,1
  8071e4:	19ffffc5 	stb	r7,-1(r3)
  8071e8:	19bffb1e 	bne	r3,r6,8071d8 <__alt_mem_onchip_mem+0xff7ff1d8>
  8071ec:	dfc00217 	ldw	ra,8(sp)
  8071f0:	dc400117 	ldw	r17,4(sp)
  8071f4:	dc000017 	ldw	r16,0(sp)
  8071f8:	dec00304 	addi	sp,sp,12
  8071fc:	f800283a 	ret
  807200:	2007883a 	mov	r3,r4
  807204:	003ff206 	br	8071d0 <__alt_mem_onchip_mem+0xff7ff1d0>
  807208:	2007883a 	mov	r3,r4
  80720c:	003ff106 	br	8071d4 <__alt_mem_onchip_mem+0xff7ff1d4>
  807210:	200d883a 	mov	r6,r4
  807214:	003fee06 	br	8071d0 <__alt_mem_onchip_mem+0xff7ff1d0>

00807218 <_Balloc>:
  807218:	20801317 	ldw	r2,76(r4)
  80721c:	defffc04 	addi	sp,sp,-16
  807220:	dc400115 	stw	r17,4(sp)
  807224:	dc000015 	stw	r16,0(sp)
  807228:	dfc00315 	stw	ra,12(sp)
  80722c:	dc800215 	stw	r18,8(sp)
  807230:	2023883a 	mov	r17,r4
  807234:	2821883a 	mov	r16,r5
  807238:	10000f26 	beq	r2,zero,807278 <_Balloc+0x60>
  80723c:	8407883a 	add	r3,r16,r16
  807240:	18c7883a 	add	r3,r3,r3
  807244:	10c7883a 	add	r3,r2,r3
  807248:	18800017 	ldw	r2,0(r3)
  80724c:	10001126 	beq	r2,zero,807294 <_Balloc+0x7c>
  807250:	11000017 	ldw	r4,0(r2)
  807254:	19000015 	stw	r4,0(r3)
  807258:	10000415 	stw	zero,16(r2)
  80725c:	10000315 	stw	zero,12(r2)
  807260:	dfc00317 	ldw	ra,12(sp)
  807264:	dc800217 	ldw	r18,8(sp)
  807268:	dc400117 	ldw	r17,4(sp)
  80726c:	dc000017 	ldw	r16,0(sp)
  807270:	dec00404 	addi	sp,sp,16
  807274:	f800283a 	ret
  807278:	01800844 	movi	r6,33
  80727c:	01400104 	movi	r5,4
  807280:	0809aa40 	call	809aa4 <_calloc_r>
  807284:	88801315 	stw	r2,76(r17)
  807288:	103fec1e 	bne	r2,zero,80723c <__alt_mem_onchip_mem+0xff7ff23c>
  80728c:	0005883a 	mov	r2,zero
  807290:	003ff306 	br	807260 <__alt_mem_onchip_mem+0xff7ff260>
  807294:	01400044 	movi	r5,1
  807298:	2c24983a 	sll	r18,r5,r16
  80729c:	8809883a 	mov	r4,r17
  8072a0:	91800144 	addi	r6,r18,5
  8072a4:	318d883a 	add	r6,r6,r6
  8072a8:	318d883a 	add	r6,r6,r6
  8072ac:	0809aa40 	call	809aa4 <_calloc_r>
  8072b0:	103ff626 	beq	r2,zero,80728c <__alt_mem_onchip_mem+0xff7ff28c>
  8072b4:	14000115 	stw	r16,4(r2)
  8072b8:	14800215 	stw	r18,8(r2)
  8072bc:	003fe606 	br	807258 <__alt_mem_onchip_mem+0xff7ff258>

008072c0 <_Bfree>:
  8072c0:	28000826 	beq	r5,zero,8072e4 <_Bfree+0x24>
  8072c4:	28c00117 	ldw	r3,4(r5)
  8072c8:	20801317 	ldw	r2,76(r4)
  8072cc:	18c7883a 	add	r3,r3,r3
  8072d0:	18c7883a 	add	r3,r3,r3
  8072d4:	10c5883a 	add	r2,r2,r3
  8072d8:	10c00017 	ldw	r3,0(r2)
  8072dc:	28c00015 	stw	r3,0(r5)
  8072e0:	11400015 	stw	r5,0(r2)
  8072e4:	f800283a 	ret

008072e8 <__multadd>:
  8072e8:	defffa04 	addi	sp,sp,-24
  8072ec:	dc800315 	stw	r18,12(sp)
  8072f0:	dc400215 	stw	r17,8(sp)
  8072f4:	dc000115 	stw	r16,4(sp)
  8072f8:	2823883a 	mov	r17,r5
  8072fc:	2c000417 	ldw	r16,16(r5)
  807300:	dfc00515 	stw	ra,20(sp)
  807304:	dcc00415 	stw	r19,16(sp)
  807308:	2025883a 	mov	r18,r4
  80730c:	29400504 	addi	r5,r5,20
  807310:	0011883a 	mov	r8,zero
  807314:	28c00017 	ldw	r3,0(r5)
  807318:	29400104 	addi	r5,r5,4
  80731c:	42000044 	addi	r8,r8,1
  807320:	18bfffcc 	andi	r2,r3,65535
  807324:	1185383a 	mul	r2,r2,r6
  807328:	1806d43a 	srli	r3,r3,16
  80732c:	11cf883a 	add	r7,r2,r7
  807330:	3808d43a 	srli	r4,r7,16
  807334:	1987383a 	mul	r3,r3,r6
  807338:	38bfffcc 	andi	r2,r7,65535
  80733c:	1907883a 	add	r3,r3,r4
  807340:	1808943a 	slli	r4,r3,16
  807344:	180ed43a 	srli	r7,r3,16
  807348:	2085883a 	add	r2,r4,r2
  80734c:	28bfff15 	stw	r2,-4(r5)
  807350:	443ff016 	blt	r8,r16,807314 <__alt_mem_onchip_mem+0xff7ff314>
  807354:	38000926 	beq	r7,zero,80737c <__multadd+0x94>
  807358:	88800217 	ldw	r2,8(r17)
  80735c:	80800f0e 	bge	r16,r2,80739c <__multadd+0xb4>
  807360:	80800144 	addi	r2,r16,5
  807364:	1085883a 	add	r2,r2,r2
  807368:	1085883a 	add	r2,r2,r2
  80736c:	8885883a 	add	r2,r17,r2
  807370:	11c00015 	stw	r7,0(r2)
  807374:	84000044 	addi	r16,r16,1
  807378:	8c000415 	stw	r16,16(r17)
  80737c:	8805883a 	mov	r2,r17
  807380:	dfc00517 	ldw	ra,20(sp)
  807384:	dcc00417 	ldw	r19,16(sp)
  807388:	dc800317 	ldw	r18,12(sp)
  80738c:	dc400217 	ldw	r17,8(sp)
  807390:	dc000117 	ldw	r16,4(sp)
  807394:	dec00604 	addi	sp,sp,24
  807398:	f800283a 	ret
  80739c:	89400117 	ldw	r5,4(r17)
  8073a0:	9009883a 	mov	r4,r18
  8073a4:	d9c00015 	stw	r7,0(sp)
  8073a8:	29400044 	addi	r5,r5,1
  8073ac:	08072180 	call	807218 <_Balloc>
  8073b0:	89800417 	ldw	r6,16(r17)
  8073b4:	89400304 	addi	r5,r17,12
  8073b8:	11000304 	addi	r4,r2,12
  8073bc:	31800084 	addi	r6,r6,2
  8073c0:	318d883a 	add	r6,r6,r6
  8073c4:	318d883a 	add	r6,r6,r6
  8073c8:	1027883a 	mov	r19,r2
  8073cc:	08070d00 	call	8070d0 <memcpy>
  8073d0:	d9c00017 	ldw	r7,0(sp)
  8073d4:	88000a26 	beq	r17,zero,807400 <__multadd+0x118>
  8073d8:	88c00117 	ldw	r3,4(r17)
  8073dc:	90801317 	ldw	r2,76(r18)
  8073e0:	18c7883a 	add	r3,r3,r3
  8073e4:	18c7883a 	add	r3,r3,r3
  8073e8:	10c5883a 	add	r2,r2,r3
  8073ec:	10c00017 	ldw	r3,0(r2)
  8073f0:	88c00015 	stw	r3,0(r17)
  8073f4:	14400015 	stw	r17,0(r2)
  8073f8:	9823883a 	mov	r17,r19
  8073fc:	003fd806 	br	807360 <__alt_mem_onchip_mem+0xff7ff360>
  807400:	9823883a 	mov	r17,r19
  807404:	003fd606 	br	807360 <__alt_mem_onchip_mem+0xff7ff360>

00807408 <__s2b>:
  807408:	defff904 	addi	sp,sp,-28
  80740c:	dc400115 	stw	r17,4(sp)
  807410:	dc000015 	stw	r16,0(sp)
  807414:	2023883a 	mov	r17,r4
  807418:	2821883a 	mov	r16,r5
  80741c:	39000204 	addi	r4,r7,8
  807420:	01400244 	movi	r5,9
  807424:	dcc00315 	stw	r19,12(sp)
  807428:	dc800215 	stw	r18,8(sp)
  80742c:	dfc00615 	stw	ra,24(sp)
  807430:	dd400515 	stw	r21,20(sp)
  807434:	dd000415 	stw	r20,16(sp)
  807438:	3825883a 	mov	r18,r7
  80743c:	3027883a 	mov	r19,r6
  807440:	0800aa40 	call	800aa4 <__divsi3>
  807444:	00c00044 	movi	r3,1
  807448:	000b883a 	mov	r5,zero
  80744c:	1880030e 	bge	r3,r2,80745c <__s2b+0x54>
  807450:	18c7883a 	add	r3,r3,r3
  807454:	29400044 	addi	r5,r5,1
  807458:	18bffd16 	blt	r3,r2,807450 <__alt_mem_onchip_mem+0xff7ff450>
  80745c:	8809883a 	mov	r4,r17
  807460:	08072180 	call	807218 <_Balloc>
  807464:	d8c00717 	ldw	r3,28(sp)
  807468:	10c00515 	stw	r3,20(r2)
  80746c:	00c00044 	movi	r3,1
  807470:	10c00415 	stw	r3,16(r2)
  807474:	00c00244 	movi	r3,9
  807478:	1cc0210e 	bge	r3,r19,807500 <__s2b+0xf8>
  80747c:	80eb883a 	add	r21,r16,r3
  807480:	a829883a 	mov	r20,r21
  807484:	84e1883a 	add	r16,r16,r19
  807488:	a1c00007 	ldb	r7,0(r20)
  80748c:	01800284 	movi	r6,10
  807490:	a5000044 	addi	r20,r20,1
  807494:	100b883a 	mov	r5,r2
  807498:	39fff404 	addi	r7,r7,-48
  80749c:	8809883a 	mov	r4,r17
  8074a0:	08072e80 	call	8072e8 <__multadd>
  8074a4:	a43ff81e 	bne	r20,r16,807488 <__alt_mem_onchip_mem+0xff7ff488>
  8074a8:	ace1883a 	add	r16,r21,r19
  8074ac:	843ffe04 	addi	r16,r16,-8
  8074b0:	9c800a0e 	bge	r19,r18,8074dc <__s2b+0xd4>
  8074b4:	94e5c83a 	sub	r18,r18,r19
  8074b8:	84a5883a 	add	r18,r16,r18
  8074bc:	81c00007 	ldb	r7,0(r16)
  8074c0:	01800284 	movi	r6,10
  8074c4:	84000044 	addi	r16,r16,1
  8074c8:	100b883a 	mov	r5,r2
  8074cc:	39fff404 	addi	r7,r7,-48
  8074d0:	8809883a 	mov	r4,r17
  8074d4:	08072e80 	call	8072e8 <__multadd>
  8074d8:	84bff81e 	bne	r16,r18,8074bc <__alt_mem_onchip_mem+0xff7ff4bc>
  8074dc:	dfc00617 	ldw	ra,24(sp)
  8074e0:	dd400517 	ldw	r21,20(sp)
  8074e4:	dd000417 	ldw	r20,16(sp)
  8074e8:	dcc00317 	ldw	r19,12(sp)
  8074ec:	dc800217 	ldw	r18,8(sp)
  8074f0:	dc400117 	ldw	r17,4(sp)
  8074f4:	dc000017 	ldw	r16,0(sp)
  8074f8:	dec00704 	addi	sp,sp,28
  8074fc:	f800283a 	ret
  807500:	84000284 	addi	r16,r16,10
  807504:	1827883a 	mov	r19,r3
  807508:	003fe906 	br	8074b0 <__alt_mem_onchip_mem+0xff7ff4b0>

0080750c <__hi0bits>:
  80750c:	20bfffec 	andhi	r2,r4,65535
  807510:	1000141e 	bne	r2,zero,807564 <__hi0bits+0x58>
  807514:	2008943a 	slli	r4,r4,16
  807518:	00800404 	movi	r2,16
  80751c:	20ffc02c 	andhi	r3,r4,65280
  807520:	1800021e 	bne	r3,zero,80752c <__hi0bits+0x20>
  807524:	2008923a 	slli	r4,r4,8
  807528:	10800204 	addi	r2,r2,8
  80752c:	20fc002c 	andhi	r3,r4,61440
  807530:	1800021e 	bne	r3,zero,80753c <__hi0bits+0x30>
  807534:	2008913a 	slli	r4,r4,4
  807538:	10800104 	addi	r2,r2,4
  80753c:	20f0002c 	andhi	r3,r4,49152
  807540:	1800031e 	bne	r3,zero,807550 <__hi0bits+0x44>
  807544:	2109883a 	add	r4,r4,r4
  807548:	10800084 	addi	r2,r2,2
  80754c:	2109883a 	add	r4,r4,r4
  807550:	20000316 	blt	r4,zero,807560 <__hi0bits+0x54>
  807554:	2110002c 	andhi	r4,r4,16384
  807558:	2000041e 	bne	r4,zero,80756c <__hi0bits+0x60>
  80755c:	00800804 	movi	r2,32
  807560:	f800283a 	ret
  807564:	0005883a 	mov	r2,zero
  807568:	003fec06 	br	80751c <__alt_mem_onchip_mem+0xff7ff51c>
  80756c:	10800044 	addi	r2,r2,1
  807570:	f800283a 	ret

00807574 <__lo0bits>:
  807574:	20c00017 	ldw	r3,0(r4)
  807578:	188001cc 	andi	r2,r3,7
  80757c:	10000826 	beq	r2,zero,8075a0 <__lo0bits+0x2c>
  807580:	1880004c 	andi	r2,r3,1
  807584:	1000211e 	bne	r2,zero,80760c <__lo0bits+0x98>
  807588:	1880008c 	andi	r2,r3,2
  80758c:	1000211e 	bne	r2,zero,807614 <__lo0bits+0xa0>
  807590:	1806d0ba 	srli	r3,r3,2
  807594:	00800084 	movi	r2,2
  807598:	20c00015 	stw	r3,0(r4)
  80759c:	f800283a 	ret
  8075a0:	18bfffcc 	andi	r2,r3,65535
  8075a4:	10001326 	beq	r2,zero,8075f4 <__lo0bits+0x80>
  8075a8:	0005883a 	mov	r2,zero
  8075ac:	19403fcc 	andi	r5,r3,255
  8075b0:	2800021e 	bne	r5,zero,8075bc <__lo0bits+0x48>
  8075b4:	1806d23a 	srli	r3,r3,8
  8075b8:	10800204 	addi	r2,r2,8
  8075bc:	194003cc 	andi	r5,r3,15
  8075c0:	2800021e 	bne	r5,zero,8075cc <__lo0bits+0x58>
  8075c4:	1806d13a 	srli	r3,r3,4
  8075c8:	10800104 	addi	r2,r2,4
  8075cc:	194000cc 	andi	r5,r3,3
  8075d0:	2800021e 	bne	r5,zero,8075dc <__lo0bits+0x68>
  8075d4:	1806d0ba 	srli	r3,r3,2
  8075d8:	10800084 	addi	r2,r2,2
  8075dc:	1940004c 	andi	r5,r3,1
  8075e0:	2800081e 	bne	r5,zero,807604 <__lo0bits+0x90>
  8075e4:	1806d07a 	srli	r3,r3,1
  8075e8:	1800051e 	bne	r3,zero,807600 <__lo0bits+0x8c>
  8075ec:	00800804 	movi	r2,32
  8075f0:	f800283a 	ret
  8075f4:	1806d43a 	srli	r3,r3,16
  8075f8:	00800404 	movi	r2,16
  8075fc:	003feb06 	br	8075ac <__alt_mem_onchip_mem+0xff7ff5ac>
  807600:	10800044 	addi	r2,r2,1
  807604:	20c00015 	stw	r3,0(r4)
  807608:	f800283a 	ret
  80760c:	0005883a 	mov	r2,zero
  807610:	f800283a 	ret
  807614:	1806d07a 	srli	r3,r3,1
  807618:	00800044 	movi	r2,1
  80761c:	20c00015 	stw	r3,0(r4)
  807620:	f800283a 	ret

00807624 <__i2b>:
  807624:	defffd04 	addi	sp,sp,-12
  807628:	dc000015 	stw	r16,0(sp)
  80762c:	04000044 	movi	r16,1
  807630:	dc400115 	stw	r17,4(sp)
  807634:	2823883a 	mov	r17,r5
  807638:	800b883a 	mov	r5,r16
  80763c:	dfc00215 	stw	ra,8(sp)
  807640:	08072180 	call	807218 <_Balloc>
  807644:	14400515 	stw	r17,20(r2)
  807648:	14000415 	stw	r16,16(r2)
  80764c:	dfc00217 	ldw	ra,8(sp)
  807650:	dc400117 	ldw	r17,4(sp)
  807654:	dc000017 	ldw	r16,0(sp)
  807658:	dec00304 	addi	sp,sp,12
  80765c:	f800283a 	ret

00807660 <__multiply>:
  807660:	defffa04 	addi	sp,sp,-24
  807664:	dcc00315 	stw	r19,12(sp)
  807668:	dc800215 	stw	r18,8(sp)
  80766c:	34c00417 	ldw	r19,16(r6)
  807670:	2c800417 	ldw	r18,16(r5)
  807674:	dd000415 	stw	r20,16(sp)
  807678:	dc400115 	stw	r17,4(sp)
  80767c:	dfc00515 	stw	ra,20(sp)
  807680:	dc000015 	stw	r16,0(sp)
  807684:	2829883a 	mov	r20,r5
  807688:	3023883a 	mov	r17,r6
  80768c:	94c0050e 	bge	r18,r19,8076a4 <__multiply+0x44>
  807690:	9007883a 	mov	r3,r18
  807694:	3029883a 	mov	r20,r6
  807698:	9825883a 	mov	r18,r19
  80769c:	2823883a 	mov	r17,r5
  8076a0:	1827883a 	mov	r19,r3
  8076a4:	a0800217 	ldw	r2,8(r20)
  8076a8:	94e1883a 	add	r16,r18,r19
  8076ac:	a1400117 	ldw	r5,4(r20)
  8076b0:	1400010e 	bge	r2,r16,8076b8 <__multiply+0x58>
  8076b4:	29400044 	addi	r5,r5,1
  8076b8:	08072180 	call	807218 <_Balloc>
  8076bc:	8415883a 	add	r10,r16,r16
  8076c0:	12c00504 	addi	r11,r2,20
  8076c4:	5295883a 	add	r10,r10,r10
  8076c8:	5a95883a 	add	r10,r11,r10
  8076cc:	5807883a 	mov	r3,r11
  8076d0:	5a80032e 	bgeu	r11,r10,8076e0 <__multiply+0x80>
  8076d4:	18000015 	stw	zero,0(r3)
  8076d8:	18c00104 	addi	r3,r3,4
  8076dc:	1abffd36 	bltu	r3,r10,8076d4 <__alt_mem_onchip_mem+0xff7ff6d4>
  8076e0:	9ce7883a 	add	r19,r19,r19
  8076e4:	94a5883a 	add	r18,r18,r18
  8076e8:	89800504 	addi	r6,r17,20
  8076ec:	9ce7883a 	add	r19,r19,r19
  8076f0:	a3400504 	addi	r13,r20,20
  8076f4:	94a5883a 	add	r18,r18,r18
  8076f8:	34d9883a 	add	r12,r6,r19
  8076fc:	6c93883a 	add	r9,r13,r18
  807700:	3300422e 	bgeu	r6,r12,80780c <__multiply+0x1ac>
  807704:	37c00017 	ldw	ra,0(r6)
  807708:	fbffffcc 	andi	r15,ra,65535
  80770c:	78001b26 	beq	r15,zero,80777c <__multiply+0x11c>
  807710:	5811883a 	mov	r8,r11
  807714:	681d883a 	mov	r14,r13
  807718:	000f883a 	mov	r7,zero
  80771c:	71000017 	ldw	r4,0(r14)
  807720:	40c00017 	ldw	r3,0(r8)
  807724:	73800104 	addi	r14,r14,4
  807728:	217fffcc 	andi	r5,r4,65535
  80772c:	2bcb383a 	mul	r5,r5,r15
  807730:	2008d43a 	srli	r4,r4,16
  807734:	1c7fffcc 	andi	r17,r3,65535
  807738:	2c4b883a 	add	r5,r5,r17
  80773c:	29cb883a 	add	r5,r5,r7
  807740:	23c9383a 	mul	r4,r4,r15
  807744:	1806d43a 	srli	r3,r3,16
  807748:	280ed43a 	srli	r7,r5,16
  80774c:	297fffcc 	andi	r5,r5,65535
  807750:	20c7883a 	add	r3,r4,r3
  807754:	19c7883a 	add	r3,r3,r7
  807758:	1808943a 	slli	r4,r3,16
  80775c:	4023883a 	mov	r17,r8
  807760:	180ed43a 	srli	r7,r3,16
  807764:	214ab03a 	or	r5,r4,r5
  807768:	41400015 	stw	r5,0(r8)
  80776c:	42000104 	addi	r8,r8,4
  807770:	727fea36 	bltu	r14,r9,80771c <__alt_mem_onchip_mem+0xff7ff71c>
  807774:	89c00115 	stw	r7,4(r17)
  807778:	37c00017 	ldw	ra,0(r6)
  80777c:	f83ed43a 	srli	ra,ra,16
  807780:	f8001f26 	beq	ra,zero,807800 <__multiply+0x1a0>
  807784:	58c00017 	ldw	r3,0(r11)
  807788:	681d883a 	mov	r14,r13
  80778c:	581f883a 	mov	r15,r11
  807790:	1811883a 	mov	r8,r3
  807794:	5825883a 	mov	r18,r11
  807798:	000f883a 	mov	r7,zero
  80779c:	00000106 	br	8077a4 <__multiply+0x144>
  8077a0:	8825883a 	mov	r18,r17
  8077a4:	7140000b 	ldhu	r5,0(r14)
  8077a8:	4010d43a 	srli	r8,r8,16
  8077ac:	193fffcc 	andi	r4,r3,65535
  8077b0:	2fcb383a 	mul	r5,r5,ra
  8077b4:	7bc00104 	addi	r15,r15,4
  8077b8:	73800104 	addi	r14,r14,4
  8077bc:	2a0b883a 	add	r5,r5,r8
  8077c0:	29cb883a 	add	r5,r5,r7
  8077c4:	2806943a 	slli	r3,r5,16
  8077c8:	94400104 	addi	r17,r18,4
  8077cc:	280ad43a 	srli	r5,r5,16
  8077d0:	1908b03a 	or	r4,r3,r4
  8077d4:	793fff15 	stw	r4,-4(r15)
  8077d8:	70ffff17 	ldw	r3,-4(r14)
  8077dc:	8a000017 	ldw	r8,0(r17)
  8077e0:	1806d43a 	srli	r3,r3,16
  8077e4:	413fffcc 	andi	r4,r8,65535
  8077e8:	1fc7383a 	mul	r3,r3,ra
  8077ec:	1907883a 	add	r3,r3,r4
  8077f0:	1947883a 	add	r3,r3,r5
  8077f4:	180ed43a 	srli	r7,r3,16
  8077f8:	727fe936 	bltu	r14,r9,8077a0 <__alt_mem_onchip_mem+0xff7ff7a0>
  8077fc:	90c00115 	stw	r3,4(r18)
  807800:	31800104 	addi	r6,r6,4
  807804:	5ac00104 	addi	r11,r11,4
  807808:	333fbe36 	bltu	r6,r12,807704 <__alt_mem_onchip_mem+0xff7ff704>
  80780c:	0400090e 	bge	zero,r16,807834 <__multiply+0x1d4>
  807810:	50ffff17 	ldw	r3,-4(r10)
  807814:	52bfff04 	addi	r10,r10,-4
  807818:	18000326 	beq	r3,zero,807828 <__multiply+0x1c8>
  80781c:	00000506 	br	807834 <__multiply+0x1d4>
  807820:	50c00017 	ldw	r3,0(r10)
  807824:	1800031e 	bne	r3,zero,807834 <__multiply+0x1d4>
  807828:	843fffc4 	addi	r16,r16,-1
  80782c:	52bfff04 	addi	r10,r10,-4
  807830:	803ffb1e 	bne	r16,zero,807820 <__alt_mem_onchip_mem+0xff7ff820>
  807834:	14000415 	stw	r16,16(r2)
  807838:	dfc00517 	ldw	ra,20(sp)
  80783c:	dd000417 	ldw	r20,16(sp)
  807840:	dcc00317 	ldw	r19,12(sp)
  807844:	dc800217 	ldw	r18,8(sp)
  807848:	dc400117 	ldw	r17,4(sp)
  80784c:	dc000017 	ldw	r16,0(sp)
  807850:	dec00604 	addi	sp,sp,24
  807854:	f800283a 	ret

00807858 <__pow5mult>:
  807858:	defffa04 	addi	sp,sp,-24
  80785c:	dcc00315 	stw	r19,12(sp)
  807860:	dc000015 	stw	r16,0(sp)
  807864:	dfc00515 	stw	ra,20(sp)
  807868:	dd000415 	stw	r20,16(sp)
  80786c:	dc800215 	stw	r18,8(sp)
  807870:	dc400115 	stw	r17,4(sp)
  807874:	308000cc 	andi	r2,r6,3
  807878:	3021883a 	mov	r16,r6
  80787c:	2027883a 	mov	r19,r4
  807880:	10002f1e 	bne	r2,zero,807940 <__pow5mult+0xe8>
  807884:	2825883a 	mov	r18,r5
  807888:	8021d0ba 	srai	r16,r16,2
  80788c:	80001a26 	beq	r16,zero,8078f8 <__pow5mult+0xa0>
  807890:	9c401217 	ldw	r17,72(r19)
  807894:	8800061e 	bne	r17,zero,8078b0 <__pow5mult+0x58>
  807898:	00003406 	br	80796c <__pow5mult+0x114>
  80789c:	8021d07a 	srai	r16,r16,1
  8078a0:	80001526 	beq	r16,zero,8078f8 <__pow5mult+0xa0>
  8078a4:	88800017 	ldw	r2,0(r17)
  8078a8:	10001c26 	beq	r2,zero,80791c <__pow5mult+0xc4>
  8078ac:	1023883a 	mov	r17,r2
  8078b0:	8080004c 	andi	r2,r16,1
  8078b4:	103ff926 	beq	r2,zero,80789c <__alt_mem_onchip_mem+0xff7ff89c>
  8078b8:	880d883a 	mov	r6,r17
  8078bc:	900b883a 	mov	r5,r18
  8078c0:	9809883a 	mov	r4,r19
  8078c4:	08076600 	call	807660 <__multiply>
  8078c8:	90001b26 	beq	r18,zero,807938 <__pow5mult+0xe0>
  8078cc:	91000117 	ldw	r4,4(r18)
  8078d0:	98c01317 	ldw	r3,76(r19)
  8078d4:	8021d07a 	srai	r16,r16,1
  8078d8:	2109883a 	add	r4,r4,r4
  8078dc:	2109883a 	add	r4,r4,r4
  8078e0:	1907883a 	add	r3,r3,r4
  8078e4:	19000017 	ldw	r4,0(r3)
  8078e8:	91000015 	stw	r4,0(r18)
  8078ec:	1c800015 	stw	r18,0(r3)
  8078f0:	1025883a 	mov	r18,r2
  8078f4:	803feb1e 	bne	r16,zero,8078a4 <__alt_mem_onchip_mem+0xff7ff8a4>
  8078f8:	9005883a 	mov	r2,r18
  8078fc:	dfc00517 	ldw	ra,20(sp)
  807900:	dd000417 	ldw	r20,16(sp)
  807904:	dcc00317 	ldw	r19,12(sp)
  807908:	dc800217 	ldw	r18,8(sp)
  80790c:	dc400117 	ldw	r17,4(sp)
  807910:	dc000017 	ldw	r16,0(sp)
  807914:	dec00604 	addi	sp,sp,24
  807918:	f800283a 	ret
  80791c:	880d883a 	mov	r6,r17
  807920:	880b883a 	mov	r5,r17
  807924:	9809883a 	mov	r4,r19
  807928:	08076600 	call	807660 <__multiply>
  80792c:	88800015 	stw	r2,0(r17)
  807930:	10000015 	stw	zero,0(r2)
  807934:	003fdd06 	br	8078ac <__alt_mem_onchip_mem+0xff7ff8ac>
  807938:	1025883a 	mov	r18,r2
  80793c:	003fd706 	br	80789c <__alt_mem_onchip_mem+0xff7ff89c>
  807940:	10bfffc4 	addi	r2,r2,-1
  807944:	1085883a 	add	r2,r2,r2
  807948:	00c02074 	movhi	r3,129
  80794c:	18c82a04 	addi	r3,r3,8360
  807950:	1085883a 	add	r2,r2,r2
  807954:	1885883a 	add	r2,r3,r2
  807958:	11800017 	ldw	r6,0(r2)
  80795c:	000f883a 	mov	r7,zero
  807960:	08072e80 	call	8072e8 <__multadd>
  807964:	1025883a 	mov	r18,r2
  807968:	003fc706 	br	807888 <__alt_mem_onchip_mem+0xff7ff888>
  80796c:	05000044 	movi	r20,1
  807970:	a00b883a 	mov	r5,r20
  807974:	9809883a 	mov	r4,r19
  807978:	08072180 	call	807218 <_Balloc>
  80797c:	1023883a 	mov	r17,r2
  807980:	00809c44 	movi	r2,625
  807984:	88800515 	stw	r2,20(r17)
  807988:	8d000415 	stw	r20,16(r17)
  80798c:	9c401215 	stw	r17,72(r19)
  807990:	88000015 	stw	zero,0(r17)
  807994:	003fc606 	br	8078b0 <__alt_mem_onchip_mem+0xff7ff8b0>

00807998 <__lshift>:
  807998:	defff904 	addi	sp,sp,-28
  80799c:	dd400515 	stw	r21,20(sp)
  8079a0:	dcc00315 	stw	r19,12(sp)
  8079a4:	302bd17a 	srai	r21,r6,5
  8079a8:	2cc00417 	ldw	r19,16(r5)
  8079ac:	28800217 	ldw	r2,8(r5)
  8079b0:	dd000415 	stw	r20,16(sp)
  8079b4:	ace7883a 	add	r19,r21,r19
  8079b8:	dc800215 	stw	r18,8(sp)
  8079bc:	dc400115 	stw	r17,4(sp)
  8079c0:	dc000015 	stw	r16,0(sp)
  8079c4:	dfc00615 	stw	ra,24(sp)
  8079c8:	9c000044 	addi	r16,r19,1
  8079cc:	2823883a 	mov	r17,r5
  8079d0:	3029883a 	mov	r20,r6
  8079d4:	2025883a 	mov	r18,r4
  8079d8:	29400117 	ldw	r5,4(r5)
  8079dc:	1400030e 	bge	r2,r16,8079ec <__lshift+0x54>
  8079e0:	1085883a 	add	r2,r2,r2
  8079e4:	29400044 	addi	r5,r5,1
  8079e8:	143ffd16 	blt	r2,r16,8079e0 <__alt_mem_onchip_mem+0xff7ff9e0>
  8079ec:	9009883a 	mov	r4,r18
  8079f0:	08072180 	call	807218 <_Balloc>
  8079f4:	10c00504 	addi	r3,r2,20
  8079f8:	0540070e 	bge	zero,r21,807a18 <__lshift+0x80>
  8079fc:	ad6b883a 	add	r21,r21,r21
  807a00:	ad6b883a 	add	r21,r21,r21
  807a04:	1809883a 	mov	r4,r3
  807a08:	1d47883a 	add	r3,r3,r21
  807a0c:	20000015 	stw	zero,0(r4)
  807a10:	21000104 	addi	r4,r4,4
  807a14:	193ffd1e 	bne	r3,r4,807a0c <__alt_mem_onchip_mem+0xff7ffa0c>
  807a18:	8a000417 	ldw	r8,16(r17)
  807a1c:	89000504 	addi	r4,r17,20
  807a20:	a18007cc 	andi	r6,r20,31
  807a24:	4211883a 	add	r8,r8,r8
  807a28:	4211883a 	add	r8,r8,r8
  807a2c:	2211883a 	add	r8,r4,r8
  807a30:	30002326 	beq	r6,zero,807ac0 <__lshift+0x128>
  807a34:	02400804 	movi	r9,32
  807a38:	4993c83a 	sub	r9,r9,r6
  807a3c:	000b883a 	mov	r5,zero
  807a40:	21c00017 	ldw	r7,0(r4)
  807a44:	1815883a 	mov	r10,r3
  807a48:	18c00104 	addi	r3,r3,4
  807a4c:	398e983a 	sll	r7,r7,r6
  807a50:	21000104 	addi	r4,r4,4
  807a54:	394ab03a 	or	r5,r7,r5
  807a58:	197fff15 	stw	r5,-4(r3)
  807a5c:	217fff17 	ldw	r5,-4(r4)
  807a60:	2a4ad83a 	srl	r5,r5,r9
  807a64:	223ff636 	bltu	r4,r8,807a40 <__alt_mem_onchip_mem+0xff7ffa40>
  807a68:	51400115 	stw	r5,4(r10)
  807a6c:	28001a1e 	bne	r5,zero,807ad8 <__lshift+0x140>
  807a70:	843fffc4 	addi	r16,r16,-1
  807a74:	14000415 	stw	r16,16(r2)
  807a78:	88000826 	beq	r17,zero,807a9c <__lshift+0x104>
  807a7c:	89000117 	ldw	r4,4(r17)
  807a80:	90c01317 	ldw	r3,76(r18)
  807a84:	2109883a 	add	r4,r4,r4
  807a88:	2109883a 	add	r4,r4,r4
  807a8c:	1907883a 	add	r3,r3,r4
  807a90:	19000017 	ldw	r4,0(r3)
  807a94:	89000015 	stw	r4,0(r17)
  807a98:	1c400015 	stw	r17,0(r3)
  807a9c:	dfc00617 	ldw	ra,24(sp)
  807aa0:	dd400517 	ldw	r21,20(sp)
  807aa4:	dd000417 	ldw	r20,16(sp)
  807aa8:	dcc00317 	ldw	r19,12(sp)
  807aac:	dc800217 	ldw	r18,8(sp)
  807ab0:	dc400117 	ldw	r17,4(sp)
  807ab4:	dc000017 	ldw	r16,0(sp)
  807ab8:	dec00704 	addi	sp,sp,28
  807abc:	f800283a 	ret
  807ac0:	21400017 	ldw	r5,0(r4)
  807ac4:	18c00104 	addi	r3,r3,4
  807ac8:	21000104 	addi	r4,r4,4
  807acc:	197fff15 	stw	r5,-4(r3)
  807ad0:	223ffb36 	bltu	r4,r8,807ac0 <__alt_mem_onchip_mem+0xff7ffac0>
  807ad4:	003fe606 	br	807a70 <__alt_mem_onchip_mem+0xff7ffa70>
  807ad8:	9c000084 	addi	r16,r19,2
  807adc:	003fe406 	br	807a70 <__alt_mem_onchip_mem+0xff7ffa70>

00807ae0 <__mcmp>:
  807ae0:	20800417 	ldw	r2,16(r4)
  807ae4:	28c00417 	ldw	r3,16(r5)
  807ae8:	10c5c83a 	sub	r2,r2,r3
  807aec:	1000111e 	bne	r2,zero,807b34 <__mcmp+0x54>
  807af0:	18c7883a 	add	r3,r3,r3
  807af4:	18c7883a 	add	r3,r3,r3
  807af8:	21000504 	addi	r4,r4,20
  807afc:	29400504 	addi	r5,r5,20
  807b00:	20c5883a 	add	r2,r4,r3
  807b04:	28cb883a 	add	r5,r5,r3
  807b08:	00000106 	br	807b10 <__mcmp+0x30>
  807b0c:	20800a2e 	bgeu	r4,r2,807b38 <__mcmp+0x58>
  807b10:	10bfff04 	addi	r2,r2,-4
  807b14:	297fff04 	addi	r5,r5,-4
  807b18:	11800017 	ldw	r6,0(r2)
  807b1c:	28c00017 	ldw	r3,0(r5)
  807b20:	30fffa26 	beq	r6,r3,807b0c <__alt_mem_onchip_mem+0xff7ffb0c>
  807b24:	30c00236 	bltu	r6,r3,807b30 <__mcmp+0x50>
  807b28:	00800044 	movi	r2,1
  807b2c:	f800283a 	ret
  807b30:	00bfffc4 	movi	r2,-1
  807b34:	f800283a 	ret
  807b38:	0005883a 	mov	r2,zero
  807b3c:	f800283a 	ret

00807b40 <__mdiff>:
  807b40:	28c00417 	ldw	r3,16(r5)
  807b44:	30800417 	ldw	r2,16(r6)
  807b48:	defffa04 	addi	sp,sp,-24
  807b4c:	dcc00315 	stw	r19,12(sp)
  807b50:	dc800215 	stw	r18,8(sp)
  807b54:	dfc00515 	stw	ra,20(sp)
  807b58:	dd000415 	stw	r20,16(sp)
  807b5c:	dc400115 	stw	r17,4(sp)
  807b60:	dc000015 	stw	r16,0(sp)
  807b64:	1887c83a 	sub	r3,r3,r2
  807b68:	2825883a 	mov	r18,r5
  807b6c:	3027883a 	mov	r19,r6
  807b70:	1800141e 	bne	r3,zero,807bc4 <__mdiff+0x84>
  807b74:	1085883a 	add	r2,r2,r2
  807b78:	1085883a 	add	r2,r2,r2
  807b7c:	2a000504 	addi	r8,r5,20
  807b80:	34000504 	addi	r16,r6,20
  807b84:	4087883a 	add	r3,r8,r2
  807b88:	8085883a 	add	r2,r16,r2
  807b8c:	00000106 	br	807b94 <__mdiff+0x54>
  807b90:	40c0592e 	bgeu	r8,r3,807cf8 <__mdiff+0x1b8>
  807b94:	18ffff04 	addi	r3,r3,-4
  807b98:	10bfff04 	addi	r2,r2,-4
  807b9c:	19c00017 	ldw	r7,0(r3)
  807ba0:	11400017 	ldw	r5,0(r2)
  807ba4:	397ffa26 	beq	r7,r5,807b90 <__alt_mem_onchip_mem+0xff7ffb90>
  807ba8:	3940592e 	bgeu	r7,r5,807d10 <__mdiff+0x1d0>
  807bac:	9005883a 	mov	r2,r18
  807bb0:	4023883a 	mov	r17,r8
  807bb4:	9825883a 	mov	r18,r19
  807bb8:	05000044 	movi	r20,1
  807bbc:	1027883a 	mov	r19,r2
  807bc0:	00000406 	br	807bd4 <__mdiff+0x94>
  807bc4:	18005616 	blt	r3,zero,807d20 <__mdiff+0x1e0>
  807bc8:	34400504 	addi	r17,r6,20
  807bcc:	2c000504 	addi	r16,r5,20
  807bd0:	0029883a 	mov	r20,zero
  807bd4:	91400117 	ldw	r5,4(r18)
  807bd8:	08072180 	call	807218 <_Balloc>
  807bdc:	92400417 	ldw	r9,16(r18)
  807be0:	9b000417 	ldw	r12,16(r19)
  807be4:	12c00504 	addi	r11,r2,20
  807be8:	4a51883a 	add	r8,r9,r9
  807bec:	6319883a 	add	r12,r12,r12
  807bf0:	4211883a 	add	r8,r8,r8
  807bf4:	6319883a 	add	r12,r12,r12
  807bf8:	15000315 	stw	r20,12(r2)
  807bfc:	8211883a 	add	r8,r16,r8
  807c00:	8b19883a 	add	r12,r17,r12
  807c04:	0007883a 	mov	r3,zero
  807c08:	81400017 	ldw	r5,0(r16)
  807c0c:	89c00017 	ldw	r7,0(r17)
  807c10:	59800104 	addi	r6,r11,4
  807c14:	293fffcc 	andi	r4,r5,65535
  807c18:	20c7883a 	add	r3,r4,r3
  807c1c:	393fffcc 	andi	r4,r7,65535
  807c20:	1909c83a 	sub	r4,r3,r4
  807c24:	280ad43a 	srli	r5,r5,16
  807c28:	380ed43a 	srli	r7,r7,16
  807c2c:	2007d43a 	srai	r3,r4,16
  807c30:	213fffcc 	andi	r4,r4,65535
  807c34:	29cbc83a 	sub	r5,r5,r7
  807c38:	28c7883a 	add	r3,r5,r3
  807c3c:	180a943a 	slli	r5,r3,16
  807c40:	8c400104 	addi	r17,r17,4
  807c44:	84000104 	addi	r16,r16,4
  807c48:	2908b03a 	or	r4,r5,r4
  807c4c:	59000015 	stw	r4,0(r11)
  807c50:	1807d43a 	srai	r3,r3,16
  807c54:	3015883a 	mov	r10,r6
  807c58:	3017883a 	mov	r11,r6
  807c5c:	8b3fea36 	bltu	r17,r12,807c08 <__alt_mem_onchip_mem+0xff7ffc08>
  807c60:	8200162e 	bgeu	r16,r8,807cbc <__mdiff+0x17c>
  807c64:	8017883a 	mov	r11,r16
  807c68:	59400017 	ldw	r5,0(r11)
  807c6c:	31800104 	addi	r6,r6,4
  807c70:	5ac00104 	addi	r11,r11,4
  807c74:	293fffcc 	andi	r4,r5,65535
  807c78:	20c7883a 	add	r3,r4,r3
  807c7c:	280ed43a 	srli	r7,r5,16
  807c80:	180bd43a 	srai	r5,r3,16
  807c84:	193fffcc 	andi	r4,r3,65535
  807c88:	3947883a 	add	r3,r7,r5
  807c8c:	180a943a 	slli	r5,r3,16
  807c90:	1807d43a 	srai	r3,r3,16
  807c94:	2908b03a 	or	r4,r5,r4
  807c98:	313fff15 	stw	r4,-4(r6)
  807c9c:	5a3ff236 	bltu	r11,r8,807c68 <__alt_mem_onchip_mem+0xff7ffc68>
  807ca0:	0406303a 	nor	r3,zero,r16
  807ca4:	1a07883a 	add	r3,r3,r8
  807ca8:	1806d0ba 	srli	r3,r3,2
  807cac:	18c00044 	addi	r3,r3,1
  807cb0:	18c7883a 	add	r3,r3,r3
  807cb4:	18c7883a 	add	r3,r3,r3
  807cb8:	50d5883a 	add	r10,r10,r3
  807cbc:	50ffff04 	addi	r3,r10,-4
  807cc0:	2000041e 	bne	r4,zero,807cd4 <__mdiff+0x194>
  807cc4:	18ffff04 	addi	r3,r3,-4
  807cc8:	19000017 	ldw	r4,0(r3)
  807ccc:	4a7fffc4 	addi	r9,r9,-1
  807cd0:	203ffc26 	beq	r4,zero,807cc4 <__alt_mem_onchip_mem+0xff7ffcc4>
  807cd4:	12400415 	stw	r9,16(r2)
  807cd8:	dfc00517 	ldw	ra,20(sp)
  807cdc:	dd000417 	ldw	r20,16(sp)
  807ce0:	dcc00317 	ldw	r19,12(sp)
  807ce4:	dc800217 	ldw	r18,8(sp)
  807ce8:	dc400117 	ldw	r17,4(sp)
  807cec:	dc000017 	ldw	r16,0(sp)
  807cf0:	dec00604 	addi	sp,sp,24
  807cf4:	f800283a 	ret
  807cf8:	000b883a 	mov	r5,zero
  807cfc:	08072180 	call	807218 <_Balloc>
  807d00:	00c00044 	movi	r3,1
  807d04:	10c00415 	stw	r3,16(r2)
  807d08:	10000515 	stw	zero,20(r2)
  807d0c:	003ff206 	br	807cd8 <__alt_mem_onchip_mem+0xff7ffcd8>
  807d10:	8023883a 	mov	r17,r16
  807d14:	0029883a 	mov	r20,zero
  807d18:	4021883a 	mov	r16,r8
  807d1c:	003fad06 	br	807bd4 <__alt_mem_onchip_mem+0xff7ffbd4>
  807d20:	9005883a 	mov	r2,r18
  807d24:	94400504 	addi	r17,r18,20
  807d28:	9c000504 	addi	r16,r19,20
  807d2c:	9825883a 	mov	r18,r19
  807d30:	05000044 	movi	r20,1
  807d34:	1027883a 	mov	r19,r2
  807d38:	003fa606 	br	807bd4 <__alt_mem_onchip_mem+0xff7ffbd4>

00807d3c <__ulp>:
  807d3c:	295ffc2c 	andhi	r5,r5,32752
  807d40:	00bf3034 	movhi	r2,64704
  807d44:	2887883a 	add	r3,r5,r2
  807d48:	00c0020e 	bge	zero,r3,807d54 <__ulp+0x18>
  807d4c:	0005883a 	mov	r2,zero
  807d50:	f800283a 	ret
  807d54:	00c7c83a 	sub	r3,zero,r3
  807d58:	1807d53a 	srai	r3,r3,20
  807d5c:	008004c4 	movi	r2,19
  807d60:	10c00b0e 	bge	r2,r3,807d90 <__ulp+0x54>
  807d64:	18bffb04 	addi	r2,r3,-20
  807d68:	01000784 	movi	r4,30
  807d6c:	0007883a 	mov	r3,zero
  807d70:	20800516 	blt	r4,r2,807d88 <__ulp+0x4c>
  807d74:	010007c4 	movi	r4,31
  807d78:	2089c83a 	sub	r4,r4,r2
  807d7c:	00800044 	movi	r2,1
  807d80:	1104983a 	sll	r2,r2,r4
  807d84:	f800283a 	ret
  807d88:	00800044 	movi	r2,1
  807d8c:	f800283a 	ret
  807d90:	01400234 	movhi	r5,8
  807d94:	28c7d83a 	sra	r3,r5,r3
  807d98:	0005883a 	mov	r2,zero
  807d9c:	f800283a 	ret

00807da0 <__b2d>:
  807da0:	defffa04 	addi	sp,sp,-24
  807da4:	dc000015 	stw	r16,0(sp)
  807da8:	24000417 	ldw	r16,16(r4)
  807dac:	dc400115 	stw	r17,4(sp)
  807db0:	24400504 	addi	r17,r4,20
  807db4:	8421883a 	add	r16,r16,r16
  807db8:	8421883a 	add	r16,r16,r16
  807dbc:	8c21883a 	add	r16,r17,r16
  807dc0:	dc800215 	stw	r18,8(sp)
  807dc4:	84bfff17 	ldw	r18,-4(r16)
  807dc8:	dd000415 	stw	r20,16(sp)
  807dcc:	dcc00315 	stw	r19,12(sp)
  807dd0:	9009883a 	mov	r4,r18
  807dd4:	2829883a 	mov	r20,r5
  807dd8:	dfc00515 	stw	ra,20(sp)
  807ddc:	080750c0 	call	80750c <__hi0bits>
  807de0:	00c00804 	movi	r3,32
  807de4:	1889c83a 	sub	r4,r3,r2
  807de8:	a1000015 	stw	r4,0(r20)
  807dec:	01000284 	movi	r4,10
  807df0:	84ffff04 	addi	r19,r16,-4
  807df4:	20801216 	blt	r4,r2,807e40 <__b2d+0xa0>
  807df8:	018002c4 	movi	r6,11
  807dfc:	308dc83a 	sub	r6,r6,r2
  807e00:	9186d83a 	srl	r3,r18,r6
  807e04:	18cffc34 	orhi	r3,r3,16368
  807e08:	8cc0212e 	bgeu	r17,r19,807e90 <__b2d+0xf0>
  807e0c:	813ffe17 	ldw	r4,-8(r16)
  807e10:	218cd83a 	srl	r6,r4,r6
  807e14:	10800544 	addi	r2,r2,21
  807e18:	9084983a 	sll	r2,r18,r2
  807e1c:	1184b03a 	or	r2,r2,r6
  807e20:	dfc00517 	ldw	ra,20(sp)
  807e24:	dd000417 	ldw	r20,16(sp)
  807e28:	dcc00317 	ldw	r19,12(sp)
  807e2c:	dc800217 	ldw	r18,8(sp)
  807e30:	dc400117 	ldw	r17,4(sp)
  807e34:	dc000017 	ldw	r16,0(sp)
  807e38:	dec00604 	addi	sp,sp,24
  807e3c:	f800283a 	ret
  807e40:	8cc00f2e 	bgeu	r17,r19,807e80 <__b2d+0xe0>
  807e44:	117ffd44 	addi	r5,r2,-11
  807e48:	80bffe17 	ldw	r2,-8(r16)
  807e4c:	28000e26 	beq	r5,zero,807e88 <__b2d+0xe8>
  807e50:	1949c83a 	sub	r4,r3,r5
  807e54:	9164983a 	sll	r18,r18,r5
  807e58:	1106d83a 	srl	r3,r2,r4
  807e5c:	81bffe04 	addi	r6,r16,-8
  807e60:	948ffc34 	orhi	r18,r18,16368
  807e64:	90c6b03a 	or	r3,r18,r3
  807e68:	89800e2e 	bgeu	r17,r6,807ea4 <__b2d+0x104>
  807e6c:	81bffd17 	ldw	r6,-12(r16)
  807e70:	1144983a 	sll	r2,r2,r5
  807e74:	310ad83a 	srl	r5,r6,r4
  807e78:	2884b03a 	or	r2,r5,r2
  807e7c:	003fe806 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>
  807e80:	10bffd44 	addi	r2,r2,-11
  807e84:	1000041e 	bne	r2,zero,807e98 <__b2d+0xf8>
  807e88:	90cffc34 	orhi	r3,r18,16368
  807e8c:	003fe406 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>
  807e90:	000d883a 	mov	r6,zero
  807e94:	003fdf06 	br	807e14 <__alt_mem_onchip_mem+0xff7ffe14>
  807e98:	90a4983a 	sll	r18,r18,r2
  807e9c:	0005883a 	mov	r2,zero
  807ea0:	003ff906 	br	807e88 <__alt_mem_onchip_mem+0xff7ffe88>
  807ea4:	1144983a 	sll	r2,r2,r5
  807ea8:	003fdd06 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>

00807eac <__d2b>:
  807eac:	defff804 	addi	sp,sp,-32
  807eb0:	dc000215 	stw	r16,8(sp)
  807eb4:	3021883a 	mov	r16,r6
  807eb8:	dc400315 	stw	r17,12(sp)
  807ebc:	8022907a 	slli	r17,r16,1
  807ec0:	dd000615 	stw	r20,24(sp)
  807ec4:	2829883a 	mov	r20,r5
  807ec8:	01400044 	movi	r5,1
  807ecc:	dcc00515 	stw	r19,20(sp)
  807ed0:	dc800415 	stw	r18,16(sp)
  807ed4:	dfc00715 	stw	ra,28(sp)
  807ed8:	3825883a 	mov	r18,r7
  807edc:	8822d57a 	srli	r17,r17,21
  807ee0:	08072180 	call	807218 <_Balloc>
  807ee4:	1027883a 	mov	r19,r2
  807ee8:	00800434 	movhi	r2,16
  807eec:	10bfffc4 	addi	r2,r2,-1
  807ef0:	808c703a 	and	r6,r16,r2
  807ef4:	88000126 	beq	r17,zero,807efc <__d2b+0x50>
  807ef8:	31800434 	orhi	r6,r6,16
  807efc:	d9800015 	stw	r6,0(sp)
  807f00:	a0002426 	beq	r20,zero,807f94 <__d2b+0xe8>
  807f04:	d9000104 	addi	r4,sp,4
  807f08:	dd000115 	stw	r20,4(sp)
  807f0c:	08075740 	call	807574 <__lo0bits>
  807f10:	d8c00017 	ldw	r3,0(sp)
  807f14:	10002f1e 	bne	r2,zero,807fd4 <__d2b+0x128>
  807f18:	d9000117 	ldw	r4,4(sp)
  807f1c:	99000515 	stw	r4,20(r19)
  807f20:	1821003a 	cmpeq	r16,r3,zero
  807f24:	01000084 	movi	r4,2
  807f28:	2421c83a 	sub	r16,r4,r16
  807f2c:	98c00615 	stw	r3,24(r19)
  807f30:	9c000415 	stw	r16,16(r19)
  807f34:	88001f1e 	bne	r17,zero,807fb4 <__d2b+0x108>
  807f38:	10bef384 	addi	r2,r2,-1074
  807f3c:	90800015 	stw	r2,0(r18)
  807f40:	00900034 	movhi	r2,16384
  807f44:	10bfffc4 	addi	r2,r2,-1
  807f48:	8085883a 	add	r2,r16,r2
  807f4c:	1085883a 	add	r2,r2,r2
  807f50:	1085883a 	add	r2,r2,r2
  807f54:	9885883a 	add	r2,r19,r2
  807f58:	11000517 	ldw	r4,20(r2)
  807f5c:	8020917a 	slli	r16,r16,5
  807f60:	080750c0 	call	80750c <__hi0bits>
  807f64:	d8c00817 	ldw	r3,32(sp)
  807f68:	8085c83a 	sub	r2,r16,r2
  807f6c:	18800015 	stw	r2,0(r3)
  807f70:	9805883a 	mov	r2,r19
  807f74:	dfc00717 	ldw	ra,28(sp)
  807f78:	dd000617 	ldw	r20,24(sp)
  807f7c:	dcc00517 	ldw	r19,20(sp)
  807f80:	dc800417 	ldw	r18,16(sp)
  807f84:	dc400317 	ldw	r17,12(sp)
  807f88:	dc000217 	ldw	r16,8(sp)
  807f8c:	dec00804 	addi	sp,sp,32
  807f90:	f800283a 	ret
  807f94:	d809883a 	mov	r4,sp
  807f98:	08075740 	call	807574 <__lo0bits>
  807f9c:	d8c00017 	ldw	r3,0(sp)
  807fa0:	04000044 	movi	r16,1
  807fa4:	9c000415 	stw	r16,16(r19)
  807fa8:	98c00515 	stw	r3,20(r19)
  807fac:	10800804 	addi	r2,r2,32
  807fb0:	883fe126 	beq	r17,zero,807f38 <__alt_mem_onchip_mem+0xff7fff38>
  807fb4:	00c00d44 	movi	r3,53
  807fb8:	8c7ef344 	addi	r17,r17,-1075
  807fbc:	88a3883a 	add	r17,r17,r2
  807fc0:	1885c83a 	sub	r2,r3,r2
  807fc4:	d8c00817 	ldw	r3,32(sp)
  807fc8:	94400015 	stw	r17,0(r18)
  807fcc:	18800015 	stw	r2,0(r3)
  807fd0:	003fe706 	br	807f70 <__alt_mem_onchip_mem+0xff7fff70>
  807fd4:	01000804 	movi	r4,32
  807fd8:	2089c83a 	sub	r4,r4,r2
  807fdc:	1908983a 	sll	r4,r3,r4
  807fe0:	d9400117 	ldw	r5,4(sp)
  807fe4:	1886d83a 	srl	r3,r3,r2
  807fe8:	2148b03a 	or	r4,r4,r5
  807fec:	99000515 	stw	r4,20(r19)
  807ff0:	d8c00015 	stw	r3,0(sp)
  807ff4:	003fca06 	br	807f20 <__alt_mem_onchip_mem+0xff7fff20>

00807ff8 <__ratio>:
  807ff8:	defff904 	addi	sp,sp,-28
  807ffc:	dc400315 	stw	r17,12(sp)
  808000:	2823883a 	mov	r17,r5
  808004:	d9400104 	addi	r5,sp,4
  808008:	dfc00615 	stw	ra,24(sp)
  80800c:	dcc00515 	stw	r19,20(sp)
  808010:	dc800415 	stw	r18,16(sp)
  808014:	2027883a 	mov	r19,r4
  808018:	dc000215 	stw	r16,8(sp)
  80801c:	0807da00 	call	807da0 <__b2d>
  808020:	d80b883a 	mov	r5,sp
  808024:	8809883a 	mov	r4,r17
  808028:	1025883a 	mov	r18,r2
  80802c:	1821883a 	mov	r16,r3
  808030:	0807da00 	call	807da0 <__b2d>
  808034:	8a000417 	ldw	r8,16(r17)
  808038:	99000417 	ldw	r4,16(r19)
  80803c:	d9400117 	ldw	r5,4(sp)
  808040:	2209c83a 	sub	r4,r4,r8
  808044:	2010917a 	slli	r8,r4,5
  808048:	d9000017 	ldw	r4,0(sp)
  80804c:	2909c83a 	sub	r4,r5,r4
  808050:	4109883a 	add	r4,r8,r4
  808054:	01000e0e 	bge	zero,r4,808090 <__ratio+0x98>
  808058:	2008953a 	slli	r4,r4,20
  80805c:	2421883a 	add	r16,r4,r16
  808060:	100d883a 	mov	r6,r2
  808064:	180f883a 	mov	r7,r3
  808068:	9009883a 	mov	r4,r18
  80806c:	800b883a 	mov	r5,r16
  808070:	080bf880 	call	80bf88 <__divdf3>
  808074:	dfc00617 	ldw	ra,24(sp)
  808078:	dcc00517 	ldw	r19,20(sp)
  80807c:	dc800417 	ldw	r18,16(sp)
  808080:	dc400317 	ldw	r17,12(sp)
  808084:	dc000217 	ldw	r16,8(sp)
  808088:	dec00704 	addi	sp,sp,28
  80808c:	f800283a 	ret
  808090:	2008953a 	slli	r4,r4,20
  808094:	1907c83a 	sub	r3,r3,r4
  808098:	003ff106 	br	808060 <__alt_mem_onchip_mem+0xff800060>

0080809c <_mprec_log10>:
  80809c:	defffe04 	addi	sp,sp,-8
  8080a0:	dc000015 	stw	r16,0(sp)
  8080a4:	dfc00115 	stw	ra,4(sp)
  8080a8:	008005c4 	movi	r2,23
  8080ac:	2021883a 	mov	r16,r4
  8080b0:	11000d0e 	bge	r2,r4,8080e8 <_mprec_log10+0x4c>
  8080b4:	0005883a 	mov	r2,zero
  8080b8:	00cffc34 	movhi	r3,16368
  8080bc:	843fffc4 	addi	r16,r16,-1
  8080c0:	000d883a 	mov	r6,zero
  8080c4:	01d00934 	movhi	r7,16420
  8080c8:	1009883a 	mov	r4,r2
  8080cc:	180b883a 	mov	r5,r3
  8080d0:	080cac80 	call	80cac8 <__muldf3>
  8080d4:	803ff91e 	bne	r16,zero,8080bc <__alt_mem_onchip_mem+0xff8000bc>
  8080d8:	dfc00117 	ldw	ra,4(sp)
  8080dc:	dc000017 	ldw	r16,0(sp)
  8080e0:	dec00204 	addi	sp,sp,8
  8080e4:	f800283a 	ret
  8080e8:	202090fa 	slli	r16,r4,3
  8080ec:	00802074 	movhi	r2,129
  8080f0:	10884104 	addi	r2,r2,8452
  8080f4:	1421883a 	add	r16,r2,r16
  8080f8:	80800017 	ldw	r2,0(r16)
  8080fc:	80c00117 	ldw	r3,4(r16)
  808100:	dfc00117 	ldw	ra,4(sp)
  808104:	dc000017 	ldw	r16,0(sp)
  808108:	dec00204 	addi	sp,sp,8
  80810c:	f800283a 	ret

00808110 <__copybits>:
  808110:	297fffc4 	addi	r5,r5,-1
  808114:	280fd17a 	srai	r7,r5,5
  808118:	30c00417 	ldw	r3,16(r6)
  80811c:	30800504 	addi	r2,r6,20
  808120:	39c00044 	addi	r7,r7,1
  808124:	18c7883a 	add	r3,r3,r3
  808128:	39cf883a 	add	r7,r7,r7
  80812c:	18c7883a 	add	r3,r3,r3
  808130:	39cf883a 	add	r7,r7,r7
  808134:	10c7883a 	add	r3,r2,r3
  808138:	21cf883a 	add	r7,r4,r7
  80813c:	10c00d2e 	bgeu	r2,r3,808174 <__copybits+0x64>
  808140:	200b883a 	mov	r5,r4
  808144:	12000017 	ldw	r8,0(r2)
  808148:	29400104 	addi	r5,r5,4
  80814c:	10800104 	addi	r2,r2,4
  808150:	2a3fff15 	stw	r8,-4(r5)
  808154:	10fffb36 	bltu	r2,r3,808144 <__alt_mem_onchip_mem+0xff800144>
  808158:	1985c83a 	sub	r2,r3,r6
  80815c:	10bffac4 	addi	r2,r2,-21
  808160:	1004d0ba 	srli	r2,r2,2
  808164:	10800044 	addi	r2,r2,1
  808168:	1085883a 	add	r2,r2,r2
  80816c:	1085883a 	add	r2,r2,r2
  808170:	2089883a 	add	r4,r4,r2
  808174:	21c0032e 	bgeu	r4,r7,808184 <__copybits+0x74>
  808178:	20000015 	stw	zero,0(r4)
  80817c:	21000104 	addi	r4,r4,4
  808180:	21fffd36 	bltu	r4,r7,808178 <__alt_mem_onchip_mem+0xff800178>
  808184:	f800283a 	ret

00808188 <__any_on>:
  808188:	20c00417 	ldw	r3,16(r4)
  80818c:	2805d17a 	srai	r2,r5,5
  808190:	21000504 	addi	r4,r4,20
  808194:	18800d0e 	bge	r3,r2,8081cc <__any_on+0x44>
  808198:	18c7883a 	add	r3,r3,r3
  80819c:	18c7883a 	add	r3,r3,r3
  8081a0:	20c7883a 	add	r3,r4,r3
  8081a4:	20c0192e 	bgeu	r4,r3,80820c <__any_on+0x84>
  8081a8:	18bfff17 	ldw	r2,-4(r3)
  8081ac:	18ffff04 	addi	r3,r3,-4
  8081b0:	1000041e 	bne	r2,zero,8081c4 <__any_on+0x3c>
  8081b4:	20c0142e 	bgeu	r4,r3,808208 <__any_on+0x80>
  8081b8:	18ffff04 	addi	r3,r3,-4
  8081bc:	19400017 	ldw	r5,0(r3)
  8081c0:	283ffc26 	beq	r5,zero,8081b4 <__alt_mem_onchip_mem+0xff8001b4>
  8081c4:	00800044 	movi	r2,1
  8081c8:	f800283a 	ret
  8081cc:	10c00a0e 	bge	r2,r3,8081f8 <__any_on+0x70>
  8081d0:	1085883a 	add	r2,r2,r2
  8081d4:	1085883a 	add	r2,r2,r2
  8081d8:	294007cc 	andi	r5,r5,31
  8081dc:	2087883a 	add	r3,r4,r2
  8081e0:	283ff026 	beq	r5,zero,8081a4 <__alt_mem_onchip_mem+0xff8001a4>
  8081e4:	19800017 	ldw	r6,0(r3)
  8081e8:	3144d83a 	srl	r2,r6,r5
  8081ec:	114a983a 	sll	r5,r2,r5
  8081f0:	317ff41e 	bne	r6,r5,8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  8081f4:	003feb06 	br	8081a4 <__alt_mem_onchip_mem+0xff8001a4>
  8081f8:	1085883a 	add	r2,r2,r2
  8081fc:	1085883a 	add	r2,r2,r2
  808200:	2087883a 	add	r3,r4,r2
  808204:	003fe706 	br	8081a4 <__alt_mem_onchip_mem+0xff8001a4>
  808208:	f800283a 	ret
  80820c:	0005883a 	mov	r2,zero
  808210:	f800283a 	ret

00808214 <_read_r>:
  808214:	defffd04 	addi	sp,sp,-12
  808218:	2805883a 	mov	r2,r5
  80821c:	dc000015 	stw	r16,0(sp)
  808220:	04002074 	movhi	r16,129
  808224:	dc400115 	stw	r17,4(sp)
  808228:	300b883a 	mov	r5,r6
  80822c:	8417ea04 	addi	r16,r16,24488
  808230:	2023883a 	mov	r17,r4
  808234:	380d883a 	mov	r6,r7
  808238:	1009883a 	mov	r4,r2
  80823c:	dfc00215 	stw	ra,8(sp)
  808240:	80000015 	stw	zero,0(r16)
  808244:	080e8440 	call	80e844 <read>
  808248:	00ffffc4 	movi	r3,-1
  80824c:	10c00526 	beq	r2,r3,808264 <_read_r+0x50>
  808250:	dfc00217 	ldw	ra,8(sp)
  808254:	dc400117 	ldw	r17,4(sp)
  808258:	dc000017 	ldw	r16,0(sp)
  80825c:	dec00304 	addi	sp,sp,12
  808260:	f800283a 	ret
  808264:	80c00017 	ldw	r3,0(r16)
  808268:	183ff926 	beq	r3,zero,808250 <__alt_mem_onchip_mem+0xff800250>
  80826c:	88c00015 	stw	r3,0(r17)
  808270:	003ff706 	br	808250 <__alt_mem_onchip_mem+0xff800250>

00808274 <__fpclassifyd>:
  808274:	00a00034 	movhi	r2,32768
  808278:	10bfffc4 	addi	r2,r2,-1
  80827c:	2884703a 	and	r2,r5,r2
  808280:	10000726 	beq	r2,zero,8082a0 <__fpclassifyd+0x2c>
  808284:	00fffc34 	movhi	r3,65520
  808288:	019ff834 	movhi	r6,32736
  80828c:	28c7883a 	add	r3,r5,r3
  808290:	31bfffc4 	addi	r6,r6,-1
  808294:	30c00536 	bltu	r6,r3,8082ac <__fpclassifyd+0x38>
  808298:	00800104 	movi	r2,4
  80829c:	f800283a 	ret
  8082a0:	2000021e 	bne	r4,zero,8082ac <__fpclassifyd+0x38>
  8082a4:	00800084 	movi	r2,2
  8082a8:	f800283a 	ret
  8082ac:	00dffc34 	movhi	r3,32752
  8082b0:	019ff834 	movhi	r6,32736
  8082b4:	28cb883a 	add	r5,r5,r3
  8082b8:	31bfffc4 	addi	r6,r6,-1
  8082bc:	317ff62e 	bgeu	r6,r5,808298 <__alt_mem_onchip_mem+0xff800298>
  8082c0:	01400434 	movhi	r5,16
  8082c4:	297fffc4 	addi	r5,r5,-1
  8082c8:	28800236 	bltu	r5,r2,8082d4 <__fpclassifyd+0x60>
  8082cc:	008000c4 	movi	r2,3
  8082d0:	f800283a 	ret
  8082d4:	10c00226 	beq	r2,r3,8082e0 <__fpclassifyd+0x6c>
  8082d8:	0005883a 	mov	r2,zero
  8082dc:	f800283a 	ret
  8082e0:	2005003a 	cmpeq	r2,r4,zero
  8082e4:	f800283a 	ret

008082e8 <strcmp>:
  8082e8:	2144b03a 	or	r2,r4,r5
  8082ec:	108000cc 	andi	r2,r2,3
  8082f0:	1000171e 	bne	r2,zero,808350 <strcmp+0x68>
  8082f4:	20800017 	ldw	r2,0(r4)
  8082f8:	28c00017 	ldw	r3,0(r5)
  8082fc:	10c0141e 	bne	r2,r3,808350 <strcmp+0x68>
  808300:	027fbff4 	movhi	r9,65279
  808304:	4a7fbfc4 	addi	r9,r9,-257
  808308:	0086303a 	nor	r3,zero,r2
  80830c:	02202074 	movhi	r8,32897
  808310:	1245883a 	add	r2,r2,r9
  808314:	42202004 	addi	r8,r8,-32640
  808318:	10c4703a 	and	r2,r2,r3
  80831c:	1204703a 	and	r2,r2,r8
  808320:	10000226 	beq	r2,zero,80832c <strcmp+0x44>
  808324:	00002306 	br	8083b4 <strcmp+0xcc>
  808328:	1000221e 	bne	r2,zero,8083b4 <strcmp+0xcc>
  80832c:	21000104 	addi	r4,r4,4
  808330:	20c00017 	ldw	r3,0(r4)
  808334:	29400104 	addi	r5,r5,4
  808338:	29800017 	ldw	r6,0(r5)
  80833c:	1a4f883a 	add	r7,r3,r9
  808340:	00c4303a 	nor	r2,zero,r3
  808344:	3884703a 	and	r2,r7,r2
  808348:	1204703a 	and	r2,r2,r8
  80834c:	19bff626 	beq	r3,r6,808328 <__alt_mem_onchip_mem+0xff800328>
  808350:	20800003 	ldbu	r2,0(r4)
  808354:	10c03fcc 	andi	r3,r2,255
  808358:	18c0201c 	xori	r3,r3,128
  80835c:	18ffe004 	addi	r3,r3,-128
  808360:	18000c26 	beq	r3,zero,808394 <strcmp+0xac>
  808364:	29800007 	ldb	r6,0(r5)
  808368:	19800326 	beq	r3,r6,808378 <strcmp+0x90>
  80836c:	00001306 	br	8083bc <strcmp+0xd4>
  808370:	29800007 	ldb	r6,0(r5)
  808374:	11800b1e 	bne	r2,r6,8083a4 <strcmp+0xbc>
  808378:	21000044 	addi	r4,r4,1
  80837c:	20c00003 	ldbu	r3,0(r4)
  808380:	29400044 	addi	r5,r5,1
  808384:	18803fcc 	andi	r2,r3,255
  808388:	1080201c 	xori	r2,r2,128
  80838c:	10bfe004 	addi	r2,r2,-128
  808390:	103ff71e 	bne	r2,zero,808370 <__alt_mem_onchip_mem+0xff800370>
  808394:	0007883a 	mov	r3,zero
  808398:	28800003 	ldbu	r2,0(r5)
  80839c:	1885c83a 	sub	r2,r3,r2
  8083a0:	f800283a 	ret
  8083a4:	28800003 	ldbu	r2,0(r5)
  8083a8:	18c03fcc 	andi	r3,r3,255
  8083ac:	1885c83a 	sub	r2,r3,r2
  8083b0:	f800283a 	ret
  8083b4:	0005883a 	mov	r2,zero
  8083b8:	f800283a 	ret
  8083bc:	10c03fcc 	andi	r3,r2,255
  8083c0:	003ff506 	br	808398 <__alt_mem_onchip_mem+0xff800398>

008083c4 <strlen>:
  8083c4:	208000cc 	andi	r2,r4,3
  8083c8:	10002026 	beq	r2,zero,80844c <strlen+0x88>
  8083cc:	20800007 	ldb	r2,0(r4)
  8083d0:	10002026 	beq	r2,zero,808454 <strlen+0x90>
  8083d4:	2005883a 	mov	r2,r4
  8083d8:	00000206 	br	8083e4 <strlen+0x20>
  8083dc:	10c00007 	ldb	r3,0(r2)
  8083e0:	18001826 	beq	r3,zero,808444 <strlen+0x80>
  8083e4:	10800044 	addi	r2,r2,1
  8083e8:	10c000cc 	andi	r3,r2,3
  8083ec:	183ffb1e 	bne	r3,zero,8083dc <__alt_mem_onchip_mem+0xff8003dc>
  8083f0:	10c00017 	ldw	r3,0(r2)
  8083f4:	01ffbff4 	movhi	r7,65279
  8083f8:	39ffbfc4 	addi	r7,r7,-257
  8083fc:	00ca303a 	nor	r5,zero,r3
  808400:	01a02074 	movhi	r6,32897
  808404:	19c7883a 	add	r3,r3,r7
  808408:	31a02004 	addi	r6,r6,-32640
  80840c:	1946703a 	and	r3,r3,r5
  808410:	1986703a 	and	r3,r3,r6
  808414:	1800091e 	bne	r3,zero,80843c <strlen+0x78>
  808418:	10800104 	addi	r2,r2,4
  80841c:	10c00017 	ldw	r3,0(r2)
  808420:	19cb883a 	add	r5,r3,r7
  808424:	00c6303a 	nor	r3,zero,r3
  808428:	28c6703a 	and	r3,r5,r3
  80842c:	1986703a 	and	r3,r3,r6
  808430:	183ff926 	beq	r3,zero,808418 <__alt_mem_onchip_mem+0xff800418>
  808434:	00000106 	br	80843c <strlen+0x78>
  808438:	10800044 	addi	r2,r2,1
  80843c:	10c00007 	ldb	r3,0(r2)
  808440:	183ffd1e 	bne	r3,zero,808438 <__alt_mem_onchip_mem+0xff800438>
  808444:	1105c83a 	sub	r2,r2,r4
  808448:	f800283a 	ret
  80844c:	2005883a 	mov	r2,r4
  808450:	003fe706 	br	8083f0 <__alt_mem_onchip_mem+0xff8003f0>
  808454:	0005883a 	mov	r2,zero
  808458:	f800283a 	ret

0080845c <__sprint_r.part.0>:
  80845c:	28801917 	ldw	r2,100(r5)
  808460:	defff604 	addi	sp,sp,-40
  808464:	dd400515 	stw	r21,20(sp)
  808468:	dfc00915 	stw	ra,36(sp)
  80846c:	df000815 	stw	fp,32(sp)
  808470:	ddc00715 	stw	r23,28(sp)
  808474:	dd800615 	stw	r22,24(sp)
  808478:	dd000415 	stw	r20,16(sp)
  80847c:	dcc00315 	stw	r19,12(sp)
  808480:	dc800215 	stw	r18,8(sp)
  808484:	dc400115 	stw	r17,4(sp)
  808488:	dc000015 	stw	r16,0(sp)
  80848c:	1088000c 	andi	r2,r2,8192
  808490:	302b883a 	mov	r21,r6
  808494:	10002e26 	beq	r2,zero,808550 <__sprint_r.part.0+0xf4>
  808498:	30800217 	ldw	r2,8(r6)
  80849c:	35800017 	ldw	r22,0(r6)
  8084a0:	10002926 	beq	r2,zero,808548 <__sprint_r.part.0+0xec>
  8084a4:	2827883a 	mov	r19,r5
  8084a8:	2029883a 	mov	r20,r4
  8084ac:	b5c00104 	addi	r23,r22,4
  8084b0:	04bfffc4 	movi	r18,-1
  8084b4:	bc400017 	ldw	r17,0(r23)
  8084b8:	b4000017 	ldw	r16,0(r22)
  8084bc:	0039883a 	mov	fp,zero
  8084c0:	8822d0ba 	srli	r17,r17,2
  8084c4:	8800031e 	bne	r17,zero,8084d4 <__sprint_r.part.0+0x78>
  8084c8:	00001806 	br	80852c <__sprint_r.part.0+0xd0>
  8084cc:	84000104 	addi	r16,r16,4
  8084d0:	8f001526 	beq	r17,fp,808528 <__sprint_r.part.0+0xcc>
  8084d4:	81400017 	ldw	r5,0(r16)
  8084d8:	980d883a 	mov	r6,r19
  8084dc:	a009883a 	mov	r4,r20
  8084e0:	0809ccc0 	call	809ccc <_fputwc_r>
  8084e4:	e7000044 	addi	fp,fp,1
  8084e8:	14bff81e 	bne	r2,r18,8084cc <__alt_mem_onchip_mem+0xff8004cc>
  8084ec:	9005883a 	mov	r2,r18
  8084f0:	a8000215 	stw	zero,8(r21)
  8084f4:	a8000115 	stw	zero,4(r21)
  8084f8:	dfc00917 	ldw	ra,36(sp)
  8084fc:	df000817 	ldw	fp,32(sp)
  808500:	ddc00717 	ldw	r23,28(sp)
  808504:	dd800617 	ldw	r22,24(sp)
  808508:	dd400517 	ldw	r21,20(sp)
  80850c:	dd000417 	ldw	r20,16(sp)
  808510:	dcc00317 	ldw	r19,12(sp)
  808514:	dc800217 	ldw	r18,8(sp)
  808518:	dc400117 	ldw	r17,4(sp)
  80851c:	dc000017 	ldw	r16,0(sp)
  808520:	dec00a04 	addi	sp,sp,40
  808524:	f800283a 	ret
  808528:	a8800217 	ldw	r2,8(r21)
  80852c:	8c63883a 	add	r17,r17,r17
  808530:	8c63883a 	add	r17,r17,r17
  808534:	1445c83a 	sub	r2,r2,r17
  808538:	a8800215 	stw	r2,8(r21)
  80853c:	b5800204 	addi	r22,r22,8
  808540:	bdc00204 	addi	r23,r23,8
  808544:	103fdb1e 	bne	r2,zero,8084b4 <__alt_mem_onchip_mem+0xff8004b4>
  808548:	0005883a 	mov	r2,zero
  80854c:	003fe806 	br	8084f0 <__alt_mem_onchip_mem+0xff8004f0>
  808550:	0809d700 	call	809d70 <__sfvwrite_r>
  808554:	003fe606 	br	8084f0 <__alt_mem_onchip_mem+0xff8004f0>

00808558 <__sprint_r>:
  808558:	30c00217 	ldw	r3,8(r6)
  80855c:	18000126 	beq	r3,zero,808564 <__sprint_r+0xc>
  808560:	080845c1 	jmpi	80845c <__sprint_r.part.0>
  808564:	30000115 	stw	zero,4(r6)
  808568:	0005883a 	mov	r2,zero
  80856c:	f800283a 	ret

00808570 <___vfiprintf_internal_r>:
  808570:	deffc904 	addi	sp,sp,-220
  808574:	df003515 	stw	fp,212(sp)
  808578:	dd003115 	stw	r20,196(sp)
  80857c:	dfc03615 	stw	ra,216(sp)
  808580:	ddc03415 	stw	r23,208(sp)
  808584:	dd803315 	stw	r22,204(sp)
  808588:	dd403215 	stw	r21,200(sp)
  80858c:	dcc03015 	stw	r19,192(sp)
  808590:	dc802f15 	stw	r18,188(sp)
  808594:	dc402e15 	stw	r17,184(sp)
  808598:	dc002d15 	stw	r16,180(sp)
  80859c:	d9002015 	stw	r4,128(sp)
  8085a0:	d9c02215 	stw	r7,136(sp)
  8085a4:	2829883a 	mov	r20,r5
  8085a8:	3039883a 	mov	fp,r6
  8085ac:	20000226 	beq	r4,zero,8085b8 <___vfiprintf_internal_r+0x48>
  8085b0:	20800e17 	ldw	r2,56(r4)
  8085b4:	1000cf26 	beq	r2,zero,8088f4 <___vfiprintf_internal_r+0x384>
  8085b8:	a080030b 	ldhu	r2,12(r20)
  8085bc:	10c8000c 	andi	r3,r2,8192
  8085c0:	1800061e 	bne	r3,zero,8085dc <___vfiprintf_internal_r+0x6c>
  8085c4:	a1001917 	ldw	r4,100(r20)
  8085c8:	00f7ffc4 	movi	r3,-8193
  8085cc:	10880014 	ori	r2,r2,8192
  8085d0:	20c6703a 	and	r3,r4,r3
  8085d4:	a080030d 	sth	r2,12(r20)
  8085d8:	a0c01915 	stw	r3,100(r20)
  8085dc:	10c0020c 	andi	r3,r2,8
  8085e0:	1800a926 	beq	r3,zero,808888 <___vfiprintf_internal_r+0x318>
  8085e4:	a0c00417 	ldw	r3,16(r20)
  8085e8:	1800a726 	beq	r3,zero,808888 <___vfiprintf_internal_r+0x318>
  8085ec:	1080068c 	andi	r2,r2,26
  8085f0:	00c00284 	movi	r3,10
  8085f4:	10c0ac26 	beq	r2,r3,8088a8 <___vfiprintf_internal_r+0x338>
  8085f8:	da801a04 	addi	r10,sp,104
  8085fc:	da801e15 	stw	r10,120(sp)
  808600:	d8801e17 	ldw	r2,120(sp)
  808604:	da8019c4 	addi	r10,sp,103
  808608:	05802074 	movhi	r22,129
  80860c:	05c02074 	movhi	r23,129
  808610:	da801f15 	stw	r10,124(sp)
  808614:	1295c83a 	sub	r10,r2,r10
  808618:	b5887704 	addi	r22,r22,8668
  80861c:	bdc87304 	addi	r23,r23,8652
  808620:	dec01a15 	stw	sp,104(sp)
  808624:	d8001c15 	stw	zero,112(sp)
  808628:	d8001b15 	stw	zero,108(sp)
  80862c:	d8002615 	stw	zero,152(sp)
  808630:	d8002315 	stw	zero,140(sp)
  808634:	da802715 	stw	r10,156(sp)
  808638:	d811883a 	mov	r8,sp
  80863c:	dd002115 	stw	r20,132(sp)
  808640:	e021883a 	mov	r16,fp
  808644:	80800007 	ldb	r2,0(r16)
  808648:	1003ea26 	beq	r2,zero,8095f4 <___vfiprintf_internal_r+0x1084>
  80864c:	00c00944 	movi	r3,37
  808650:	8025883a 	mov	r18,r16
  808654:	10c0021e 	bne	r2,r3,808660 <___vfiprintf_internal_r+0xf0>
  808658:	00001606 	br	8086b4 <___vfiprintf_internal_r+0x144>
  80865c:	10c00326 	beq	r2,r3,80866c <___vfiprintf_internal_r+0xfc>
  808660:	94800044 	addi	r18,r18,1
  808664:	90800007 	ldb	r2,0(r18)
  808668:	103ffc1e 	bne	r2,zero,80865c <__alt_mem_onchip_mem+0xff80065c>
  80866c:	9423c83a 	sub	r17,r18,r16
  808670:	88001026 	beq	r17,zero,8086b4 <___vfiprintf_internal_r+0x144>
  808674:	d8c01c17 	ldw	r3,112(sp)
  808678:	d8801b17 	ldw	r2,108(sp)
  80867c:	44000015 	stw	r16,0(r8)
  808680:	88c7883a 	add	r3,r17,r3
  808684:	10800044 	addi	r2,r2,1
  808688:	44400115 	stw	r17,4(r8)
  80868c:	d8c01c15 	stw	r3,112(sp)
  808690:	d8801b15 	stw	r2,108(sp)
  808694:	010001c4 	movi	r4,7
  808698:	2080760e 	bge	r4,r2,808874 <___vfiprintf_internal_r+0x304>
  80869c:	1803821e 	bne	r3,zero,8094a8 <___vfiprintf_internal_r+0xf38>
  8086a0:	da802317 	ldw	r10,140(sp)
  8086a4:	d8001b15 	stw	zero,108(sp)
  8086a8:	d811883a 	mov	r8,sp
  8086ac:	5455883a 	add	r10,r10,r17
  8086b0:	da802315 	stw	r10,140(sp)
  8086b4:	90800007 	ldb	r2,0(r18)
  8086b8:	10044626 	beq	r2,zero,8097d4 <___vfiprintf_internal_r+0x1264>
  8086bc:	90c00047 	ldb	r3,1(r18)
  8086c0:	94000044 	addi	r16,r18,1
  8086c4:	d8001d85 	stb	zero,118(sp)
  8086c8:	0009883a 	mov	r4,zero
  8086cc:	000f883a 	mov	r7,zero
  8086d0:	027fffc4 	movi	r9,-1
  8086d4:	0023883a 	mov	r17,zero
  8086d8:	0029883a 	mov	r20,zero
  8086dc:	01401604 	movi	r5,88
  8086e0:	01800244 	movi	r6,9
  8086e4:	03400a84 	movi	r13,42
  8086e8:	03001b04 	movi	r12,108
  8086ec:	84000044 	addi	r16,r16,1
  8086f0:	18bff804 	addi	r2,r3,-32
  8086f4:	28827336 	bltu	r5,r2,8090c4 <___vfiprintf_internal_r+0xb54>
  8086f8:	100490ba 	slli	r2,r2,2
  8086fc:	02802074 	movhi	r10,129
  808700:	52a1c404 	addi	r10,r10,-30960
  808704:	1285883a 	add	r2,r2,r10
  808708:	10800017 	ldw	r2,0(r2)
  80870c:	1000683a 	jmp	r2
  808710:	00808df8 	rdprs	r2,zero,567
  808714:	008090c4 	movi	r2,579
  808718:	008090c4 	movi	r2,579
  80871c:	00808e18 	cmpnei	r2,zero,568
  808720:	008090c4 	movi	r2,579
  808724:	008090c4 	movi	r2,579
  808728:	008090c4 	movi	r2,579
  80872c:	008090c4 	movi	r2,579
  808730:	008090c4 	movi	r2,579
  808734:	008090c4 	movi	r2,579
  808738:	00809000 	call	80900 <__alt_mem_sdram-0x77f700>
  80873c:	0080901c 	xori	r2,zero,576
  808740:	008090c4 	movi	r2,579
  808744:	00808904 	movi	r2,548
  808748:	0080902c 	andhi	r2,zero,576
  80874c:	008090c4 	movi	r2,579
  808750:	00808e24 	muli	r2,zero,568
  808754:	00808e30 	cmpltui	r2,zero,568
  808758:	00808e30 	cmpltui	r2,zero,568
  80875c:	00808e30 	cmpltui	r2,zero,568
  808760:	00808e30 	cmpltui	r2,zero,568
  808764:	00808e30 	cmpltui	r2,zero,568
  808768:	00808e30 	cmpltui	r2,zero,568
  80876c:	00808e30 	cmpltui	r2,zero,568
  808770:	00808e30 	cmpltui	r2,zero,568
  808774:	00808e30 	cmpltui	r2,zero,568
  808778:	008090c4 	movi	r2,579
  80877c:	008090c4 	movi	r2,579
  808780:	008090c4 	movi	r2,579
  808784:	008090c4 	movi	r2,579
  808788:	008090c4 	movi	r2,579
  80878c:	008090c4 	movi	r2,579
  808790:	008090c4 	movi	r2,579
  808794:	008090c4 	movi	r2,579
  808798:	008090c4 	movi	r2,579
  80879c:	008090c4 	movi	r2,579
  8087a0:	00808e5c 	xori	r2,zero,569
  8087a4:	008090c4 	movi	r2,579
  8087a8:	008090c4 	movi	r2,579
  8087ac:	008090c4 	movi	r2,579
  8087b0:	008090c4 	movi	r2,579
  8087b4:	008090c4 	movi	r2,579
  8087b8:	008090c4 	movi	r2,579
  8087bc:	008090c4 	movi	r2,579
  8087c0:	008090c4 	movi	r2,579
  8087c4:	008090c4 	movi	r2,579
  8087c8:	008090c4 	movi	r2,579
  8087cc:	00808e94 	movui	r2,570
  8087d0:	008090c4 	movi	r2,579
  8087d4:	008090c4 	movi	r2,579
  8087d8:	008090c4 	movi	r2,579
  8087dc:	008090c4 	movi	r2,579
  8087e0:	008090c4 	movi	r2,579
  8087e4:	00808eec 	andhi	r2,zero,571
  8087e8:	008090c4 	movi	r2,579
  8087ec:	008090c4 	movi	r2,579
  8087f0:	00808f5c 	xori	r2,zero,573
  8087f4:	008090c4 	movi	r2,579
  8087f8:	008090c4 	movi	r2,579
  8087fc:	008090c4 	movi	r2,579
  808800:	008090c4 	movi	r2,579
  808804:	008090c4 	movi	r2,579
  808808:	008090c4 	movi	r2,579
  80880c:	008090c4 	movi	r2,579
  808810:	008090c4 	movi	r2,579
  808814:	008090c4 	movi	r2,579
  808818:	008090c4 	movi	r2,579
  80881c:	00808d08 	cmpgei	r2,zero,564
  808820:	00808d34 	movhi	r2,564
  808824:	008090c4 	movi	r2,579
  808828:	008090c4 	movi	r2,579
  80882c:	008090c4 	movi	r2,579
  808830:	0080906c 	andhi	r2,zero,577
  808834:	00808d34 	movhi	r2,564
  808838:	008090c4 	movi	r2,579
  80883c:	008090c4 	movi	r2,579
  808840:	00808bc8 	cmpgei	r2,zero,559
  808844:	008090c4 	movi	r2,579
  808848:	00808bd8 	cmpnei	r2,zero,559
  80884c:	00808c14 	movui	r2,560
  808850:	00808910 	cmplti	r2,zero,548
  808854:	00808bbc 	xorhi	r2,zero,558
  808858:	008090c4 	movi	r2,579
  80885c:	00808f98 	cmpnei	r2,zero,574
  808860:	008090c4 	movi	r2,579
  808864:	00808ff0 	cmpltui	r2,zero,575
  808868:	008090c4 	movi	r2,579
  80886c:	008090c4 	movi	r2,579
  808870:	00808cb4 	movhi	r2,562
  808874:	42000204 	addi	r8,r8,8
  808878:	da802317 	ldw	r10,140(sp)
  80887c:	5455883a 	add	r10,r10,r17
  808880:	da802315 	stw	r10,140(sp)
  808884:	003f8b06 	br	8086b4 <__alt_mem_onchip_mem+0xff8006b4>
  808888:	d9002017 	ldw	r4,128(sp)
  80888c:	a00b883a 	mov	r5,r20
  808890:	0804ba00 	call	804ba0 <__swsetup_r>
  808894:	1003b11e 	bne	r2,zero,80975c <___vfiprintf_internal_r+0x11ec>
  808898:	a080030b 	ldhu	r2,12(r20)
  80889c:	00c00284 	movi	r3,10
  8088a0:	1080068c 	andi	r2,r2,26
  8088a4:	10ff541e 	bne	r2,r3,8085f8 <__alt_mem_onchip_mem+0xff8005f8>
  8088a8:	a080038f 	ldh	r2,14(r20)
  8088ac:	103f5216 	blt	r2,zero,8085f8 <__alt_mem_onchip_mem+0xff8005f8>
  8088b0:	d9c02217 	ldw	r7,136(sp)
  8088b4:	d9002017 	ldw	r4,128(sp)
  8088b8:	e00d883a 	mov	r6,fp
  8088bc:	a00b883a 	mov	r5,r20
  8088c0:	08099e80 	call	8099e8 <__sbprintf>
  8088c4:	dfc03617 	ldw	ra,216(sp)
  8088c8:	df003517 	ldw	fp,212(sp)
  8088cc:	ddc03417 	ldw	r23,208(sp)
  8088d0:	dd803317 	ldw	r22,204(sp)
  8088d4:	dd403217 	ldw	r21,200(sp)
  8088d8:	dd003117 	ldw	r20,196(sp)
  8088dc:	dcc03017 	ldw	r19,192(sp)
  8088e0:	dc802f17 	ldw	r18,188(sp)
  8088e4:	dc402e17 	ldw	r17,184(sp)
  8088e8:	dc002d17 	ldw	r16,180(sp)
  8088ec:	dec03704 	addi	sp,sp,220
  8088f0:	f800283a 	ret
  8088f4:	08010a00 	call	8010a0 <__sinit>
  8088f8:	003f2f06 	br	8085b8 <__alt_mem_onchip_mem+0xff8005b8>
  8088fc:	0463c83a 	sub	r17,zero,r17
  808900:	d8802215 	stw	r2,136(sp)
  808904:	a5000114 	ori	r20,r20,4
  808908:	80c00007 	ldb	r3,0(r16)
  80890c:	003f7706 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  808910:	00800c04 	movi	r2,48
  808914:	da802217 	ldw	r10,136(sp)
  808918:	d8801d05 	stb	r2,116(sp)
  80891c:	00801e04 	movi	r2,120
  808920:	d8801d45 	stb	r2,117(sp)
  808924:	d8001d85 	stb	zero,118(sp)
  808928:	50c00104 	addi	r3,r10,4
  80892c:	54800017 	ldw	r18,0(r10)
  808930:	0027883a 	mov	r19,zero
  808934:	a0800094 	ori	r2,r20,2
  808938:	48030b16 	blt	r9,zero,809568 <___vfiprintf_internal_r+0xff8>
  80893c:	00bfdfc4 	movi	r2,-129
  808940:	a096703a 	and	r11,r20,r2
  808944:	d8c02215 	stw	r3,136(sp)
  808948:	5d000094 	ori	r20,r11,2
  80894c:	90032b1e 	bne	r18,zero,8095fc <___vfiprintf_internal_r+0x108c>
  808950:	00802074 	movhi	r2,129
  808954:	10881304 	addi	r2,r2,8268
  808958:	d8802615 	stw	r2,152(sp)
  80895c:	0039883a 	mov	fp,zero
  808960:	48017b1e 	bne	r9,zero,808f50 <___vfiprintf_internal_r+0x9e0>
  808964:	0013883a 	mov	r9,zero
  808968:	0027883a 	mov	r19,zero
  80896c:	dd401a04 	addi	r21,sp,104
  808970:	4825883a 	mov	r18,r9
  808974:	4cc0010e 	bge	r9,r19,80897c <___vfiprintf_internal_r+0x40c>
  808978:	9825883a 	mov	r18,r19
  80897c:	e7003fcc 	andi	fp,fp,255
  808980:	e700201c 	xori	fp,fp,128
  808984:	e73fe004 	addi	fp,fp,-128
  808988:	e0000126 	beq	fp,zero,808990 <___vfiprintf_internal_r+0x420>
  80898c:	94800044 	addi	r18,r18,1
  808990:	a380008c 	andi	r14,r20,2
  808994:	70000126 	beq	r14,zero,80899c <___vfiprintf_internal_r+0x42c>
  808998:	94800084 	addi	r18,r18,2
  80899c:	a700210c 	andi	fp,r20,132
  8089a0:	e001df1e 	bne	fp,zero,809120 <___vfiprintf_internal_r+0xbb0>
  8089a4:	8c87c83a 	sub	r3,r17,r18
  8089a8:	00c1dd0e 	bge	zero,r3,809120 <___vfiprintf_internal_r+0xbb0>
  8089ac:	01c00404 	movi	r7,16
  8089b0:	d8801c17 	ldw	r2,112(sp)
  8089b4:	38c3ad0e 	bge	r7,r3,80986c <___vfiprintf_internal_r+0x12fc>
  8089b8:	02802074 	movhi	r10,129
  8089bc:	52887704 	addi	r10,r10,8668
  8089c0:	dc002915 	stw	r16,164(sp)
  8089c4:	d9801b17 	ldw	r6,108(sp)
  8089c8:	da802415 	stw	r10,144(sp)
  8089cc:	03c001c4 	movi	r15,7
  8089d0:	da402515 	stw	r9,148(sp)
  8089d4:	db802815 	stw	r14,160(sp)
  8089d8:	1821883a 	mov	r16,r3
  8089dc:	00000506 	br	8089f4 <___vfiprintf_internal_r+0x484>
  8089e0:	31400084 	addi	r5,r6,2
  8089e4:	42000204 	addi	r8,r8,8
  8089e8:	200d883a 	mov	r6,r4
  8089ec:	843ffc04 	addi	r16,r16,-16
  8089f0:	3c000d0e 	bge	r7,r16,808a28 <___vfiprintf_internal_r+0x4b8>
  8089f4:	10800404 	addi	r2,r2,16
  8089f8:	31000044 	addi	r4,r6,1
  8089fc:	45800015 	stw	r22,0(r8)
  808a00:	41c00115 	stw	r7,4(r8)
  808a04:	d8801c15 	stw	r2,112(sp)
  808a08:	d9001b15 	stw	r4,108(sp)
  808a0c:	793ff40e 	bge	r15,r4,8089e0 <__alt_mem_onchip_mem+0xff8009e0>
  808a10:	1001b51e 	bne	r2,zero,8090e8 <___vfiprintf_internal_r+0xb78>
  808a14:	843ffc04 	addi	r16,r16,-16
  808a18:	000d883a 	mov	r6,zero
  808a1c:	01400044 	movi	r5,1
  808a20:	d811883a 	mov	r8,sp
  808a24:	3c3ff316 	blt	r7,r16,8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808a28:	8007883a 	mov	r3,r16
  808a2c:	da402517 	ldw	r9,148(sp)
  808a30:	db802817 	ldw	r14,160(sp)
  808a34:	dc002917 	ldw	r16,164(sp)
  808a38:	da802417 	ldw	r10,144(sp)
  808a3c:	1885883a 	add	r2,r3,r2
  808a40:	40c00115 	stw	r3,4(r8)
  808a44:	42800015 	stw	r10,0(r8)
  808a48:	d8801c15 	stw	r2,112(sp)
  808a4c:	d9401b15 	stw	r5,108(sp)
  808a50:	00c001c4 	movi	r3,7
  808a54:	19426016 	blt	r3,r5,8093d8 <___vfiprintf_internal_r+0xe68>
  808a58:	d8c01d87 	ldb	r3,118(sp)
  808a5c:	42000204 	addi	r8,r8,8
  808a60:	29000044 	addi	r4,r5,1
  808a64:	1801b31e 	bne	r3,zero,809134 <___vfiprintf_internal_r+0xbc4>
  808a68:	7001c026 	beq	r14,zero,80916c <___vfiprintf_internal_r+0xbfc>
  808a6c:	d8c01d04 	addi	r3,sp,116
  808a70:	10800084 	addi	r2,r2,2
  808a74:	40c00015 	stw	r3,0(r8)
  808a78:	00c00084 	movi	r3,2
  808a7c:	40c00115 	stw	r3,4(r8)
  808a80:	d8801c15 	stw	r2,112(sp)
  808a84:	d9001b15 	stw	r4,108(sp)
  808a88:	00c001c4 	movi	r3,7
  808a8c:	1902650e 	bge	r3,r4,809424 <___vfiprintf_internal_r+0xeb4>
  808a90:	10029a1e 	bne	r2,zero,8094fc <___vfiprintf_internal_r+0xf8c>
  808a94:	00c02004 	movi	r3,128
  808a98:	01000044 	movi	r4,1
  808a9c:	000b883a 	mov	r5,zero
  808aa0:	d811883a 	mov	r8,sp
  808aa4:	e0c1b31e 	bne	fp,r3,809174 <___vfiprintf_internal_r+0xc04>
  808aa8:	8cb9c83a 	sub	fp,r17,r18
  808aac:	0701b10e 	bge	zero,fp,809174 <___vfiprintf_internal_r+0xc04>
  808ab0:	01c00404 	movi	r7,16
  808ab4:	3f03890e 	bge	r7,fp,8098dc <___vfiprintf_internal_r+0x136c>
  808ab8:	00c02074 	movhi	r3,129
  808abc:	18c87304 	addi	r3,r3,8652
  808ac0:	d8c02415 	stw	r3,144(sp)
  808ac4:	8007883a 	mov	r3,r16
  808ac8:	034001c4 	movi	r13,7
  808acc:	e021883a 	mov	r16,fp
  808ad0:	da402515 	stw	r9,148(sp)
  808ad4:	1839883a 	mov	fp,r3
  808ad8:	00000506 	br	808af0 <___vfiprintf_internal_r+0x580>
  808adc:	29800084 	addi	r6,r5,2
  808ae0:	42000204 	addi	r8,r8,8
  808ae4:	180b883a 	mov	r5,r3
  808ae8:	843ffc04 	addi	r16,r16,-16
  808aec:	3c000d0e 	bge	r7,r16,808b24 <___vfiprintf_internal_r+0x5b4>
  808af0:	10800404 	addi	r2,r2,16
  808af4:	28c00044 	addi	r3,r5,1
  808af8:	45c00015 	stw	r23,0(r8)
  808afc:	41c00115 	stw	r7,4(r8)
  808b00:	d8801c15 	stw	r2,112(sp)
  808b04:	d8c01b15 	stw	r3,108(sp)
  808b08:	68fff40e 	bge	r13,r3,808adc <__alt_mem_onchip_mem+0xff800adc>
  808b0c:	1002241e 	bne	r2,zero,8093a0 <___vfiprintf_internal_r+0xe30>
  808b10:	843ffc04 	addi	r16,r16,-16
  808b14:	01800044 	movi	r6,1
  808b18:	000b883a 	mov	r5,zero
  808b1c:	d811883a 	mov	r8,sp
  808b20:	3c3ff316 	blt	r7,r16,808af0 <__alt_mem_onchip_mem+0xff800af0>
  808b24:	da402517 	ldw	r9,148(sp)
  808b28:	e007883a 	mov	r3,fp
  808b2c:	8039883a 	mov	fp,r16
  808b30:	1821883a 	mov	r16,r3
  808b34:	d8c02417 	ldw	r3,144(sp)
  808b38:	1705883a 	add	r2,r2,fp
  808b3c:	47000115 	stw	fp,4(r8)
  808b40:	40c00015 	stw	r3,0(r8)
  808b44:	d8801c15 	stw	r2,112(sp)
  808b48:	d9801b15 	stw	r6,108(sp)
  808b4c:	00c001c4 	movi	r3,7
  808b50:	19827616 	blt	r3,r6,80952c <___vfiprintf_internal_r+0xfbc>
  808b54:	4cf9c83a 	sub	fp,r9,r19
  808b58:	42000204 	addi	r8,r8,8
  808b5c:	31000044 	addi	r4,r6,1
  808b60:	300b883a 	mov	r5,r6
  808b64:	07018516 	blt	zero,fp,80917c <___vfiprintf_internal_r+0xc0c>
  808b68:	9885883a 	add	r2,r19,r2
  808b6c:	45400015 	stw	r21,0(r8)
  808b70:	44c00115 	stw	r19,4(r8)
  808b74:	d8801c15 	stw	r2,112(sp)
  808b78:	d9001b15 	stw	r4,108(sp)
  808b7c:	00c001c4 	movi	r3,7
  808b80:	1901dd0e 	bge	r3,r4,8092f8 <___vfiprintf_internal_r+0xd88>
  808b84:	1002401e 	bne	r2,zero,809488 <___vfiprintf_internal_r+0xf18>
  808b88:	d8001b15 	stw	zero,108(sp)
  808b8c:	a2c0010c 	andi	r11,r20,4
  808b90:	58000226 	beq	r11,zero,808b9c <___vfiprintf_internal_r+0x62c>
  808b94:	8ca7c83a 	sub	r19,r17,r18
  808b98:	04c2f216 	blt	zero,r19,809764 <___vfiprintf_internal_r+0x11f4>
  808b9c:	8c80010e 	bge	r17,r18,808ba4 <___vfiprintf_internal_r+0x634>
  808ba0:	9023883a 	mov	r17,r18
  808ba4:	da802317 	ldw	r10,140(sp)
  808ba8:	5455883a 	add	r10,r10,r17
  808bac:	da802315 	stw	r10,140(sp)
  808bb0:	d8001b15 	stw	zero,108(sp)
  808bb4:	d811883a 	mov	r8,sp
  808bb8:	003ea206 	br	808644 <__alt_mem_onchip_mem+0xff800644>
  808bbc:	a5000814 	ori	r20,r20,32
  808bc0:	80c00007 	ldb	r3,0(r16)
  808bc4:	003ec906 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  808bc8:	80c00007 	ldb	r3,0(r16)
  808bcc:	1b030926 	beq	r3,r12,8097f4 <___vfiprintf_internal_r+0x1284>
  808bd0:	a5000414 	ori	r20,r20,16
  808bd4:	003ec506 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  808bd8:	21003fcc 	andi	r4,r4,255
  808bdc:	20035e1e 	bne	r4,zero,809958 <___vfiprintf_internal_r+0x13e8>
  808be0:	a080080c 	andi	r2,r20,32
  808be4:	1002a526 	beq	r2,zero,80967c <___vfiprintf_internal_r+0x110c>
  808be8:	da802217 	ldw	r10,136(sp)
  808bec:	50800017 	ldw	r2,0(r10)
  808bf0:	da802317 	ldw	r10,140(sp)
  808bf4:	5007d7fa 	srai	r3,r10,31
  808bf8:	da802217 	ldw	r10,136(sp)
  808bfc:	10c00115 	stw	r3,4(r2)
  808c00:	52800104 	addi	r10,r10,4
  808c04:	da802215 	stw	r10,136(sp)
  808c08:	da802317 	ldw	r10,140(sp)
  808c0c:	12800015 	stw	r10,0(r2)
  808c10:	003e8c06 	br	808644 <__alt_mem_onchip_mem+0xff800644>
  808c14:	21003fcc 	andi	r4,r4,255
  808c18:	2003511e 	bne	r4,zero,809960 <___vfiprintf_internal_r+0x13f0>
  808c1c:	a080080c 	andi	r2,r20,32
  808c20:	1000a126 	beq	r2,zero,808ea8 <___vfiprintf_internal_r+0x938>
  808c24:	da802217 	ldw	r10,136(sp)
  808c28:	d8001d85 	stb	zero,118(sp)
  808c2c:	50800204 	addi	r2,r10,8
  808c30:	54800017 	ldw	r18,0(r10)
  808c34:	54c00117 	ldw	r19,4(r10)
  808c38:	4802b416 	blt	r9,zero,80970c <___vfiprintf_internal_r+0x119c>
  808c3c:	013fdfc4 	movi	r4,-129
  808c40:	94c6b03a 	or	r3,r18,r19
  808c44:	d8802215 	stw	r2,136(sp)
  808c48:	a128703a 	and	r20,r20,r4
  808c4c:	1800a226 	beq	r3,zero,808ed8 <___vfiprintf_internal_r+0x968>
  808c50:	0039883a 	mov	fp,zero
  808c54:	dd401a04 	addi	r21,sp,104
  808c58:	9006d0fa 	srli	r3,r18,3
  808c5c:	9808977a 	slli	r4,r19,29
  808c60:	9826d0fa 	srli	r19,r19,3
  808c64:	948001cc 	andi	r18,r18,7
  808c68:	90800c04 	addi	r2,r18,48
  808c6c:	ad7fffc4 	addi	r21,r21,-1
  808c70:	20e4b03a 	or	r18,r4,r3
  808c74:	a8800005 	stb	r2,0(r21)
  808c78:	94c6b03a 	or	r3,r18,r19
  808c7c:	183ff61e 	bne	r3,zero,808c58 <__alt_mem_onchip_mem+0xff800c58>
  808c80:	a0c0004c 	andi	r3,r20,1
  808c84:	18005926 	beq	r3,zero,808dec <___vfiprintf_internal_r+0x87c>
  808c88:	10803fcc 	andi	r2,r2,255
  808c8c:	1080201c 	xori	r2,r2,128
  808c90:	10bfe004 	addi	r2,r2,-128
  808c94:	00c00c04 	movi	r3,48
  808c98:	10c05426 	beq	r2,r3,808dec <___vfiprintf_internal_r+0x87c>
  808c9c:	da801e17 	ldw	r10,120(sp)
  808ca0:	a8bfffc4 	addi	r2,r21,-1
  808ca4:	a8ffffc5 	stb	r3,-1(r21)
  808ca8:	50a7c83a 	sub	r19,r10,r2
  808cac:	102b883a 	mov	r21,r2
  808cb0:	003f2f06 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  808cb4:	21003fcc 	andi	r4,r4,255
  808cb8:	2003421e 	bne	r4,zero,8099c4 <___vfiprintf_internal_r+0x1454>
  808cbc:	00802074 	movhi	r2,129
  808cc0:	10881304 	addi	r2,r2,8268
  808cc4:	d8802615 	stw	r2,152(sp)
  808cc8:	a080080c 	andi	r2,r20,32
  808ccc:	1000aa26 	beq	r2,zero,808f78 <___vfiprintf_internal_r+0xa08>
  808cd0:	da802217 	ldw	r10,136(sp)
  808cd4:	54800017 	ldw	r18,0(r10)
  808cd8:	54c00117 	ldw	r19,4(r10)
  808cdc:	52800204 	addi	r10,r10,8
  808ce0:	da802215 	stw	r10,136(sp)
  808ce4:	a080004c 	andi	r2,r20,1
  808ce8:	1001d226 	beq	r2,zero,809434 <___vfiprintf_internal_r+0xec4>
  808cec:	94c4b03a 	or	r2,r18,r19
  808cf0:	1002351e 	bne	r2,zero,8095c8 <___vfiprintf_internal_r+0x1058>
  808cf4:	d8001d85 	stb	zero,118(sp)
  808cf8:	48022216 	blt	r9,zero,809584 <___vfiprintf_internal_r+0x1014>
  808cfc:	00bfdfc4 	movi	r2,-129
  808d00:	a0a8703a 	and	r20,r20,r2
  808d04:	003f1506 	br	80895c <__alt_mem_onchip_mem+0xff80095c>
  808d08:	da802217 	ldw	r10,136(sp)
  808d0c:	04800044 	movi	r18,1
  808d10:	d8001d85 	stb	zero,118(sp)
  808d14:	50800017 	ldw	r2,0(r10)
  808d18:	52800104 	addi	r10,r10,4
  808d1c:	da802215 	stw	r10,136(sp)
  808d20:	d8801005 	stb	r2,64(sp)
  808d24:	9027883a 	mov	r19,r18
  808d28:	dd401004 	addi	r21,sp,64
  808d2c:	0013883a 	mov	r9,zero
  808d30:	003f1706 	br	808990 <__alt_mem_onchip_mem+0xff800990>
  808d34:	21003fcc 	andi	r4,r4,255
  808d38:	2003201e 	bne	r4,zero,8099bc <___vfiprintf_internal_r+0x144c>
  808d3c:	a080080c 	andi	r2,r20,32
  808d40:	10004b26 	beq	r2,zero,808e70 <___vfiprintf_internal_r+0x900>
  808d44:	da802217 	ldw	r10,136(sp)
  808d48:	50800117 	ldw	r2,4(r10)
  808d4c:	54800017 	ldw	r18,0(r10)
  808d50:	52800204 	addi	r10,r10,8
  808d54:	da802215 	stw	r10,136(sp)
  808d58:	1027883a 	mov	r19,r2
  808d5c:	10022c16 	blt	r2,zero,809610 <___vfiprintf_internal_r+0x10a0>
  808d60:	df001d83 	ldbu	fp,118(sp)
  808d64:	48007216 	blt	r9,zero,808f30 <___vfiprintf_internal_r+0x9c0>
  808d68:	00ffdfc4 	movi	r3,-129
  808d6c:	94c4b03a 	or	r2,r18,r19
  808d70:	a0e8703a 	and	r20,r20,r3
  808d74:	1000cc26 	beq	r2,zero,8090a8 <___vfiprintf_internal_r+0xb38>
  808d78:	98021026 	beq	r19,zero,8095bc <___vfiprintf_internal_r+0x104c>
  808d7c:	dc402415 	stw	r17,144(sp)
  808d80:	dc002515 	stw	r16,148(sp)
  808d84:	9823883a 	mov	r17,r19
  808d88:	9021883a 	mov	r16,r18
  808d8c:	dd401a04 	addi	r21,sp,104
  808d90:	4825883a 	mov	r18,r9
  808d94:	4027883a 	mov	r19,r8
  808d98:	8009883a 	mov	r4,r16
  808d9c:	880b883a 	mov	r5,r17
  808da0:	01800284 	movi	r6,10
  808da4:	000f883a 	mov	r7,zero
  808da8:	080b1a40 	call	80b1a4 <__umoddi3>
  808dac:	10800c04 	addi	r2,r2,48
  808db0:	ad7fffc4 	addi	r21,r21,-1
  808db4:	8009883a 	mov	r4,r16
  808db8:	880b883a 	mov	r5,r17
  808dbc:	a8800005 	stb	r2,0(r21)
  808dc0:	01800284 	movi	r6,10
  808dc4:	000f883a 	mov	r7,zero
  808dc8:	080ac2c0 	call	80ac2c <__udivdi3>
  808dcc:	1021883a 	mov	r16,r2
  808dd0:	10c4b03a 	or	r2,r2,r3
  808dd4:	1823883a 	mov	r17,r3
  808dd8:	103fef1e 	bne	r2,zero,808d98 <__alt_mem_onchip_mem+0xff800d98>
  808ddc:	dc402417 	ldw	r17,144(sp)
  808de0:	dc002517 	ldw	r16,148(sp)
  808de4:	9013883a 	mov	r9,r18
  808de8:	9811883a 	mov	r8,r19
  808dec:	da801e17 	ldw	r10,120(sp)
  808df0:	5567c83a 	sub	r19,r10,r21
  808df4:	003ede06 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  808df8:	38803fcc 	andi	r2,r7,255
  808dfc:	1080201c 	xori	r2,r2,128
  808e00:	10bfe004 	addi	r2,r2,-128
  808e04:	1002371e 	bne	r2,zero,8096e4 <___vfiprintf_internal_r+0x1174>
  808e08:	01000044 	movi	r4,1
  808e0c:	01c00804 	movi	r7,32
  808e10:	80c00007 	ldb	r3,0(r16)
  808e14:	003e3506 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  808e18:	a5000054 	ori	r20,r20,1
  808e1c:	80c00007 	ldb	r3,0(r16)
  808e20:	003e3206 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  808e24:	a5002014 	ori	r20,r20,128
  808e28:	80c00007 	ldb	r3,0(r16)
  808e2c:	003e2f06 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  808e30:	8015883a 	mov	r10,r16
  808e34:	0023883a 	mov	r17,zero
  808e38:	18bff404 	addi	r2,r3,-48
  808e3c:	50c00007 	ldb	r3,0(r10)
  808e40:	8c4002a4 	muli	r17,r17,10
  808e44:	84000044 	addi	r16,r16,1
  808e48:	8015883a 	mov	r10,r16
  808e4c:	1463883a 	add	r17,r2,r17
  808e50:	18bff404 	addi	r2,r3,-48
  808e54:	30bff92e 	bgeu	r6,r2,808e3c <__alt_mem_onchip_mem+0xff800e3c>
  808e58:	003e2506 	br	8086f0 <__alt_mem_onchip_mem+0xff8006f0>
  808e5c:	21003fcc 	andi	r4,r4,255
  808e60:	2002d41e 	bne	r4,zero,8099b4 <___vfiprintf_internal_r+0x1444>
  808e64:	a5000414 	ori	r20,r20,16
  808e68:	a080080c 	andi	r2,r20,32
  808e6c:	103fb51e 	bne	r2,zero,808d44 <__alt_mem_onchip_mem+0xff800d44>
  808e70:	a080040c 	andi	r2,r20,16
  808e74:	1001f826 	beq	r2,zero,809658 <___vfiprintf_internal_r+0x10e8>
  808e78:	da802217 	ldw	r10,136(sp)
  808e7c:	54800017 	ldw	r18,0(r10)
  808e80:	52800104 	addi	r10,r10,4
  808e84:	da802215 	stw	r10,136(sp)
  808e88:	9027d7fa 	srai	r19,r18,31
  808e8c:	9805883a 	mov	r2,r19
  808e90:	003fb206 	br	808d5c <__alt_mem_onchip_mem+0xff800d5c>
  808e94:	21003fcc 	andi	r4,r4,255
  808e98:	2002c41e 	bne	r4,zero,8099ac <___vfiprintf_internal_r+0x143c>
  808e9c:	a5000414 	ori	r20,r20,16
  808ea0:	a080080c 	andi	r2,r20,32
  808ea4:	103f5f1e 	bne	r2,zero,808c24 <__alt_mem_onchip_mem+0xff800c24>
  808ea8:	a080040c 	andi	r2,r20,16
  808eac:	10020f26 	beq	r2,zero,8096ec <___vfiprintf_internal_r+0x117c>
  808eb0:	da802217 	ldw	r10,136(sp)
  808eb4:	d8001d85 	stb	zero,118(sp)
  808eb8:	0027883a 	mov	r19,zero
  808ebc:	50800104 	addi	r2,r10,4
  808ec0:	54800017 	ldw	r18,0(r10)
  808ec4:	48021116 	blt	r9,zero,80970c <___vfiprintf_internal_r+0x119c>
  808ec8:	00ffdfc4 	movi	r3,-129
  808ecc:	d8802215 	stw	r2,136(sp)
  808ed0:	a0e8703a 	and	r20,r20,r3
  808ed4:	903f5e1e 	bne	r18,zero,808c50 <__alt_mem_onchip_mem+0xff800c50>
  808ed8:	0039883a 	mov	fp,zero
  808edc:	4802a626 	beq	r9,zero,809978 <___vfiprintf_internal_r+0x1408>
  808ee0:	0025883a 	mov	r18,zero
  808ee4:	0027883a 	mov	r19,zero
  808ee8:	003f5a06 	br	808c54 <__alt_mem_onchip_mem+0xff800c54>
  808eec:	21003fcc 	andi	r4,r4,255
  808ef0:	20029f1e 	bne	r4,zero,809970 <___vfiprintf_internal_r+0x1400>
  808ef4:	a5000414 	ori	r20,r20,16
  808ef8:	a080080c 	andi	r2,r20,32
  808efc:	10005e1e 	bne	r2,zero,809078 <___vfiprintf_internal_r+0xb08>
  808f00:	a080040c 	andi	r2,r20,16
  808f04:	1001a21e 	bne	r2,zero,809590 <___vfiprintf_internal_r+0x1020>
  808f08:	a080100c 	andi	r2,r20,64
  808f0c:	d8001d85 	stb	zero,118(sp)
  808f10:	da802217 	ldw	r10,136(sp)
  808f14:	1002231e 	bne	r2,zero,8097a4 <___vfiprintf_internal_r+0x1234>
  808f18:	50800104 	addi	r2,r10,4
  808f1c:	54800017 	ldw	r18,0(r10)
  808f20:	0027883a 	mov	r19,zero
  808f24:	4801a00e 	bge	r9,zero,8095a8 <___vfiprintf_internal_r+0x1038>
  808f28:	d8802215 	stw	r2,136(sp)
  808f2c:	0039883a 	mov	fp,zero
  808f30:	94c4b03a 	or	r2,r18,r19
  808f34:	103f901e 	bne	r2,zero,808d78 <__alt_mem_onchip_mem+0xff800d78>
  808f38:	00800044 	movi	r2,1
  808f3c:	10803fcc 	andi	r2,r2,255
  808f40:	00c00044 	movi	r3,1
  808f44:	10c05926 	beq	r2,r3,8090ac <___vfiprintf_internal_r+0xb3c>
  808f48:	00c00084 	movi	r3,2
  808f4c:	10ffe41e 	bne	r2,r3,808ee0 <__alt_mem_onchip_mem+0xff800ee0>
  808f50:	0025883a 	mov	r18,zero
  808f54:	0027883a 	mov	r19,zero
  808f58:	00013d06 	br	809450 <___vfiprintf_internal_r+0xee0>
  808f5c:	21003fcc 	andi	r4,r4,255
  808f60:	2002811e 	bne	r4,zero,809968 <___vfiprintf_internal_r+0x13f8>
  808f64:	00802074 	movhi	r2,129
  808f68:	10880e04 	addi	r2,r2,8248
  808f6c:	d8802615 	stw	r2,152(sp)
  808f70:	a080080c 	andi	r2,r20,32
  808f74:	103f561e 	bne	r2,zero,808cd0 <__alt_mem_onchip_mem+0xff800cd0>
  808f78:	a080040c 	andi	r2,r20,16
  808f7c:	1001d126 	beq	r2,zero,8096c4 <___vfiprintf_internal_r+0x1154>
  808f80:	da802217 	ldw	r10,136(sp)
  808f84:	0027883a 	mov	r19,zero
  808f88:	54800017 	ldw	r18,0(r10)
  808f8c:	52800104 	addi	r10,r10,4
  808f90:	da802215 	stw	r10,136(sp)
  808f94:	003f5306 	br	808ce4 <__alt_mem_onchip_mem+0xff800ce4>
  808f98:	da802217 	ldw	r10,136(sp)
  808f9c:	d8001d85 	stb	zero,118(sp)
  808fa0:	55400017 	ldw	r21,0(r10)
  808fa4:	50c00104 	addi	r3,r10,4
  808fa8:	a8024226 	beq	r21,zero,8098b4 <___vfiprintf_internal_r+0x1344>
  808fac:	48021816 	blt	r9,zero,809810 <___vfiprintf_internal_r+0x12a0>
  808fb0:	480d883a 	mov	r6,r9
  808fb4:	000b883a 	mov	r5,zero
  808fb8:	a809883a 	mov	r4,r21
  808fbc:	d8c02a15 	stw	r3,168(sp)
  808fc0:	da002b15 	stw	r8,172(sp)
  808fc4:	da402c15 	stw	r9,176(sp)
  808fc8:	0806fec0 	call	806fec <memchr>
  808fcc:	d8c02a17 	ldw	r3,168(sp)
  808fd0:	da002b17 	ldw	r8,172(sp)
  808fd4:	da402c17 	ldw	r9,176(sp)
  808fd8:	10024826 	beq	r2,zero,8098fc <___vfiprintf_internal_r+0x138c>
  808fdc:	1567c83a 	sub	r19,r2,r21
  808fe0:	df001d83 	ldbu	fp,118(sp)
  808fe4:	d8c02215 	stw	r3,136(sp)
  808fe8:	0013883a 	mov	r9,zero
  808fec:	003e6006 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  808ff0:	21003fcc 	andi	r4,r4,255
  808ff4:	203fc026 	beq	r4,zero,808ef8 <__alt_mem_onchip_mem+0xff800ef8>
  808ff8:	d9c01d85 	stb	r7,118(sp)
  808ffc:	003fbe06 	br	808ef8 <__alt_mem_onchip_mem+0xff800ef8>
  809000:	da802217 	ldw	r10,136(sp)
  809004:	54400017 	ldw	r17,0(r10)
  809008:	50800104 	addi	r2,r10,4
  80900c:	883e3b16 	blt	r17,zero,8088fc <__alt_mem_onchip_mem+0xff8008fc>
  809010:	d8802215 	stw	r2,136(sp)
  809014:	80c00007 	ldb	r3,0(r16)
  809018:	003db406 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  80901c:	01000044 	movi	r4,1
  809020:	01c00ac4 	movi	r7,43
  809024:	80c00007 	ldb	r3,0(r16)
  809028:	003db006 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  80902c:	80c00007 	ldb	r3,0(r16)
  809030:	82800044 	addi	r10,r16,1
  809034:	1b423c26 	beq	r3,r13,809928 <___vfiprintf_internal_r+0x13b8>
  809038:	18bff404 	addi	r2,r3,-48
  80903c:	0013883a 	mov	r9,zero
  809040:	30822b36 	bltu	r6,r2,8098f0 <___vfiprintf_internal_r+0x1380>
  809044:	50c00007 	ldb	r3,0(r10)
  809048:	4a4002a4 	muli	r9,r9,10
  80904c:	54000044 	addi	r16,r10,1
  809050:	8015883a 	mov	r10,r16
  809054:	4893883a 	add	r9,r9,r2
  809058:	18bff404 	addi	r2,r3,-48
  80905c:	30bff92e 	bgeu	r6,r2,809044 <__alt_mem_onchip_mem+0xff801044>
  809060:	483da30e 	bge	r9,zero,8086f0 <__alt_mem_onchip_mem+0xff8006f0>
  809064:	027fffc4 	movi	r9,-1
  809068:	003da106 	br	8086f0 <__alt_mem_onchip_mem+0xff8006f0>
  80906c:	a5001014 	ori	r20,r20,64
  809070:	80c00007 	ldb	r3,0(r16)
  809074:	003d9d06 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  809078:	da802217 	ldw	r10,136(sp)
  80907c:	d8001d85 	stb	zero,118(sp)
  809080:	50c00204 	addi	r3,r10,8
  809084:	54800017 	ldw	r18,0(r10)
  809088:	54c00117 	ldw	r19,4(r10)
  80908c:	4801ca16 	blt	r9,zero,8097b8 <___vfiprintf_internal_r+0x1248>
  809090:	013fdfc4 	movi	r4,-129
  809094:	94c4b03a 	or	r2,r18,r19
  809098:	d8c02215 	stw	r3,136(sp)
  80909c:	a128703a 	and	r20,r20,r4
  8090a0:	0039883a 	mov	fp,zero
  8090a4:	103f341e 	bne	r2,zero,808d78 <__alt_mem_onchip_mem+0xff800d78>
  8090a8:	483e2e26 	beq	r9,zero,808964 <__alt_mem_onchip_mem+0xff800964>
  8090ac:	0025883a 	mov	r18,zero
  8090b0:	94800c04 	addi	r18,r18,48
  8090b4:	dc8019c5 	stb	r18,103(sp)
  8090b8:	dcc02717 	ldw	r19,156(sp)
  8090bc:	dd4019c4 	addi	r21,sp,103
  8090c0:	003e2b06 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  8090c4:	21003fcc 	andi	r4,r4,255
  8090c8:	2002361e 	bne	r4,zero,8099a4 <___vfiprintf_internal_r+0x1434>
  8090cc:	1801c126 	beq	r3,zero,8097d4 <___vfiprintf_internal_r+0x1264>
  8090d0:	04800044 	movi	r18,1
  8090d4:	d8c01005 	stb	r3,64(sp)
  8090d8:	d8001d85 	stb	zero,118(sp)
  8090dc:	9027883a 	mov	r19,r18
  8090e0:	dd401004 	addi	r21,sp,64
  8090e4:	003f1106 	br	808d2c <__alt_mem_onchip_mem+0xff800d2c>
  8090e8:	d9402117 	ldw	r5,132(sp)
  8090ec:	d9002017 	ldw	r4,128(sp)
  8090f0:	d9801a04 	addi	r6,sp,104
  8090f4:	d9c02b15 	stw	r7,172(sp)
  8090f8:	dbc02a15 	stw	r15,168(sp)
  8090fc:	080845c0 	call	80845c <__sprint_r.part.0>
  809100:	d9c02b17 	ldw	r7,172(sp)
  809104:	dbc02a17 	ldw	r15,168(sp)
  809108:	10006d1e 	bne	r2,zero,8092c0 <___vfiprintf_internal_r+0xd50>
  80910c:	d9801b17 	ldw	r6,108(sp)
  809110:	d8801c17 	ldw	r2,112(sp)
  809114:	d811883a 	mov	r8,sp
  809118:	31400044 	addi	r5,r6,1
  80911c:	003e3306 	br	8089ec <__alt_mem_onchip_mem+0xff8009ec>
  809120:	d9401b17 	ldw	r5,108(sp)
  809124:	d8801c17 	ldw	r2,112(sp)
  809128:	29000044 	addi	r4,r5,1
  80912c:	d8c01d87 	ldb	r3,118(sp)
  809130:	183e4d26 	beq	r3,zero,808a68 <__alt_mem_onchip_mem+0xff800a68>
  809134:	00c00044 	movi	r3,1
  809138:	d9401d84 	addi	r5,sp,118
  80913c:	10c5883a 	add	r2,r2,r3
  809140:	41400015 	stw	r5,0(r8)
  809144:	40c00115 	stw	r3,4(r8)
  809148:	d8801c15 	stw	r2,112(sp)
  80914c:	d9001b15 	stw	r4,108(sp)
  809150:	014001c4 	movi	r5,7
  809154:	2900a90e 	bge	r5,r4,8093fc <___vfiprintf_internal_r+0xe8c>
  809158:	1000da1e 	bne	r2,zero,8094c4 <___vfiprintf_internal_r+0xf54>
  80915c:	7000ab1e 	bne	r14,zero,80940c <___vfiprintf_internal_r+0xe9c>
  809160:	000b883a 	mov	r5,zero
  809164:	1809883a 	mov	r4,r3
  809168:	d811883a 	mov	r8,sp
  80916c:	00c02004 	movi	r3,128
  809170:	e0fe4d26 	beq	fp,r3,808aa8 <__alt_mem_onchip_mem+0xff800aa8>
  809174:	4cf9c83a 	sub	fp,r9,r19
  809178:	073e7b0e 	bge	zero,fp,808b68 <__alt_mem_onchip_mem+0xff800b68>
  80917c:	01c00404 	movi	r7,16
  809180:	3f01900e 	bge	r7,fp,8097c4 <___vfiprintf_internal_r+0x1254>
  809184:	00c02074 	movhi	r3,129
  809188:	18c87304 	addi	r3,r3,8652
  80918c:	d8c02415 	stw	r3,144(sp)
  809190:	034001c4 	movi	r13,7
  809194:	00000506 	br	8091ac <___vfiprintf_internal_r+0xc3c>
  809198:	29000084 	addi	r4,r5,2
  80919c:	42000204 	addi	r8,r8,8
  8091a0:	180b883a 	mov	r5,r3
  8091a4:	e73ffc04 	addi	fp,fp,-16
  8091a8:	3f000d0e 	bge	r7,fp,8091e0 <___vfiprintf_internal_r+0xc70>
  8091ac:	10800404 	addi	r2,r2,16
  8091b0:	28c00044 	addi	r3,r5,1
  8091b4:	45c00015 	stw	r23,0(r8)
  8091b8:	41c00115 	stw	r7,4(r8)
  8091bc:	d8801c15 	stw	r2,112(sp)
  8091c0:	d8c01b15 	stw	r3,108(sp)
  8091c4:	68fff40e 	bge	r13,r3,809198 <__alt_mem_onchip_mem+0xff801198>
  8091c8:	1000101e 	bne	r2,zero,80920c <___vfiprintf_internal_r+0xc9c>
  8091cc:	e73ffc04 	addi	fp,fp,-16
  8091d0:	01000044 	movi	r4,1
  8091d4:	000b883a 	mov	r5,zero
  8091d8:	d811883a 	mov	r8,sp
  8091dc:	3f3ff316 	blt	r7,fp,8091ac <__alt_mem_onchip_mem+0xff8011ac>
  8091e0:	da802417 	ldw	r10,144(sp)
  8091e4:	1705883a 	add	r2,r2,fp
  8091e8:	47000115 	stw	fp,4(r8)
  8091ec:	42800015 	stw	r10,0(r8)
  8091f0:	d8801c15 	stw	r2,112(sp)
  8091f4:	d9001b15 	stw	r4,108(sp)
  8091f8:	00c001c4 	movi	r3,7
  8091fc:	19003616 	blt	r3,r4,8092d8 <___vfiprintf_internal_r+0xd68>
  809200:	42000204 	addi	r8,r8,8
  809204:	21000044 	addi	r4,r4,1
  809208:	003e5706 	br	808b68 <__alt_mem_onchip_mem+0xff800b68>
  80920c:	d9402117 	ldw	r5,132(sp)
  809210:	d9002017 	ldw	r4,128(sp)
  809214:	d9801a04 	addi	r6,sp,104
  809218:	d9c02b15 	stw	r7,172(sp)
  80921c:	db402a15 	stw	r13,168(sp)
  809220:	080845c0 	call	80845c <__sprint_r.part.0>
  809224:	d9c02b17 	ldw	r7,172(sp)
  809228:	db402a17 	ldw	r13,168(sp)
  80922c:	1000241e 	bne	r2,zero,8092c0 <___vfiprintf_internal_r+0xd50>
  809230:	d9401b17 	ldw	r5,108(sp)
  809234:	d8801c17 	ldw	r2,112(sp)
  809238:	d811883a 	mov	r8,sp
  80923c:	29000044 	addi	r4,r5,1
  809240:	003fd806 	br	8091a4 <__alt_mem_onchip_mem+0xff8011a4>
  809244:	d9401b17 	ldw	r5,108(sp)
  809248:	00c02074 	movhi	r3,129
  80924c:	18c87704 	addi	r3,r3,8668
  809250:	d8c02415 	stw	r3,144(sp)
  809254:	29400044 	addi	r5,r5,1
  809258:	d8c02417 	ldw	r3,144(sp)
  80925c:	14c5883a 	add	r2,r2,r19
  809260:	44c00115 	stw	r19,4(r8)
  809264:	40c00015 	stw	r3,0(r8)
  809268:	d8801c15 	stw	r2,112(sp)
  80926c:	d9401b15 	stw	r5,108(sp)
  809270:	00c001c4 	movi	r3,7
  809274:	1940070e 	bge	r3,r5,809294 <___vfiprintf_internal_r+0xd24>
  809278:	103e4826 	beq	r2,zero,808b9c <__alt_mem_onchip_mem+0xff800b9c>
  80927c:	d9402117 	ldw	r5,132(sp)
  809280:	d9002017 	ldw	r4,128(sp)
  809284:	d9801a04 	addi	r6,sp,104
  809288:	080845c0 	call	80845c <__sprint_r.part.0>
  80928c:	10000c1e 	bne	r2,zero,8092c0 <___vfiprintf_internal_r+0xd50>
  809290:	d8801c17 	ldw	r2,112(sp)
  809294:	8c80010e 	bge	r17,r18,80929c <___vfiprintf_internal_r+0xd2c>
  809298:	9023883a 	mov	r17,r18
  80929c:	da802317 	ldw	r10,140(sp)
  8092a0:	5455883a 	add	r10,r10,r17
  8092a4:	da802315 	stw	r10,140(sp)
  8092a8:	103e4126 	beq	r2,zero,808bb0 <__alt_mem_onchip_mem+0xff800bb0>
  8092ac:	d9402117 	ldw	r5,132(sp)
  8092b0:	d9002017 	ldw	r4,128(sp)
  8092b4:	d9801a04 	addi	r6,sp,104
  8092b8:	080845c0 	call	80845c <__sprint_r.part.0>
  8092bc:	103e3c26 	beq	r2,zero,808bb0 <__alt_mem_onchip_mem+0xff800bb0>
  8092c0:	dd002117 	ldw	r20,132(sp)
  8092c4:	a080030b 	ldhu	r2,12(r20)
  8092c8:	1080100c 	andi	r2,r2,64
  8092cc:	1001231e 	bne	r2,zero,80975c <___vfiprintf_internal_r+0x11ec>
  8092d0:	d8802317 	ldw	r2,140(sp)
  8092d4:	003d7b06 	br	8088c4 <__alt_mem_onchip_mem+0xff8008c4>
  8092d8:	1000991e 	bne	r2,zero,809540 <___vfiprintf_internal_r+0xfd0>
  8092dc:	00c00044 	movi	r3,1
  8092e0:	9805883a 	mov	r2,r19
  8092e4:	dd400015 	stw	r21,0(sp)
  8092e8:	dcc00115 	stw	r19,4(sp)
  8092ec:	dcc01c15 	stw	r19,112(sp)
  8092f0:	d8c01b15 	stw	r3,108(sp)
  8092f4:	d811883a 	mov	r8,sp
  8092f8:	42000204 	addi	r8,r8,8
  8092fc:	a2c0010c 	andi	r11,r20,4
  809300:	583fe426 	beq	r11,zero,809294 <__alt_mem_onchip_mem+0xff801294>
  809304:	8ca7c83a 	sub	r19,r17,r18
  809308:	04ffe20e 	bge	zero,r19,809294 <__alt_mem_onchip_mem+0xff801294>
  80930c:	01c00404 	movi	r7,16
  809310:	3cffcc0e 	bge	r7,r19,809244 <__alt_mem_onchip_mem+0xff801244>
  809314:	02802074 	movhi	r10,129
  809318:	52887704 	addi	r10,r10,8668
  80931c:	d9001b17 	ldw	r4,108(sp)
  809320:	da802415 	stw	r10,144(sp)
  809324:	382b883a 	mov	r21,r7
  809328:	050001c4 	movi	r20,7
  80932c:	df002017 	ldw	fp,128(sp)
  809330:	00000506 	br	809348 <___vfiprintf_internal_r+0xdd8>
  809334:	21400084 	addi	r5,r4,2
  809338:	42000204 	addi	r8,r8,8
  80933c:	1809883a 	mov	r4,r3
  809340:	9cfffc04 	addi	r19,r19,-16
  809344:	acffc40e 	bge	r21,r19,809258 <__alt_mem_onchip_mem+0xff801258>
  809348:	10800404 	addi	r2,r2,16
  80934c:	20c00044 	addi	r3,r4,1
  809350:	45800015 	stw	r22,0(r8)
  809354:	45400115 	stw	r21,4(r8)
  809358:	d8801c15 	stw	r2,112(sp)
  80935c:	d8c01b15 	stw	r3,108(sp)
  809360:	a0fff40e 	bge	r20,r3,809334 <__alt_mem_onchip_mem+0xff801334>
  809364:	1000041e 	bne	r2,zero,809378 <___vfiprintf_internal_r+0xe08>
  809368:	01400044 	movi	r5,1
  80936c:	0009883a 	mov	r4,zero
  809370:	d811883a 	mov	r8,sp
  809374:	003ff206 	br	809340 <__alt_mem_onchip_mem+0xff801340>
  809378:	d9402117 	ldw	r5,132(sp)
  80937c:	d9801a04 	addi	r6,sp,104
  809380:	e009883a 	mov	r4,fp
  809384:	080845c0 	call	80845c <__sprint_r.part.0>
  809388:	103fcd1e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  80938c:	d9001b17 	ldw	r4,108(sp)
  809390:	d8801c17 	ldw	r2,112(sp)
  809394:	d811883a 	mov	r8,sp
  809398:	21400044 	addi	r5,r4,1
  80939c:	003fe806 	br	809340 <__alt_mem_onchip_mem+0xff801340>
  8093a0:	d9402117 	ldw	r5,132(sp)
  8093a4:	d9002017 	ldw	r4,128(sp)
  8093a8:	d9801a04 	addi	r6,sp,104
  8093ac:	d9c02b15 	stw	r7,172(sp)
  8093b0:	db402a15 	stw	r13,168(sp)
  8093b4:	080845c0 	call	80845c <__sprint_r.part.0>
  8093b8:	d9c02b17 	ldw	r7,172(sp)
  8093bc:	db402a17 	ldw	r13,168(sp)
  8093c0:	103fbf1e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  8093c4:	d9401b17 	ldw	r5,108(sp)
  8093c8:	d8801c17 	ldw	r2,112(sp)
  8093cc:	d811883a 	mov	r8,sp
  8093d0:	29800044 	addi	r6,r5,1
  8093d4:	003dc406 	br	808ae8 <__alt_mem_onchip_mem+0xff800ae8>
  8093d8:	1000d21e 	bne	r2,zero,809724 <___vfiprintf_internal_r+0x11b4>
  8093dc:	d8c01d87 	ldb	r3,118(sp)
  8093e0:	18009526 	beq	r3,zero,809638 <___vfiprintf_internal_r+0x10c8>
  8093e4:	00800044 	movi	r2,1
  8093e8:	d8c01d84 	addi	r3,sp,118
  8093ec:	1009883a 	mov	r4,r2
  8093f0:	d8c00015 	stw	r3,0(sp)
  8093f4:	d8800115 	stw	r2,4(sp)
  8093f8:	d811883a 	mov	r8,sp
  8093fc:	200b883a 	mov	r5,r4
  809400:	42000204 	addi	r8,r8,8
  809404:	21000044 	addi	r4,r4,1
  809408:	003d9706 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>
  80940c:	d9001d04 	addi	r4,sp,116
  809410:	00800084 	movi	r2,2
  809414:	d9000015 	stw	r4,0(sp)
  809418:	d8800115 	stw	r2,4(sp)
  80941c:	1809883a 	mov	r4,r3
  809420:	d811883a 	mov	r8,sp
  809424:	200b883a 	mov	r5,r4
  809428:	42000204 	addi	r8,r8,8
  80942c:	21000044 	addi	r4,r4,1
  809430:	003f4e06 	br	80916c <__alt_mem_onchip_mem+0xff80116c>
  809434:	d8001d85 	stb	zero,118(sp)
  809438:	48005016 	blt	r9,zero,80957c <___vfiprintf_internal_r+0x100c>
  80943c:	00ffdfc4 	movi	r3,-129
  809440:	94c4b03a 	or	r2,r18,r19
  809444:	a0e8703a 	and	r20,r20,r3
  809448:	103d4426 	beq	r2,zero,80895c <__alt_mem_onchip_mem+0xff80095c>
  80944c:	0039883a 	mov	fp,zero
  809450:	d9002617 	ldw	r4,152(sp)
  809454:	dd401a04 	addi	r21,sp,104
  809458:	908003cc 	andi	r2,r18,15
  80945c:	9806973a 	slli	r3,r19,28
  809460:	2085883a 	add	r2,r4,r2
  809464:	9024d13a 	srli	r18,r18,4
  809468:	10800003 	ldbu	r2,0(r2)
  80946c:	9826d13a 	srli	r19,r19,4
  809470:	ad7fffc4 	addi	r21,r21,-1
  809474:	1ca4b03a 	or	r18,r3,r18
  809478:	a8800005 	stb	r2,0(r21)
  80947c:	94c4b03a 	or	r2,r18,r19
  809480:	103ff51e 	bne	r2,zero,809458 <__alt_mem_onchip_mem+0xff801458>
  809484:	003e5906 	br	808dec <__alt_mem_onchip_mem+0xff800dec>
  809488:	d9402117 	ldw	r5,132(sp)
  80948c:	d9002017 	ldw	r4,128(sp)
  809490:	d9801a04 	addi	r6,sp,104
  809494:	080845c0 	call	80845c <__sprint_r.part.0>
  809498:	103f891e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  80949c:	d8801c17 	ldw	r2,112(sp)
  8094a0:	d811883a 	mov	r8,sp
  8094a4:	003f9506 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  8094a8:	d9402117 	ldw	r5,132(sp)
  8094ac:	d9002017 	ldw	r4,128(sp)
  8094b0:	d9801a04 	addi	r6,sp,104
  8094b4:	080845c0 	call	80845c <__sprint_r.part.0>
  8094b8:	103f811e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  8094bc:	d811883a 	mov	r8,sp
  8094c0:	003ced06 	br	808878 <__alt_mem_onchip_mem+0xff800878>
  8094c4:	d9402117 	ldw	r5,132(sp)
  8094c8:	d9002017 	ldw	r4,128(sp)
  8094cc:	d9801a04 	addi	r6,sp,104
  8094d0:	da402c15 	stw	r9,176(sp)
  8094d4:	db802a15 	stw	r14,168(sp)
  8094d8:	080845c0 	call	80845c <__sprint_r.part.0>
  8094dc:	da402c17 	ldw	r9,176(sp)
  8094e0:	db802a17 	ldw	r14,168(sp)
  8094e4:	103f761e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  8094e8:	d9401b17 	ldw	r5,108(sp)
  8094ec:	d8801c17 	ldw	r2,112(sp)
  8094f0:	d811883a 	mov	r8,sp
  8094f4:	29000044 	addi	r4,r5,1
  8094f8:	003d5b06 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>
  8094fc:	d9402117 	ldw	r5,132(sp)
  809500:	d9002017 	ldw	r4,128(sp)
  809504:	d9801a04 	addi	r6,sp,104
  809508:	da402c15 	stw	r9,176(sp)
  80950c:	080845c0 	call	80845c <__sprint_r.part.0>
  809510:	da402c17 	ldw	r9,176(sp)
  809514:	103f6a1e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  809518:	d9401b17 	ldw	r5,108(sp)
  80951c:	d8801c17 	ldw	r2,112(sp)
  809520:	d811883a 	mov	r8,sp
  809524:	29000044 	addi	r4,r5,1
  809528:	003f1006 	br	80916c <__alt_mem_onchip_mem+0xff80116c>
  80952c:	1000c31e 	bne	r2,zero,80983c <___vfiprintf_internal_r+0x12cc>
  809530:	01000044 	movi	r4,1
  809534:	000b883a 	mov	r5,zero
  809538:	d811883a 	mov	r8,sp
  80953c:	003f0d06 	br	809174 <__alt_mem_onchip_mem+0xff801174>
  809540:	d9402117 	ldw	r5,132(sp)
  809544:	d9002017 	ldw	r4,128(sp)
  809548:	d9801a04 	addi	r6,sp,104
  80954c:	080845c0 	call	80845c <__sprint_r.part.0>
  809550:	103f5b1e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  809554:	d9001b17 	ldw	r4,108(sp)
  809558:	d8801c17 	ldw	r2,112(sp)
  80955c:	d811883a 	mov	r8,sp
  809560:	21000044 	addi	r4,r4,1
  809564:	003d8006 	br	808b68 <__alt_mem_onchip_mem+0xff800b68>
  809568:	01002074 	movhi	r4,129
  80956c:	21081304 	addi	r4,r4,8268
  809570:	d9002615 	stw	r4,152(sp)
  809574:	d8c02215 	stw	r3,136(sp)
  809578:	1029883a 	mov	r20,r2
  80957c:	94c4b03a 	or	r2,r18,r19
  809580:	103fb21e 	bne	r2,zero,80944c <__alt_mem_onchip_mem+0xff80144c>
  809584:	0039883a 	mov	fp,zero
  809588:	00800084 	movi	r2,2
  80958c:	003e6b06 	br	808f3c <__alt_mem_onchip_mem+0xff800f3c>
  809590:	da802217 	ldw	r10,136(sp)
  809594:	d8001d85 	stb	zero,118(sp)
  809598:	0027883a 	mov	r19,zero
  80959c:	50800104 	addi	r2,r10,4
  8095a0:	54800017 	ldw	r18,0(r10)
  8095a4:	483e6016 	blt	r9,zero,808f28 <__alt_mem_onchip_mem+0xff800f28>
  8095a8:	00ffdfc4 	movi	r3,-129
  8095ac:	d8802215 	stw	r2,136(sp)
  8095b0:	a0e8703a 	and	r20,r20,r3
  8095b4:	0039883a 	mov	fp,zero
  8095b8:	903ebb26 	beq	r18,zero,8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  8095bc:	00800244 	movi	r2,9
  8095c0:	14bdee36 	bltu	r2,r18,808d7c <__alt_mem_onchip_mem+0xff800d7c>
  8095c4:	003eba06 	br	8090b0 <__alt_mem_onchip_mem+0xff8010b0>
  8095c8:	00800c04 	movi	r2,48
  8095cc:	d8c01d45 	stb	r3,117(sp)
  8095d0:	d8801d05 	stb	r2,116(sp)
  8095d4:	d8001d85 	stb	zero,118(sp)
  8095d8:	a0c00094 	ori	r3,r20,2
  8095dc:	4800a916 	blt	r9,zero,809884 <___vfiprintf_internal_r+0x1314>
  8095e0:	00bfdfc4 	movi	r2,-129
  8095e4:	a096703a 	and	r11,r20,r2
  8095e8:	5d000094 	ori	r20,r11,2
  8095ec:	0039883a 	mov	fp,zero
  8095f0:	003f9706 	br	809450 <__alt_mem_onchip_mem+0xff801450>
  8095f4:	8025883a 	mov	r18,r16
  8095f8:	003c2e06 	br	8086b4 <__alt_mem_onchip_mem+0xff8006b4>
  8095fc:	00802074 	movhi	r2,129
  809600:	10881304 	addi	r2,r2,8268
  809604:	0039883a 	mov	fp,zero
  809608:	d8802615 	stw	r2,152(sp)
  80960c:	003f9006 	br	809450 <__alt_mem_onchip_mem+0xff801450>
  809610:	04a5c83a 	sub	r18,zero,r18
  809614:	07000b44 	movi	fp,45
  809618:	9004c03a 	cmpne	r2,r18,zero
  80961c:	04e7c83a 	sub	r19,zero,r19
  809620:	df001d85 	stb	fp,118(sp)
  809624:	98a7c83a 	sub	r19,r19,r2
  809628:	48009f16 	blt	r9,zero,8098a8 <___vfiprintf_internal_r+0x1338>
  80962c:	00bfdfc4 	movi	r2,-129
  809630:	a0a8703a 	and	r20,r20,r2
  809634:	003dd006 	br	808d78 <__alt_mem_onchip_mem+0xff800d78>
  809638:	70004c26 	beq	r14,zero,80976c <___vfiprintf_internal_r+0x11fc>
  80963c:	00800084 	movi	r2,2
  809640:	d8c01d04 	addi	r3,sp,116
  809644:	d8c00015 	stw	r3,0(sp)
  809648:	d8800115 	stw	r2,4(sp)
  80964c:	01000044 	movi	r4,1
  809650:	d811883a 	mov	r8,sp
  809654:	003f7306 	br	809424 <__alt_mem_onchip_mem+0xff801424>
  809658:	a080100c 	andi	r2,r20,64
  80965c:	da802217 	ldw	r10,136(sp)
  809660:	103e0626 	beq	r2,zero,808e7c <__alt_mem_onchip_mem+0xff800e7c>
  809664:	5480000f 	ldh	r18,0(r10)
  809668:	52800104 	addi	r10,r10,4
  80966c:	da802215 	stw	r10,136(sp)
  809670:	9027d7fa 	srai	r19,r18,31
  809674:	9805883a 	mov	r2,r19
  809678:	003db806 	br	808d5c <__alt_mem_onchip_mem+0xff800d5c>
  80967c:	a080040c 	andi	r2,r20,16
  809680:	1000091e 	bne	r2,zero,8096a8 <___vfiprintf_internal_r+0x1138>
  809684:	a2c0100c 	andi	r11,r20,64
  809688:	58000726 	beq	r11,zero,8096a8 <___vfiprintf_internal_r+0x1138>
  80968c:	da802217 	ldw	r10,136(sp)
  809690:	50800017 	ldw	r2,0(r10)
  809694:	52800104 	addi	r10,r10,4
  809698:	da802215 	stw	r10,136(sp)
  80969c:	da802317 	ldw	r10,140(sp)
  8096a0:	1280000d 	sth	r10,0(r2)
  8096a4:	003be706 	br	808644 <__alt_mem_onchip_mem+0xff800644>
  8096a8:	da802217 	ldw	r10,136(sp)
  8096ac:	50800017 	ldw	r2,0(r10)
  8096b0:	52800104 	addi	r10,r10,4
  8096b4:	da802215 	stw	r10,136(sp)
  8096b8:	da802317 	ldw	r10,140(sp)
  8096bc:	12800015 	stw	r10,0(r2)
  8096c0:	003be006 	br	808644 <__alt_mem_onchip_mem+0xff800644>
  8096c4:	a080100c 	andi	r2,r20,64
  8096c8:	da802217 	ldw	r10,136(sp)
  8096cc:	10003026 	beq	r2,zero,809790 <___vfiprintf_internal_r+0x1220>
  8096d0:	5480000b 	ldhu	r18,0(r10)
  8096d4:	52800104 	addi	r10,r10,4
  8096d8:	0027883a 	mov	r19,zero
  8096dc:	da802215 	stw	r10,136(sp)
  8096e0:	003d8006 	br	808ce4 <__alt_mem_onchip_mem+0xff800ce4>
  8096e4:	80c00007 	ldb	r3,0(r16)
  8096e8:	003c0006 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  8096ec:	a080100c 	andi	r2,r20,64
  8096f0:	d8001d85 	stb	zero,118(sp)
  8096f4:	da802217 	ldw	r10,136(sp)
  8096f8:	1000201e 	bne	r2,zero,80977c <___vfiprintf_internal_r+0x120c>
  8096fc:	50800104 	addi	r2,r10,4
  809700:	54800017 	ldw	r18,0(r10)
  809704:	0027883a 	mov	r19,zero
  809708:	483def0e 	bge	r9,zero,808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  80970c:	94c6b03a 	or	r3,r18,r19
  809710:	d8802215 	stw	r2,136(sp)
  809714:	183d4e1e 	bne	r3,zero,808c50 <__alt_mem_onchip_mem+0xff800c50>
  809718:	0039883a 	mov	fp,zero
  80971c:	0005883a 	mov	r2,zero
  809720:	003e0606 	br	808f3c <__alt_mem_onchip_mem+0xff800f3c>
  809724:	d9402117 	ldw	r5,132(sp)
  809728:	d9002017 	ldw	r4,128(sp)
  80972c:	d9801a04 	addi	r6,sp,104
  809730:	da402c15 	stw	r9,176(sp)
  809734:	db802a15 	stw	r14,168(sp)
  809738:	080845c0 	call	80845c <__sprint_r.part.0>
  80973c:	da402c17 	ldw	r9,176(sp)
  809740:	db802a17 	ldw	r14,168(sp)
  809744:	103ede1e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  809748:	d9401b17 	ldw	r5,108(sp)
  80974c:	d8801c17 	ldw	r2,112(sp)
  809750:	d811883a 	mov	r8,sp
  809754:	29000044 	addi	r4,r5,1
  809758:	003e7406 	br	80912c <__alt_mem_onchip_mem+0xff80112c>
  80975c:	00bfffc4 	movi	r2,-1
  809760:	003c5806 	br	8088c4 <__alt_mem_onchip_mem+0xff8008c4>
  809764:	d811883a 	mov	r8,sp
  809768:	003ee806 	br	80930c <__alt_mem_onchip_mem+0xff80130c>
  80976c:	000b883a 	mov	r5,zero
  809770:	01000044 	movi	r4,1
  809774:	d811883a 	mov	r8,sp
  809778:	003e7c06 	br	80916c <__alt_mem_onchip_mem+0xff80116c>
  80977c:	50800104 	addi	r2,r10,4
  809780:	5480000b 	ldhu	r18,0(r10)
  809784:	0027883a 	mov	r19,zero
  809788:	483dcf0e 	bge	r9,zero,808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  80978c:	003fdf06 	br	80970c <__alt_mem_onchip_mem+0xff80170c>
  809790:	54800017 	ldw	r18,0(r10)
  809794:	52800104 	addi	r10,r10,4
  809798:	0027883a 	mov	r19,zero
  80979c:	da802215 	stw	r10,136(sp)
  8097a0:	003d5006 	br	808ce4 <__alt_mem_onchip_mem+0xff800ce4>
  8097a4:	50800104 	addi	r2,r10,4
  8097a8:	5480000b 	ldhu	r18,0(r10)
  8097ac:	0027883a 	mov	r19,zero
  8097b0:	483f7d0e 	bge	r9,zero,8095a8 <__alt_mem_onchip_mem+0xff8015a8>
  8097b4:	003ddc06 	br	808f28 <__alt_mem_onchip_mem+0xff800f28>
  8097b8:	d8c02215 	stw	r3,136(sp)
  8097bc:	0039883a 	mov	fp,zero
  8097c0:	003ddb06 	br	808f30 <__alt_mem_onchip_mem+0xff800f30>
  8097c4:	02802074 	movhi	r10,129
  8097c8:	52887304 	addi	r10,r10,8652
  8097cc:	da802415 	stw	r10,144(sp)
  8097d0:	003e8306 	br	8091e0 <__alt_mem_onchip_mem+0xff8011e0>
  8097d4:	d8801c17 	ldw	r2,112(sp)
  8097d8:	dd002117 	ldw	r20,132(sp)
  8097dc:	103eb926 	beq	r2,zero,8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  8097e0:	d9002017 	ldw	r4,128(sp)
  8097e4:	d9801a04 	addi	r6,sp,104
  8097e8:	a00b883a 	mov	r5,r20
  8097ec:	080845c0 	call	80845c <__sprint_r.part.0>
  8097f0:	003eb406 	br	8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  8097f4:	80c00043 	ldbu	r3,1(r16)
  8097f8:	a5000814 	ori	r20,r20,32
  8097fc:	84000044 	addi	r16,r16,1
  809800:	18c03fcc 	andi	r3,r3,255
  809804:	18c0201c 	xori	r3,r3,128
  809808:	18ffe004 	addi	r3,r3,-128
  80980c:	003bb706 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  809810:	a809883a 	mov	r4,r21
  809814:	d8c02a15 	stw	r3,168(sp)
  809818:	da002b15 	stw	r8,172(sp)
  80981c:	08083c40 	call	8083c4 <strlen>
  809820:	d8c02a17 	ldw	r3,168(sp)
  809824:	1027883a 	mov	r19,r2
  809828:	df001d83 	ldbu	fp,118(sp)
  80982c:	d8c02215 	stw	r3,136(sp)
  809830:	0013883a 	mov	r9,zero
  809834:	da002b17 	ldw	r8,172(sp)
  809838:	003c4d06 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  80983c:	d9402117 	ldw	r5,132(sp)
  809840:	d9002017 	ldw	r4,128(sp)
  809844:	d9801a04 	addi	r6,sp,104
  809848:	da402c15 	stw	r9,176(sp)
  80984c:	080845c0 	call	80845c <__sprint_r.part.0>
  809850:	da402c17 	ldw	r9,176(sp)
  809854:	103e9a1e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  809858:	d9401b17 	ldw	r5,108(sp)
  80985c:	d8801c17 	ldw	r2,112(sp)
  809860:	d811883a 	mov	r8,sp
  809864:	29000044 	addi	r4,r5,1
  809868:	003e4206 	br	809174 <__alt_mem_onchip_mem+0xff801174>
  80986c:	d9401b17 	ldw	r5,108(sp)
  809870:	01002074 	movhi	r4,129
  809874:	21087704 	addi	r4,r4,8668
  809878:	d9002415 	stw	r4,144(sp)
  80987c:	29400044 	addi	r5,r5,1
  809880:	003c6d06 	br	808a38 <__alt_mem_onchip_mem+0xff800a38>
  809884:	0039883a 	mov	fp,zero
  809888:	00800084 	movi	r2,2
  80988c:	10803fcc 	andi	r2,r2,255
  809890:	01000044 	movi	r4,1
  809894:	11001e26 	beq	r2,r4,809910 <___vfiprintf_internal_r+0x13a0>
  809898:	01000084 	movi	r4,2
  80989c:	11001e1e 	bne	r2,r4,809918 <___vfiprintf_internal_r+0x13a8>
  8098a0:	1829883a 	mov	r20,r3
  8098a4:	003eea06 	br	809450 <__alt_mem_onchip_mem+0xff801450>
  8098a8:	a007883a 	mov	r3,r20
  8098ac:	00800044 	movi	r2,1
  8098b0:	003ff606 	br	80988c <__alt_mem_onchip_mem+0xff80188c>
  8098b4:	00800184 	movi	r2,6
  8098b8:	1240012e 	bgeu	r2,r9,8098c0 <___vfiprintf_internal_r+0x1350>
  8098bc:	1013883a 	mov	r9,r2
  8098c0:	4827883a 	mov	r19,r9
  8098c4:	4825883a 	mov	r18,r9
  8098c8:	48001516 	blt	r9,zero,809920 <___vfiprintf_internal_r+0x13b0>
  8098cc:	05402074 	movhi	r21,129
  8098d0:	d8c02215 	stw	r3,136(sp)
  8098d4:	ad481804 	addi	r21,r21,8288
  8098d8:	003d1406 	br	808d2c <__alt_mem_onchip_mem+0xff800d2c>
  8098dc:	02802074 	movhi	r10,129
  8098e0:	52887304 	addi	r10,r10,8652
  8098e4:	da802415 	stw	r10,144(sp)
  8098e8:	200d883a 	mov	r6,r4
  8098ec:	003c9106 	br	808b34 <__alt_mem_onchip_mem+0xff800b34>
  8098f0:	5021883a 	mov	r16,r10
  8098f4:	0013883a 	mov	r9,zero
  8098f8:	003b7d06 	br	8086f0 <__alt_mem_onchip_mem+0xff8006f0>
  8098fc:	4827883a 	mov	r19,r9
  809900:	df001d83 	ldbu	fp,118(sp)
  809904:	d8c02215 	stw	r3,136(sp)
  809908:	0013883a 	mov	r9,zero
  80990c:	003c1806 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  809910:	1829883a 	mov	r20,r3
  809914:	003d1806 	br	808d78 <__alt_mem_onchip_mem+0xff800d78>
  809918:	1829883a 	mov	r20,r3
  80991c:	003ccd06 	br	808c54 <__alt_mem_onchip_mem+0xff800c54>
  809920:	0025883a 	mov	r18,zero
  809924:	003fe906 	br	8098cc <__alt_mem_onchip_mem+0xff8018cc>
  809928:	d8802217 	ldw	r2,136(sp)
  80992c:	80c00043 	ldbu	r3,1(r16)
  809930:	5021883a 	mov	r16,r10
  809934:	12400017 	ldw	r9,0(r2)
  809938:	10800104 	addi	r2,r2,4
  80993c:	d8802215 	stw	r2,136(sp)
  809940:	483faf0e 	bge	r9,zero,809800 <__alt_mem_onchip_mem+0xff801800>
  809944:	18c03fcc 	andi	r3,r3,255
  809948:	18c0201c 	xori	r3,r3,128
  80994c:	027fffc4 	movi	r9,-1
  809950:	18ffe004 	addi	r3,r3,-128
  809954:	003b6506 	br	8086ec <__alt_mem_onchip_mem+0xff8006ec>
  809958:	d9c01d85 	stb	r7,118(sp)
  80995c:	003ca006 	br	808be0 <__alt_mem_onchip_mem+0xff800be0>
  809960:	d9c01d85 	stb	r7,118(sp)
  809964:	003cad06 	br	808c1c <__alt_mem_onchip_mem+0xff800c1c>
  809968:	d9c01d85 	stb	r7,118(sp)
  80996c:	003d7d06 	br	808f64 <__alt_mem_onchip_mem+0xff800f64>
  809970:	d9c01d85 	stb	r7,118(sp)
  809974:	003d5f06 	br	808ef4 <__alt_mem_onchip_mem+0xff800ef4>
  809978:	a080004c 	andi	r2,r20,1
  80997c:	0039883a 	mov	fp,zero
  809980:	10000526 	beq	r2,zero,809998 <___vfiprintf_internal_r+0x1428>
  809984:	00800c04 	movi	r2,48
  809988:	d88019c5 	stb	r2,103(sp)
  80998c:	dcc02717 	ldw	r19,156(sp)
  809990:	dd4019c4 	addi	r21,sp,103
  809994:	003bf606 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  809998:	0027883a 	mov	r19,zero
  80999c:	dd401a04 	addi	r21,sp,104
  8099a0:	003bf306 	br	808970 <__alt_mem_onchip_mem+0xff800970>
  8099a4:	d9c01d85 	stb	r7,118(sp)
  8099a8:	003dc806 	br	8090cc <__alt_mem_onchip_mem+0xff8010cc>
  8099ac:	d9c01d85 	stb	r7,118(sp)
  8099b0:	003d3a06 	br	808e9c <__alt_mem_onchip_mem+0xff800e9c>
  8099b4:	d9c01d85 	stb	r7,118(sp)
  8099b8:	003d2a06 	br	808e64 <__alt_mem_onchip_mem+0xff800e64>
  8099bc:	d9c01d85 	stb	r7,118(sp)
  8099c0:	003cde06 	br	808d3c <__alt_mem_onchip_mem+0xff800d3c>
  8099c4:	d9c01d85 	stb	r7,118(sp)
  8099c8:	003cbc06 	br	808cbc <__alt_mem_onchip_mem+0xff800cbc>

008099cc <__vfiprintf_internal>:
  8099cc:	00802074 	movhi	r2,129
  8099d0:	10909704 	addi	r2,r2,16988
  8099d4:	300f883a 	mov	r7,r6
  8099d8:	280d883a 	mov	r6,r5
  8099dc:	200b883a 	mov	r5,r4
  8099e0:	11000017 	ldw	r4,0(r2)
  8099e4:	08085701 	jmpi	808570 <___vfiprintf_internal_r>

008099e8 <__sbprintf>:
  8099e8:	2880030b 	ldhu	r2,12(r5)
  8099ec:	2ac01917 	ldw	r11,100(r5)
  8099f0:	2a80038b 	ldhu	r10,14(r5)
  8099f4:	2a400717 	ldw	r9,28(r5)
  8099f8:	2a000917 	ldw	r8,36(r5)
  8099fc:	defee204 	addi	sp,sp,-1144
  809a00:	00c10004 	movi	r3,1024
  809a04:	dc011a15 	stw	r16,1128(sp)
  809a08:	10bfff4c 	andi	r2,r2,65533
  809a0c:	2821883a 	mov	r16,r5
  809a10:	d8cb883a 	add	r5,sp,r3
  809a14:	dc811c15 	stw	r18,1136(sp)
  809a18:	dc411b15 	stw	r17,1132(sp)
  809a1c:	dfc11d15 	stw	ra,1140(sp)
  809a20:	2025883a 	mov	r18,r4
  809a24:	d881030d 	sth	r2,1036(sp)
  809a28:	dac11915 	stw	r11,1124(sp)
  809a2c:	da81038d 	sth	r10,1038(sp)
  809a30:	da410715 	stw	r9,1052(sp)
  809a34:	da010915 	stw	r8,1060(sp)
  809a38:	dec10015 	stw	sp,1024(sp)
  809a3c:	dec10415 	stw	sp,1040(sp)
  809a40:	d8c10215 	stw	r3,1032(sp)
  809a44:	d8c10515 	stw	r3,1044(sp)
  809a48:	d8010615 	stw	zero,1048(sp)
  809a4c:	08085700 	call	808570 <___vfiprintf_internal_r>
  809a50:	1023883a 	mov	r17,r2
  809a54:	10000416 	blt	r2,zero,809a68 <__sbprintf+0x80>
  809a58:	d9410004 	addi	r5,sp,1024
  809a5c:	9009883a 	mov	r4,r18
  809a60:	08068f00 	call	8068f0 <_fflush_r>
  809a64:	10000d1e 	bne	r2,zero,809a9c <__sbprintf+0xb4>
  809a68:	d881030b 	ldhu	r2,1036(sp)
  809a6c:	1080100c 	andi	r2,r2,64
  809a70:	10000326 	beq	r2,zero,809a80 <__sbprintf+0x98>
  809a74:	8080030b 	ldhu	r2,12(r16)
  809a78:	10801014 	ori	r2,r2,64
  809a7c:	8080030d 	sth	r2,12(r16)
  809a80:	8805883a 	mov	r2,r17
  809a84:	dfc11d17 	ldw	ra,1140(sp)
  809a88:	dc811c17 	ldw	r18,1136(sp)
  809a8c:	dc411b17 	ldw	r17,1132(sp)
  809a90:	dc011a17 	ldw	r16,1128(sp)
  809a94:	dec11e04 	addi	sp,sp,1144
  809a98:	f800283a 	ret
  809a9c:	047fffc4 	movi	r17,-1
  809aa0:	003ff106 	br	809a68 <__alt_mem_onchip_mem+0xff801a68>

00809aa4 <_calloc_r>:
  809aa4:	298b383a 	mul	r5,r5,r6
  809aa8:	defffe04 	addi	sp,sp,-8
  809aac:	dfc00115 	stw	ra,4(sp)
  809ab0:	dc000015 	stw	r16,0(sp)
  809ab4:	0801a680 	call	801a68 <_malloc_r>
  809ab8:	10002926 	beq	r2,zero,809b60 <_calloc_r+0xbc>
  809abc:	11bfff17 	ldw	r6,-4(r2)
  809ac0:	1021883a 	mov	r16,r2
  809ac4:	00bfff04 	movi	r2,-4
  809ac8:	308c703a 	and	r6,r6,r2
  809acc:	00c00904 	movi	r3,36
  809ad0:	308d883a 	add	r6,r6,r2
  809ad4:	19801636 	bltu	r3,r6,809b30 <_calloc_r+0x8c>
  809ad8:	008004c4 	movi	r2,19
  809adc:	11800b2e 	bgeu	r2,r6,809b0c <_calloc_r+0x68>
  809ae0:	80000015 	stw	zero,0(r16)
  809ae4:	80000115 	stw	zero,4(r16)
  809ae8:	008006c4 	movi	r2,27
  809aec:	11801a2e 	bgeu	r2,r6,809b58 <_calloc_r+0xb4>
  809af0:	80000215 	stw	zero,8(r16)
  809af4:	80000315 	stw	zero,12(r16)
  809af8:	30c0151e 	bne	r6,r3,809b50 <_calloc_r+0xac>
  809afc:	80000415 	stw	zero,16(r16)
  809b00:	80800604 	addi	r2,r16,24
  809b04:	80000515 	stw	zero,20(r16)
  809b08:	00000106 	br	809b10 <_calloc_r+0x6c>
  809b0c:	8005883a 	mov	r2,r16
  809b10:	10000015 	stw	zero,0(r2)
  809b14:	10000115 	stw	zero,4(r2)
  809b18:	10000215 	stw	zero,8(r2)
  809b1c:	8005883a 	mov	r2,r16
  809b20:	dfc00117 	ldw	ra,4(sp)
  809b24:	dc000017 	ldw	r16,0(sp)
  809b28:	dec00204 	addi	sp,sp,8
  809b2c:	f800283a 	ret
  809b30:	000b883a 	mov	r5,zero
  809b34:	8009883a 	mov	r4,r16
  809b38:	08022740 	call	802274 <memset>
  809b3c:	8005883a 	mov	r2,r16
  809b40:	dfc00117 	ldw	ra,4(sp)
  809b44:	dc000017 	ldw	r16,0(sp)
  809b48:	dec00204 	addi	sp,sp,8
  809b4c:	f800283a 	ret
  809b50:	80800404 	addi	r2,r16,16
  809b54:	003fee06 	br	809b10 <__alt_mem_onchip_mem+0xff801b10>
  809b58:	80800204 	addi	r2,r16,8
  809b5c:	003fec06 	br	809b10 <__alt_mem_onchip_mem+0xff801b10>
  809b60:	0005883a 	mov	r2,zero
  809b64:	003fee06 	br	809b20 <__alt_mem_onchip_mem+0xff801b20>

00809b68 <__fputwc>:
  809b68:	defff804 	addi	sp,sp,-32
  809b6c:	dcc00415 	stw	r19,16(sp)
  809b70:	dc800315 	stw	r18,12(sp)
  809b74:	dc000115 	stw	r16,4(sp)
  809b78:	dfc00715 	stw	ra,28(sp)
  809b7c:	dd400615 	stw	r21,24(sp)
  809b80:	dd000515 	stw	r20,20(sp)
  809b84:	dc400215 	stw	r17,8(sp)
  809b88:	2027883a 	mov	r19,r4
  809b8c:	2825883a 	mov	r18,r5
  809b90:	3021883a 	mov	r16,r6
  809b94:	0806f380 	call	806f38 <__locale_mb_cur_max>
  809b98:	00c00044 	movi	r3,1
  809b9c:	10c03e26 	beq	r2,r3,809c98 <__fputwc+0x130>
  809ba0:	81c01704 	addi	r7,r16,92
  809ba4:	900d883a 	mov	r6,r18
  809ba8:	d80b883a 	mov	r5,sp
  809bac:	9809883a 	mov	r4,r19
  809bb0:	080aa440 	call	80aa44 <_wcrtomb_r>
  809bb4:	1029883a 	mov	r20,r2
  809bb8:	00bfffc4 	movi	r2,-1
  809bbc:	a0802026 	beq	r20,r2,809c40 <__fputwc+0xd8>
  809bc0:	d9400003 	ldbu	r5,0(sp)
  809bc4:	a0001c26 	beq	r20,zero,809c38 <__fputwc+0xd0>
  809bc8:	0023883a 	mov	r17,zero
  809bcc:	05400284 	movi	r21,10
  809bd0:	00000906 	br	809bf8 <__fputwc+0x90>
  809bd4:	80800017 	ldw	r2,0(r16)
  809bd8:	11400005 	stb	r5,0(r2)
  809bdc:	80c00017 	ldw	r3,0(r16)
  809be0:	18c00044 	addi	r3,r3,1
  809be4:	80c00015 	stw	r3,0(r16)
  809be8:	8c400044 	addi	r17,r17,1
  809bec:	dc45883a 	add	r2,sp,r17
  809bf0:	8d00112e 	bgeu	r17,r20,809c38 <__fputwc+0xd0>
  809bf4:	11400003 	ldbu	r5,0(r2)
  809bf8:	80c00217 	ldw	r3,8(r16)
  809bfc:	18ffffc4 	addi	r3,r3,-1
  809c00:	80c00215 	stw	r3,8(r16)
  809c04:	183ff30e 	bge	r3,zero,809bd4 <__alt_mem_onchip_mem+0xff801bd4>
  809c08:	80800617 	ldw	r2,24(r16)
  809c0c:	18801916 	blt	r3,r2,809c74 <__fputwc+0x10c>
  809c10:	80800017 	ldw	r2,0(r16)
  809c14:	11400005 	stb	r5,0(r2)
  809c18:	80800017 	ldw	r2,0(r16)
  809c1c:	10c00003 	ldbu	r3,0(r2)
  809c20:	10800044 	addi	r2,r2,1
  809c24:	1d402326 	beq	r3,r21,809cb4 <__fputwc+0x14c>
  809c28:	80800015 	stw	r2,0(r16)
  809c2c:	8c400044 	addi	r17,r17,1
  809c30:	dc45883a 	add	r2,sp,r17
  809c34:	8d3fef36 	bltu	r17,r20,809bf4 <__alt_mem_onchip_mem+0xff801bf4>
  809c38:	9005883a 	mov	r2,r18
  809c3c:	00000406 	br	809c50 <__fputwc+0xe8>
  809c40:	80c0030b 	ldhu	r3,12(r16)
  809c44:	a005883a 	mov	r2,r20
  809c48:	18c01014 	ori	r3,r3,64
  809c4c:	80c0030d 	sth	r3,12(r16)
  809c50:	dfc00717 	ldw	ra,28(sp)
  809c54:	dd400617 	ldw	r21,24(sp)
  809c58:	dd000517 	ldw	r20,20(sp)
  809c5c:	dcc00417 	ldw	r19,16(sp)
  809c60:	dc800317 	ldw	r18,12(sp)
  809c64:	dc400217 	ldw	r17,8(sp)
  809c68:	dc000117 	ldw	r16,4(sp)
  809c6c:	dec00804 	addi	sp,sp,32
  809c70:	f800283a 	ret
  809c74:	800d883a 	mov	r6,r16
  809c78:	29403fcc 	andi	r5,r5,255
  809c7c:	9809883a 	mov	r4,r19
  809c80:	080a8ec0 	call	80a8ec <__swbuf_r>
  809c84:	10bfffe0 	cmpeqi	r2,r2,-1
  809c88:	10803fcc 	andi	r2,r2,255
  809c8c:	103fd626 	beq	r2,zero,809be8 <__alt_mem_onchip_mem+0xff801be8>
  809c90:	00bfffc4 	movi	r2,-1
  809c94:	003fee06 	br	809c50 <__alt_mem_onchip_mem+0xff801c50>
  809c98:	90ffffc4 	addi	r3,r18,-1
  809c9c:	01003f84 	movi	r4,254
  809ca0:	20ffbf36 	bltu	r4,r3,809ba0 <__alt_mem_onchip_mem+0xff801ba0>
  809ca4:	900b883a 	mov	r5,r18
  809ca8:	dc800005 	stb	r18,0(sp)
  809cac:	1029883a 	mov	r20,r2
  809cb0:	003fc506 	br	809bc8 <__alt_mem_onchip_mem+0xff801bc8>
  809cb4:	800d883a 	mov	r6,r16
  809cb8:	a80b883a 	mov	r5,r21
  809cbc:	9809883a 	mov	r4,r19
  809cc0:	080a8ec0 	call	80a8ec <__swbuf_r>
  809cc4:	10bfffe0 	cmpeqi	r2,r2,-1
  809cc8:	003fef06 	br	809c88 <__alt_mem_onchip_mem+0xff801c88>

00809ccc <_fputwc_r>:
  809ccc:	3080030b 	ldhu	r2,12(r6)
  809cd0:	10c8000c 	andi	r3,r2,8192
  809cd4:	1800051e 	bne	r3,zero,809cec <_fputwc_r+0x20>
  809cd8:	30c01917 	ldw	r3,100(r6)
  809cdc:	10880014 	ori	r2,r2,8192
  809ce0:	3080030d 	sth	r2,12(r6)
  809ce4:	18880014 	ori	r2,r3,8192
  809ce8:	30801915 	stw	r2,100(r6)
  809cec:	0809b681 	jmpi	809b68 <__fputwc>

00809cf0 <fputwc>:
  809cf0:	00802074 	movhi	r2,129
  809cf4:	defffc04 	addi	sp,sp,-16
  809cf8:	10909704 	addi	r2,r2,16988
  809cfc:	dc000115 	stw	r16,4(sp)
  809d00:	14000017 	ldw	r16,0(r2)
  809d04:	dc400215 	stw	r17,8(sp)
  809d08:	dfc00315 	stw	ra,12(sp)
  809d0c:	2023883a 	mov	r17,r4
  809d10:	80000226 	beq	r16,zero,809d1c <fputwc+0x2c>
  809d14:	80800e17 	ldw	r2,56(r16)
  809d18:	10001026 	beq	r2,zero,809d5c <fputwc+0x6c>
  809d1c:	2880030b 	ldhu	r2,12(r5)
  809d20:	10c8000c 	andi	r3,r2,8192
  809d24:	1800051e 	bne	r3,zero,809d3c <fputwc+0x4c>
  809d28:	28c01917 	ldw	r3,100(r5)
  809d2c:	10880014 	ori	r2,r2,8192
  809d30:	2880030d 	sth	r2,12(r5)
  809d34:	18880014 	ori	r2,r3,8192
  809d38:	28801915 	stw	r2,100(r5)
  809d3c:	280d883a 	mov	r6,r5
  809d40:	8009883a 	mov	r4,r16
  809d44:	880b883a 	mov	r5,r17
  809d48:	dfc00317 	ldw	ra,12(sp)
  809d4c:	dc400217 	ldw	r17,8(sp)
  809d50:	dc000117 	ldw	r16,4(sp)
  809d54:	dec00404 	addi	sp,sp,16
  809d58:	0809b681 	jmpi	809b68 <__fputwc>
  809d5c:	8009883a 	mov	r4,r16
  809d60:	d9400015 	stw	r5,0(sp)
  809d64:	08010a00 	call	8010a0 <__sinit>
  809d68:	d9400017 	ldw	r5,0(sp)
  809d6c:	003feb06 	br	809d1c <__alt_mem_onchip_mem+0xff801d1c>

00809d70 <__sfvwrite_r>:
  809d70:	30800217 	ldw	r2,8(r6)
  809d74:	10006726 	beq	r2,zero,809f14 <__sfvwrite_r+0x1a4>
  809d78:	28c0030b 	ldhu	r3,12(r5)
  809d7c:	defff404 	addi	sp,sp,-48
  809d80:	dd400715 	stw	r21,28(sp)
  809d84:	dd000615 	stw	r20,24(sp)
  809d88:	dc000215 	stw	r16,8(sp)
  809d8c:	dfc00b15 	stw	ra,44(sp)
  809d90:	df000a15 	stw	fp,40(sp)
  809d94:	ddc00915 	stw	r23,36(sp)
  809d98:	dd800815 	stw	r22,32(sp)
  809d9c:	dcc00515 	stw	r19,20(sp)
  809da0:	dc800415 	stw	r18,16(sp)
  809da4:	dc400315 	stw	r17,12(sp)
  809da8:	1880020c 	andi	r2,r3,8
  809dac:	2821883a 	mov	r16,r5
  809db0:	202b883a 	mov	r21,r4
  809db4:	3029883a 	mov	r20,r6
  809db8:	10002726 	beq	r2,zero,809e58 <__sfvwrite_r+0xe8>
  809dbc:	28800417 	ldw	r2,16(r5)
  809dc0:	10002526 	beq	r2,zero,809e58 <__sfvwrite_r+0xe8>
  809dc4:	1880008c 	andi	r2,r3,2
  809dc8:	a4400017 	ldw	r17,0(r20)
  809dcc:	10002a26 	beq	r2,zero,809e78 <__sfvwrite_r+0x108>
  809dd0:	05a00034 	movhi	r22,32768
  809dd4:	0027883a 	mov	r19,zero
  809dd8:	0025883a 	mov	r18,zero
  809ddc:	b5bf0004 	addi	r22,r22,-1024
  809de0:	980d883a 	mov	r6,r19
  809de4:	a809883a 	mov	r4,r21
  809de8:	90004626 	beq	r18,zero,809f04 <__sfvwrite_r+0x194>
  809dec:	900f883a 	mov	r7,r18
  809df0:	b480022e 	bgeu	r22,r18,809dfc <__sfvwrite_r+0x8c>
  809df4:	01e00034 	movhi	r7,32768
  809df8:	39ff0004 	addi	r7,r7,-1024
  809dfc:	80800917 	ldw	r2,36(r16)
  809e00:	81400717 	ldw	r5,28(r16)
  809e04:	103ee83a 	callr	r2
  809e08:	0080570e 	bge	zero,r2,809f68 <__sfvwrite_r+0x1f8>
  809e0c:	a0c00217 	ldw	r3,8(r20)
  809e10:	98a7883a 	add	r19,r19,r2
  809e14:	90a5c83a 	sub	r18,r18,r2
  809e18:	1885c83a 	sub	r2,r3,r2
  809e1c:	a0800215 	stw	r2,8(r20)
  809e20:	103fef1e 	bne	r2,zero,809de0 <__alt_mem_onchip_mem+0xff801de0>
  809e24:	0005883a 	mov	r2,zero
  809e28:	dfc00b17 	ldw	ra,44(sp)
  809e2c:	df000a17 	ldw	fp,40(sp)
  809e30:	ddc00917 	ldw	r23,36(sp)
  809e34:	dd800817 	ldw	r22,32(sp)
  809e38:	dd400717 	ldw	r21,28(sp)
  809e3c:	dd000617 	ldw	r20,24(sp)
  809e40:	dcc00517 	ldw	r19,20(sp)
  809e44:	dc800417 	ldw	r18,16(sp)
  809e48:	dc400317 	ldw	r17,12(sp)
  809e4c:	dc000217 	ldw	r16,8(sp)
  809e50:	dec00c04 	addi	sp,sp,48
  809e54:	f800283a 	ret
  809e58:	800b883a 	mov	r5,r16
  809e5c:	a809883a 	mov	r4,r21
  809e60:	0804ba00 	call	804ba0 <__swsetup_r>
  809e64:	1000eb1e 	bne	r2,zero,80a214 <__sfvwrite_r+0x4a4>
  809e68:	80c0030b 	ldhu	r3,12(r16)
  809e6c:	a4400017 	ldw	r17,0(r20)
  809e70:	1880008c 	andi	r2,r3,2
  809e74:	103fd61e 	bne	r2,zero,809dd0 <__alt_mem_onchip_mem+0xff801dd0>
  809e78:	1880004c 	andi	r2,r3,1
  809e7c:	10003f1e 	bne	r2,zero,809f7c <__sfvwrite_r+0x20c>
  809e80:	0039883a 	mov	fp,zero
  809e84:	0025883a 	mov	r18,zero
  809e88:	90001a26 	beq	r18,zero,809ef4 <__sfvwrite_r+0x184>
  809e8c:	1880800c 	andi	r2,r3,512
  809e90:	84c00217 	ldw	r19,8(r16)
  809e94:	10002126 	beq	r2,zero,809f1c <__sfvwrite_r+0x1ac>
  809e98:	982f883a 	mov	r23,r19
  809e9c:	94c09336 	bltu	r18,r19,80a0ec <__sfvwrite_r+0x37c>
  809ea0:	1881200c 	andi	r2,r3,1152
  809ea4:	10009e1e 	bne	r2,zero,80a120 <__sfvwrite_r+0x3b0>
  809ea8:	81000017 	ldw	r4,0(r16)
  809eac:	b80d883a 	mov	r6,r23
  809eb0:	e00b883a 	mov	r5,fp
  809eb4:	080a22c0 	call	80a22c <memmove>
  809eb8:	80c00217 	ldw	r3,8(r16)
  809ebc:	81000017 	ldw	r4,0(r16)
  809ec0:	9005883a 	mov	r2,r18
  809ec4:	1ce7c83a 	sub	r19,r3,r19
  809ec8:	25cf883a 	add	r7,r4,r23
  809ecc:	84c00215 	stw	r19,8(r16)
  809ed0:	81c00015 	stw	r7,0(r16)
  809ed4:	a0c00217 	ldw	r3,8(r20)
  809ed8:	e0b9883a 	add	fp,fp,r2
  809edc:	90a5c83a 	sub	r18,r18,r2
  809ee0:	18a7c83a 	sub	r19,r3,r2
  809ee4:	a4c00215 	stw	r19,8(r20)
  809ee8:	983fce26 	beq	r19,zero,809e24 <__alt_mem_onchip_mem+0xff801e24>
  809eec:	80c0030b 	ldhu	r3,12(r16)
  809ef0:	903fe61e 	bne	r18,zero,809e8c <__alt_mem_onchip_mem+0xff801e8c>
  809ef4:	8f000017 	ldw	fp,0(r17)
  809ef8:	8c800117 	ldw	r18,4(r17)
  809efc:	8c400204 	addi	r17,r17,8
  809f00:	003fe106 	br	809e88 <__alt_mem_onchip_mem+0xff801e88>
  809f04:	8cc00017 	ldw	r19,0(r17)
  809f08:	8c800117 	ldw	r18,4(r17)
  809f0c:	8c400204 	addi	r17,r17,8
  809f10:	003fb306 	br	809de0 <__alt_mem_onchip_mem+0xff801de0>
  809f14:	0005883a 	mov	r2,zero
  809f18:	f800283a 	ret
  809f1c:	81000017 	ldw	r4,0(r16)
  809f20:	80800417 	ldw	r2,16(r16)
  809f24:	11005736 	bltu	r2,r4,80a084 <__sfvwrite_r+0x314>
  809f28:	85c00517 	ldw	r23,20(r16)
  809f2c:	95c05536 	bltu	r18,r23,80a084 <__sfvwrite_r+0x314>
  809f30:	00a00034 	movhi	r2,32768
  809f34:	10bfffc4 	addi	r2,r2,-1
  809f38:	9009883a 	mov	r4,r18
  809f3c:	1480012e 	bgeu	r2,r18,809f44 <__sfvwrite_r+0x1d4>
  809f40:	1009883a 	mov	r4,r2
  809f44:	b80b883a 	mov	r5,r23
  809f48:	0800aa40 	call	800aa4 <__divsi3>
  809f4c:	15cf383a 	mul	r7,r2,r23
  809f50:	81400717 	ldw	r5,28(r16)
  809f54:	80800917 	ldw	r2,36(r16)
  809f58:	e00d883a 	mov	r6,fp
  809f5c:	a809883a 	mov	r4,r21
  809f60:	103ee83a 	callr	r2
  809f64:	00bfdb16 	blt	zero,r2,809ed4 <__alt_mem_onchip_mem+0xff801ed4>
  809f68:	8080030b 	ldhu	r2,12(r16)
  809f6c:	10801014 	ori	r2,r2,64
  809f70:	8080030d 	sth	r2,12(r16)
  809f74:	00bfffc4 	movi	r2,-1
  809f78:	003fab06 	br	809e28 <__alt_mem_onchip_mem+0xff801e28>
  809f7c:	0027883a 	mov	r19,zero
  809f80:	0011883a 	mov	r8,zero
  809f84:	0039883a 	mov	fp,zero
  809f88:	0025883a 	mov	r18,zero
  809f8c:	90001f26 	beq	r18,zero,80a00c <__sfvwrite_r+0x29c>
  809f90:	40005a26 	beq	r8,zero,80a0fc <__sfvwrite_r+0x38c>
  809f94:	982d883a 	mov	r22,r19
  809f98:	94c0012e 	bgeu	r18,r19,809fa0 <__sfvwrite_r+0x230>
  809f9c:	902d883a 	mov	r22,r18
  809fa0:	81000017 	ldw	r4,0(r16)
  809fa4:	80800417 	ldw	r2,16(r16)
  809fa8:	b02f883a 	mov	r23,r22
  809fac:	81c00517 	ldw	r7,20(r16)
  809fb0:	1100032e 	bgeu	r2,r4,809fc0 <__sfvwrite_r+0x250>
  809fb4:	80c00217 	ldw	r3,8(r16)
  809fb8:	38c7883a 	add	r3,r7,r3
  809fbc:	1d801816 	blt	r3,r22,80a020 <__sfvwrite_r+0x2b0>
  809fc0:	b1c03e16 	blt	r22,r7,80a0bc <__sfvwrite_r+0x34c>
  809fc4:	80800917 	ldw	r2,36(r16)
  809fc8:	81400717 	ldw	r5,28(r16)
  809fcc:	e00d883a 	mov	r6,fp
  809fd0:	da000115 	stw	r8,4(sp)
  809fd4:	a809883a 	mov	r4,r21
  809fd8:	103ee83a 	callr	r2
  809fdc:	102f883a 	mov	r23,r2
  809fe0:	da000117 	ldw	r8,4(sp)
  809fe4:	00bfe00e 	bge	zero,r2,809f68 <__alt_mem_onchip_mem+0xff801f68>
  809fe8:	9de7c83a 	sub	r19,r19,r23
  809fec:	98001f26 	beq	r19,zero,80a06c <__sfvwrite_r+0x2fc>
  809ff0:	a0800217 	ldw	r2,8(r20)
  809ff4:	e5f9883a 	add	fp,fp,r23
  809ff8:	95e5c83a 	sub	r18,r18,r23
  809ffc:	15efc83a 	sub	r23,r2,r23
  80a000:	a5c00215 	stw	r23,8(r20)
  80a004:	b83f8726 	beq	r23,zero,809e24 <__alt_mem_onchip_mem+0xff801e24>
  80a008:	903fe11e 	bne	r18,zero,809f90 <__alt_mem_onchip_mem+0xff801f90>
  80a00c:	8f000017 	ldw	fp,0(r17)
  80a010:	8c800117 	ldw	r18,4(r17)
  80a014:	0011883a 	mov	r8,zero
  80a018:	8c400204 	addi	r17,r17,8
  80a01c:	003fdb06 	br	809f8c <__alt_mem_onchip_mem+0xff801f8c>
  80a020:	180d883a 	mov	r6,r3
  80a024:	e00b883a 	mov	r5,fp
  80a028:	da000115 	stw	r8,4(sp)
  80a02c:	d8c00015 	stw	r3,0(sp)
  80a030:	080a22c0 	call	80a22c <memmove>
  80a034:	d8c00017 	ldw	r3,0(sp)
  80a038:	80800017 	ldw	r2,0(r16)
  80a03c:	800b883a 	mov	r5,r16
  80a040:	a809883a 	mov	r4,r21
  80a044:	10c5883a 	add	r2,r2,r3
  80a048:	80800015 	stw	r2,0(r16)
  80a04c:	d8c00015 	stw	r3,0(sp)
  80a050:	08068f00 	call	8068f0 <_fflush_r>
  80a054:	d8c00017 	ldw	r3,0(sp)
  80a058:	da000117 	ldw	r8,4(sp)
  80a05c:	103fc21e 	bne	r2,zero,809f68 <__alt_mem_onchip_mem+0xff801f68>
  80a060:	182f883a 	mov	r23,r3
  80a064:	9de7c83a 	sub	r19,r19,r23
  80a068:	983fe11e 	bne	r19,zero,809ff0 <__alt_mem_onchip_mem+0xff801ff0>
  80a06c:	800b883a 	mov	r5,r16
  80a070:	a809883a 	mov	r4,r21
  80a074:	08068f00 	call	8068f0 <_fflush_r>
  80a078:	103fbb1e 	bne	r2,zero,809f68 <__alt_mem_onchip_mem+0xff801f68>
  80a07c:	0011883a 	mov	r8,zero
  80a080:	003fdb06 	br	809ff0 <__alt_mem_onchip_mem+0xff801ff0>
  80a084:	94c0012e 	bgeu	r18,r19,80a08c <__sfvwrite_r+0x31c>
  80a088:	9027883a 	mov	r19,r18
  80a08c:	980d883a 	mov	r6,r19
  80a090:	e00b883a 	mov	r5,fp
  80a094:	080a22c0 	call	80a22c <memmove>
  80a098:	80800217 	ldw	r2,8(r16)
  80a09c:	80c00017 	ldw	r3,0(r16)
  80a0a0:	14c5c83a 	sub	r2,r2,r19
  80a0a4:	1cc7883a 	add	r3,r3,r19
  80a0a8:	80800215 	stw	r2,8(r16)
  80a0ac:	80c00015 	stw	r3,0(r16)
  80a0b0:	10004326 	beq	r2,zero,80a1c0 <__sfvwrite_r+0x450>
  80a0b4:	9805883a 	mov	r2,r19
  80a0b8:	003f8606 	br	809ed4 <__alt_mem_onchip_mem+0xff801ed4>
  80a0bc:	b00d883a 	mov	r6,r22
  80a0c0:	e00b883a 	mov	r5,fp
  80a0c4:	da000115 	stw	r8,4(sp)
  80a0c8:	080a22c0 	call	80a22c <memmove>
  80a0cc:	80800217 	ldw	r2,8(r16)
  80a0d0:	80c00017 	ldw	r3,0(r16)
  80a0d4:	da000117 	ldw	r8,4(sp)
  80a0d8:	1585c83a 	sub	r2,r2,r22
  80a0dc:	1dad883a 	add	r22,r3,r22
  80a0e0:	80800215 	stw	r2,8(r16)
  80a0e4:	85800015 	stw	r22,0(r16)
  80a0e8:	003fbf06 	br	809fe8 <__alt_mem_onchip_mem+0xff801fe8>
  80a0ec:	81000017 	ldw	r4,0(r16)
  80a0f0:	9027883a 	mov	r19,r18
  80a0f4:	902f883a 	mov	r23,r18
  80a0f8:	003f6c06 	br	809eac <__alt_mem_onchip_mem+0xff801eac>
  80a0fc:	900d883a 	mov	r6,r18
  80a100:	01400284 	movi	r5,10
  80a104:	e009883a 	mov	r4,fp
  80a108:	0806fec0 	call	806fec <memchr>
  80a10c:	10003e26 	beq	r2,zero,80a208 <__sfvwrite_r+0x498>
  80a110:	10800044 	addi	r2,r2,1
  80a114:	1727c83a 	sub	r19,r2,fp
  80a118:	02000044 	movi	r8,1
  80a11c:	003f9d06 	br	809f94 <__alt_mem_onchip_mem+0xff801f94>
  80a120:	80800517 	ldw	r2,20(r16)
  80a124:	81400417 	ldw	r5,16(r16)
  80a128:	81c00017 	ldw	r7,0(r16)
  80a12c:	10a7883a 	add	r19,r2,r2
  80a130:	9885883a 	add	r2,r19,r2
  80a134:	1026d7fa 	srli	r19,r2,31
  80a138:	396dc83a 	sub	r22,r7,r5
  80a13c:	b1000044 	addi	r4,r22,1
  80a140:	9885883a 	add	r2,r19,r2
  80a144:	1027d07a 	srai	r19,r2,1
  80a148:	2485883a 	add	r2,r4,r18
  80a14c:	980d883a 	mov	r6,r19
  80a150:	9880022e 	bgeu	r19,r2,80a15c <__sfvwrite_r+0x3ec>
  80a154:	1027883a 	mov	r19,r2
  80a158:	100d883a 	mov	r6,r2
  80a15c:	18c1000c 	andi	r3,r3,1024
  80a160:	18001c26 	beq	r3,zero,80a1d4 <__sfvwrite_r+0x464>
  80a164:	300b883a 	mov	r5,r6
  80a168:	a809883a 	mov	r4,r21
  80a16c:	0801a680 	call	801a68 <_malloc_r>
  80a170:	102f883a 	mov	r23,r2
  80a174:	10002926 	beq	r2,zero,80a21c <__sfvwrite_r+0x4ac>
  80a178:	81400417 	ldw	r5,16(r16)
  80a17c:	b00d883a 	mov	r6,r22
  80a180:	1009883a 	mov	r4,r2
  80a184:	08070d00 	call	8070d0 <memcpy>
  80a188:	8080030b 	ldhu	r2,12(r16)
  80a18c:	00fedfc4 	movi	r3,-1153
  80a190:	10c4703a 	and	r2,r2,r3
  80a194:	10802014 	ori	r2,r2,128
  80a198:	8080030d 	sth	r2,12(r16)
  80a19c:	bd89883a 	add	r4,r23,r22
  80a1a0:	9d8fc83a 	sub	r7,r19,r22
  80a1a4:	85c00415 	stw	r23,16(r16)
  80a1a8:	84c00515 	stw	r19,20(r16)
  80a1ac:	81000015 	stw	r4,0(r16)
  80a1b0:	9027883a 	mov	r19,r18
  80a1b4:	81c00215 	stw	r7,8(r16)
  80a1b8:	902f883a 	mov	r23,r18
  80a1bc:	003f3b06 	br	809eac <__alt_mem_onchip_mem+0xff801eac>
  80a1c0:	800b883a 	mov	r5,r16
  80a1c4:	a809883a 	mov	r4,r21
  80a1c8:	08068f00 	call	8068f0 <_fflush_r>
  80a1cc:	103fb926 	beq	r2,zero,80a0b4 <__alt_mem_onchip_mem+0xff8020b4>
  80a1d0:	003f6506 	br	809f68 <__alt_mem_onchip_mem+0xff801f68>
  80a1d4:	a809883a 	mov	r4,r21
  80a1d8:	080a3880 	call	80a388 <_realloc_r>
  80a1dc:	102f883a 	mov	r23,r2
  80a1e0:	103fee1e 	bne	r2,zero,80a19c <__alt_mem_onchip_mem+0xff80219c>
  80a1e4:	81400417 	ldw	r5,16(r16)
  80a1e8:	a809883a 	mov	r4,r21
  80a1ec:	0806b4c0 	call	806b4c <_free_r>
  80a1f0:	8080030b 	ldhu	r2,12(r16)
  80a1f4:	00ffdfc4 	movi	r3,-129
  80a1f8:	1884703a 	and	r2,r3,r2
  80a1fc:	00c00304 	movi	r3,12
  80a200:	a8c00015 	stw	r3,0(r21)
  80a204:	003f5906 	br	809f6c <__alt_mem_onchip_mem+0xff801f6c>
  80a208:	94c00044 	addi	r19,r18,1
  80a20c:	02000044 	movi	r8,1
  80a210:	003f6006 	br	809f94 <__alt_mem_onchip_mem+0xff801f94>
  80a214:	00bfffc4 	movi	r2,-1
  80a218:	003f0306 	br	809e28 <__alt_mem_onchip_mem+0xff801e28>
  80a21c:	00800304 	movi	r2,12
  80a220:	a8800015 	stw	r2,0(r21)
  80a224:	8080030b 	ldhu	r2,12(r16)
  80a228:	003f5006 	br	809f6c <__alt_mem_onchip_mem+0xff801f6c>

0080a22c <memmove>:
  80a22c:	2005883a 	mov	r2,r4
  80a230:	29000b2e 	bgeu	r5,r4,80a260 <memmove+0x34>
  80a234:	298f883a 	add	r7,r5,r6
  80a238:	21c0092e 	bgeu	r4,r7,80a260 <memmove+0x34>
  80a23c:	2187883a 	add	r3,r4,r6
  80a240:	198bc83a 	sub	r5,r3,r6
  80a244:	30004826 	beq	r6,zero,80a368 <memmove+0x13c>
  80a248:	39ffffc4 	addi	r7,r7,-1
  80a24c:	39000003 	ldbu	r4,0(r7)
  80a250:	18ffffc4 	addi	r3,r3,-1
  80a254:	19000005 	stb	r4,0(r3)
  80a258:	28fffb1e 	bne	r5,r3,80a248 <__alt_mem_onchip_mem+0xff802248>
  80a25c:	f800283a 	ret
  80a260:	00c003c4 	movi	r3,15
  80a264:	1980412e 	bgeu	r3,r6,80a36c <memmove+0x140>
  80a268:	2886b03a 	or	r3,r5,r2
  80a26c:	18c000cc 	andi	r3,r3,3
  80a270:	1800401e 	bne	r3,zero,80a374 <memmove+0x148>
  80a274:	33fffc04 	addi	r15,r6,-16
  80a278:	781ed13a 	srli	r15,r15,4
  80a27c:	28c00104 	addi	r3,r5,4
  80a280:	13400104 	addi	r13,r2,4
  80a284:	781c913a 	slli	r14,r15,4
  80a288:	2b000204 	addi	r12,r5,8
  80a28c:	12c00204 	addi	r11,r2,8
  80a290:	73800504 	addi	r14,r14,20
  80a294:	2a800304 	addi	r10,r5,12
  80a298:	12400304 	addi	r9,r2,12
  80a29c:	2b9d883a 	add	r14,r5,r14
  80a2a0:	2811883a 	mov	r8,r5
  80a2a4:	100f883a 	mov	r7,r2
  80a2a8:	41000017 	ldw	r4,0(r8)
  80a2ac:	39c00404 	addi	r7,r7,16
  80a2b0:	18c00404 	addi	r3,r3,16
  80a2b4:	393ffc15 	stw	r4,-16(r7)
  80a2b8:	193ffc17 	ldw	r4,-16(r3)
  80a2bc:	6b400404 	addi	r13,r13,16
  80a2c0:	5ac00404 	addi	r11,r11,16
  80a2c4:	693ffc15 	stw	r4,-16(r13)
  80a2c8:	61000017 	ldw	r4,0(r12)
  80a2cc:	4a400404 	addi	r9,r9,16
  80a2d0:	42000404 	addi	r8,r8,16
  80a2d4:	593ffc15 	stw	r4,-16(r11)
  80a2d8:	51000017 	ldw	r4,0(r10)
  80a2dc:	63000404 	addi	r12,r12,16
  80a2e0:	52800404 	addi	r10,r10,16
  80a2e4:	493ffc15 	stw	r4,-16(r9)
  80a2e8:	1bbfef1e 	bne	r3,r14,80a2a8 <__alt_mem_onchip_mem+0xff8022a8>
  80a2ec:	79000044 	addi	r4,r15,1
  80a2f0:	2008913a 	slli	r4,r4,4
  80a2f4:	328003cc 	andi	r10,r6,15
  80a2f8:	02c000c4 	movi	r11,3
  80a2fc:	1107883a 	add	r3,r2,r4
  80a300:	290b883a 	add	r5,r5,r4
  80a304:	5a801e2e 	bgeu	r11,r10,80a380 <memmove+0x154>
  80a308:	1813883a 	mov	r9,r3
  80a30c:	2811883a 	mov	r8,r5
  80a310:	500f883a 	mov	r7,r10
  80a314:	41000017 	ldw	r4,0(r8)
  80a318:	4a400104 	addi	r9,r9,4
  80a31c:	39ffff04 	addi	r7,r7,-4
  80a320:	493fff15 	stw	r4,-4(r9)
  80a324:	42000104 	addi	r8,r8,4
  80a328:	59fffa36 	bltu	r11,r7,80a314 <__alt_mem_onchip_mem+0xff802314>
  80a32c:	513fff04 	addi	r4,r10,-4
  80a330:	2008d0ba 	srli	r4,r4,2
  80a334:	318000cc 	andi	r6,r6,3
  80a338:	21000044 	addi	r4,r4,1
  80a33c:	2109883a 	add	r4,r4,r4
  80a340:	2109883a 	add	r4,r4,r4
  80a344:	1907883a 	add	r3,r3,r4
  80a348:	290b883a 	add	r5,r5,r4
  80a34c:	30000b26 	beq	r6,zero,80a37c <memmove+0x150>
  80a350:	198d883a 	add	r6,r3,r6
  80a354:	29c00003 	ldbu	r7,0(r5)
  80a358:	18c00044 	addi	r3,r3,1
  80a35c:	29400044 	addi	r5,r5,1
  80a360:	19ffffc5 	stb	r7,-1(r3)
  80a364:	19bffb1e 	bne	r3,r6,80a354 <__alt_mem_onchip_mem+0xff802354>
  80a368:	f800283a 	ret
  80a36c:	1007883a 	mov	r3,r2
  80a370:	003ff606 	br	80a34c <__alt_mem_onchip_mem+0xff80234c>
  80a374:	1007883a 	mov	r3,r2
  80a378:	003ff506 	br	80a350 <__alt_mem_onchip_mem+0xff802350>
  80a37c:	f800283a 	ret
  80a380:	500d883a 	mov	r6,r10
  80a384:	003ff106 	br	80a34c <__alt_mem_onchip_mem+0xff80234c>

0080a388 <_realloc_r>:
  80a388:	defff604 	addi	sp,sp,-40
  80a38c:	dc800215 	stw	r18,8(sp)
  80a390:	dfc00915 	stw	ra,36(sp)
  80a394:	df000815 	stw	fp,32(sp)
  80a398:	ddc00715 	stw	r23,28(sp)
  80a39c:	dd800615 	stw	r22,24(sp)
  80a3a0:	dd400515 	stw	r21,20(sp)
  80a3a4:	dd000415 	stw	r20,16(sp)
  80a3a8:	dcc00315 	stw	r19,12(sp)
  80a3ac:	dc400115 	stw	r17,4(sp)
  80a3b0:	dc000015 	stw	r16,0(sp)
  80a3b4:	3025883a 	mov	r18,r6
  80a3b8:	2800b726 	beq	r5,zero,80a698 <_realloc_r+0x310>
  80a3bc:	282b883a 	mov	r21,r5
  80a3c0:	2029883a 	mov	r20,r4
  80a3c4:	080e56c0 	call	80e56c <__malloc_lock>
  80a3c8:	a8bfff17 	ldw	r2,-4(r21)
  80a3cc:	043fff04 	movi	r16,-4
  80a3d0:	90c002c4 	addi	r3,r18,11
  80a3d4:	01000584 	movi	r4,22
  80a3d8:	acfffe04 	addi	r19,r21,-8
  80a3dc:	1420703a 	and	r16,r2,r16
  80a3e0:	20c0332e 	bgeu	r4,r3,80a4b0 <_realloc_r+0x128>
  80a3e4:	047ffe04 	movi	r17,-8
  80a3e8:	1c62703a 	and	r17,r3,r17
  80a3ec:	8807883a 	mov	r3,r17
  80a3f0:	88005816 	blt	r17,zero,80a554 <_realloc_r+0x1cc>
  80a3f4:	8c805736 	bltu	r17,r18,80a554 <_realloc_r+0x1cc>
  80a3f8:	80c0300e 	bge	r16,r3,80a4bc <_realloc_r+0x134>
  80a3fc:	07002074 	movhi	fp,129
  80a400:	e70a7504 	addi	fp,fp,10708
  80a404:	e1c00217 	ldw	r7,8(fp)
  80a408:	9c09883a 	add	r4,r19,r16
  80a40c:	22000117 	ldw	r8,4(r4)
  80a410:	21c06326 	beq	r4,r7,80a5a0 <_realloc_r+0x218>
  80a414:	017fff84 	movi	r5,-2
  80a418:	414a703a 	and	r5,r8,r5
  80a41c:	214b883a 	add	r5,r4,r5
  80a420:	29800117 	ldw	r6,4(r5)
  80a424:	3180004c 	andi	r6,r6,1
  80a428:	30003f26 	beq	r6,zero,80a528 <_realloc_r+0x1a0>
  80a42c:	1080004c 	andi	r2,r2,1
  80a430:	10008326 	beq	r2,zero,80a640 <_realloc_r+0x2b8>
  80a434:	900b883a 	mov	r5,r18
  80a438:	a009883a 	mov	r4,r20
  80a43c:	0801a680 	call	801a68 <_malloc_r>
  80a440:	1025883a 	mov	r18,r2
  80a444:	10011e26 	beq	r2,zero,80a8c0 <_realloc_r+0x538>
  80a448:	a93fff17 	ldw	r4,-4(r21)
  80a44c:	10fffe04 	addi	r3,r2,-8
  80a450:	00bfff84 	movi	r2,-2
  80a454:	2084703a 	and	r2,r4,r2
  80a458:	9885883a 	add	r2,r19,r2
  80a45c:	1880ee26 	beq	r3,r2,80a818 <_realloc_r+0x490>
  80a460:	81bfff04 	addi	r6,r16,-4
  80a464:	00800904 	movi	r2,36
  80a468:	1180b836 	bltu	r2,r6,80a74c <_realloc_r+0x3c4>
  80a46c:	00c004c4 	movi	r3,19
  80a470:	19809636 	bltu	r3,r6,80a6cc <_realloc_r+0x344>
  80a474:	9005883a 	mov	r2,r18
  80a478:	a807883a 	mov	r3,r21
  80a47c:	19000017 	ldw	r4,0(r3)
  80a480:	11000015 	stw	r4,0(r2)
  80a484:	19000117 	ldw	r4,4(r3)
  80a488:	11000115 	stw	r4,4(r2)
  80a48c:	18c00217 	ldw	r3,8(r3)
  80a490:	10c00215 	stw	r3,8(r2)
  80a494:	a80b883a 	mov	r5,r21
  80a498:	a009883a 	mov	r4,r20
  80a49c:	0806b4c0 	call	806b4c <_free_r>
  80a4a0:	a009883a 	mov	r4,r20
  80a4a4:	080e5900 	call	80e590 <__malloc_unlock>
  80a4a8:	9005883a 	mov	r2,r18
  80a4ac:	00001206 	br	80a4f8 <_realloc_r+0x170>
  80a4b0:	00c00404 	movi	r3,16
  80a4b4:	1823883a 	mov	r17,r3
  80a4b8:	003fce06 	br	80a3f4 <__alt_mem_onchip_mem+0xff8023f4>
  80a4bc:	a825883a 	mov	r18,r21
  80a4c0:	8445c83a 	sub	r2,r16,r17
  80a4c4:	00c003c4 	movi	r3,15
  80a4c8:	18802636 	bltu	r3,r2,80a564 <_realloc_r+0x1dc>
  80a4cc:	99800117 	ldw	r6,4(r19)
  80a4d0:	9c07883a 	add	r3,r19,r16
  80a4d4:	3180004c 	andi	r6,r6,1
  80a4d8:	3420b03a 	or	r16,r6,r16
  80a4dc:	9c000115 	stw	r16,4(r19)
  80a4e0:	18800117 	ldw	r2,4(r3)
  80a4e4:	10800054 	ori	r2,r2,1
  80a4e8:	18800115 	stw	r2,4(r3)
  80a4ec:	a009883a 	mov	r4,r20
  80a4f0:	080e5900 	call	80e590 <__malloc_unlock>
  80a4f4:	9005883a 	mov	r2,r18
  80a4f8:	dfc00917 	ldw	ra,36(sp)
  80a4fc:	df000817 	ldw	fp,32(sp)
  80a500:	ddc00717 	ldw	r23,28(sp)
  80a504:	dd800617 	ldw	r22,24(sp)
  80a508:	dd400517 	ldw	r21,20(sp)
  80a50c:	dd000417 	ldw	r20,16(sp)
  80a510:	dcc00317 	ldw	r19,12(sp)
  80a514:	dc800217 	ldw	r18,8(sp)
  80a518:	dc400117 	ldw	r17,4(sp)
  80a51c:	dc000017 	ldw	r16,0(sp)
  80a520:	dec00a04 	addi	sp,sp,40
  80a524:	f800283a 	ret
  80a528:	017fff04 	movi	r5,-4
  80a52c:	414a703a 	and	r5,r8,r5
  80a530:	814d883a 	add	r6,r16,r5
  80a534:	30c01f16 	blt	r6,r3,80a5b4 <_realloc_r+0x22c>
  80a538:	20800317 	ldw	r2,12(r4)
  80a53c:	20c00217 	ldw	r3,8(r4)
  80a540:	a825883a 	mov	r18,r21
  80a544:	3021883a 	mov	r16,r6
  80a548:	18800315 	stw	r2,12(r3)
  80a54c:	10c00215 	stw	r3,8(r2)
  80a550:	003fdb06 	br	80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80a554:	00800304 	movi	r2,12
  80a558:	a0800015 	stw	r2,0(r20)
  80a55c:	0005883a 	mov	r2,zero
  80a560:	003fe506 	br	80a4f8 <__alt_mem_onchip_mem+0xff8024f8>
  80a564:	98c00117 	ldw	r3,4(r19)
  80a568:	9c4b883a 	add	r5,r19,r17
  80a56c:	11000054 	ori	r4,r2,1
  80a570:	18c0004c 	andi	r3,r3,1
  80a574:	1c62b03a 	or	r17,r3,r17
  80a578:	9c400115 	stw	r17,4(r19)
  80a57c:	29000115 	stw	r4,4(r5)
  80a580:	2885883a 	add	r2,r5,r2
  80a584:	10c00117 	ldw	r3,4(r2)
  80a588:	29400204 	addi	r5,r5,8
  80a58c:	a009883a 	mov	r4,r20
  80a590:	18c00054 	ori	r3,r3,1
  80a594:	10c00115 	stw	r3,4(r2)
  80a598:	0806b4c0 	call	806b4c <_free_r>
  80a59c:	003fd306 	br	80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80a5a0:	017fff04 	movi	r5,-4
  80a5a4:	414a703a 	and	r5,r8,r5
  80a5a8:	89800404 	addi	r6,r17,16
  80a5ac:	8151883a 	add	r8,r16,r5
  80a5b0:	4180590e 	bge	r8,r6,80a718 <_realloc_r+0x390>
  80a5b4:	1080004c 	andi	r2,r2,1
  80a5b8:	103f9e1e 	bne	r2,zero,80a434 <__alt_mem_onchip_mem+0xff802434>
  80a5bc:	adbffe17 	ldw	r22,-8(r21)
  80a5c0:	00bfff04 	movi	r2,-4
  80a5c4:	9dadc83a 	sub	r22,r19,r22
  80a5c8:	b1800117 	ldw	r6,4(r22)
  80a5cc:	3084703a 	and	r2,r6,r2
  80a5d0:	20002026 	beq	r4,zero,80a654 <_realloc_r+0x2cc>
  80a5d4:	80af883a 	add	r23,r16,r2
  80a5d8:	b96f883a 	add	r23,r23,r5
  80a5dc:	21c05f26 	beq	r4,r7,80a75c <_realloc_r+0x3d4>
  80a5e0:	b8c01c16 	blt	r23,r3,80a654 <_realloc_r+0x2cc>
  80a5e4:	20800317 	ldw	r2,12(r4)
  80a5e8:	20c00217 	ldw	r3,8(r4)
  80a5ec:	81bfff04 	addi	r6,r16,-4
  80a5f0:	01000904 	movi	r4,36
  80a5f4:	18800315 	stw	r2,12(r3)
  80a5f8:	10c00215 	stw	r3,8(r2)
  80a5fc:	b0c00217 	ldw	r3,8(r22)
  80a600:	b0800317 	ldw	r2,12(r22)
  80a604:	b4800204 	addi	r18,r22,8
  80a608:	18800315 	stw	r2,12(r3)
  80a60c:	10c00215 	stw	r3,8(r2)
  80a610:	21801b36 	bltu	r4,r6,80a680 <_realloc_r+0x2f8>
  80a614:	008004c4 	movi	r2,19
  80a618:	1180352e 	bgeu	r2,r6,80a6f0 <_realloc_r+0x368>
  80a61c:	a8800017 	ldw	r2,0(r21)
  80a620:	b0800215 	stw	r2,8(r22)
  80a624:	a8800117 	ldw	r2,4(r21)
  80a628:	b0800315 	stw	r2,12(r22)
  80a62c:	008006c4 	movi	r2,27
  80a630:	11807f36 	bltu	r2,r6,80a830 <_realloc_r+0x4a8>
  80a634:	b0800404 	addi	r2,r22,16
  80a638:	ad400204 	addi	r21,r21,8
  80a63c:	00002d06 	br	80a6f4 <_realloc_r+0x36c>
  80a640:	adbffe17 	ldw	r22,-8(r21)
  80a644:	00bfff04 	movi	r2,-4
  80a648:	9dadc83a 	sub	r22,r19,r22
  80a64c:	b1000117 	ldw	r4,4(r22)
  80a650:	2084703a 	and	r2,r4,r2
  80a654:	b03f7726 	beq	r22,zero,80a434 <__alt_mem_onchip_mem+0xff802434>
  80a658:	80af883a 	add	r23,r16,r2
  80a65c:	b8ff7516 	blt	r23,r3,80a434 <__alt_mem_onchip_mem+0xff802434>
  80a660:	b0800317 	ldw	r2,12(r22)
  80a664:	b0c00217 	ldw	r3,8(r22)
  80a668:	81bfff04 	addi	r6,r16,-4
  80a66c:	01000904 	movi	r4,36
  80a670:	18800315 	stw	r2,12(r3)
  80a674:	10c00215 	stw	r3,8(r2)
  80a678:	b4800204 	addi	r18,r22,8
  80a67c:	21bfe52e 	bgeu	r4,r6,80a614 <__alt_mem_onchip_mem+0xff802614>
  80a680:	a80b883a 	mov	r5,r21
  80a684:	9009883a 	mov	r4,r18
  80a688:	080a22c0 	call	80a22c <memmove>
  80a68c:	b821883a 	mov	r16,r23
  80a690:	b027883a 	mov	r19,r22
  80a694:	003f8a06 	br	80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80a698:	300b883a 	mov	r5,r6
  80a69c:	dfc00917 	ldw	ra,36(sp)
  80a6a0:	df000817 	ldw	fp,32(sp)
  80a6a4:	ddc00717 	ldw	r23,28(sp)
  80a6a8:	dd800617 	ldw	r22,24(sp)
  80a6ac:	dd400517 	ldw	r21,20(sp)
  80a6b0:	dd000417 	ldw	r20,16(sp)
  80a6b4:	dcc00317 	ldw	r19,12(sp)
  80a6b8:	dc800217 	ldw	r18,8(sp)
  80a6bc:	dc400117 	ldw	r17,4(sp)
  80a6c0:	dc000017 	ldw	r16,0(sp)
  80a6c4:	dec00a04 	addi	sp,sp,40
  80a6c8:	0801a681 	jmpi	801a68 <_malloc_r>
  80a6cc:	a8c00017 	ldw	r3,0(r21)
  80a6d0:	90c00015 	stw	r3,0(r18)
  80a6d4:	a8c00117 	ldw	r3,4(r21)
  80a6d8:	90c00115 	stw	r3,4(r18)
  80a6dc:	00c006c4 	movi	r3,27
  80a6e0:	19804536 	bltu	r3,r6,80a7f8 <_realloc_r+0x470>
  80a6e4:	90800204 	addi	r2,r18,8
  80a6e8:	a8c00204 	addi	r3,r21,8
  80a6ec:	003f6306 	br	80a47c <__alt_mem_onchip_mem+0xff80247c>
  80a6f0:	9005883a 	mov	r2,r18
  80a6f4:	a8c00017 	ldw	r3,0(r21)
  80a6f8:	b821883a 	mov	r16,r23
  80a6fc:	b027883a 	mov	r19,r22
  80a700:	10c00015 	stw	r3,0(r2)
  80a704:	a8c00117 	ldw	r3,4(r21)
  80a708:	10c00115 	stw	r3,4(r2)
  80a70c:	a8c00217 	ldw	r3,8(r21)
  80a710:	10c00215 	stw	r3,8(r2)
  80a714:	003f6a06 	br	80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80a718:	9c67883a 	add	r19,r19,r17
  80a71c:	4445c83a 	sub	r2,r8,r17
  80a720:	e4c00215 	stw	r19,8(fp)
  80a724:	10800054 	ori	r2,r2,1
  80a728:	98800115 	stw	r2,4(r19)
  80a72c:	a8bfff17 	ldw	r2,-4(r21)
  80a730:	a009883a 	mov	r4,r20
  80a734:	1080004c 	andi	r2,r2,1
  80a738:	1462b03a 	or	r17,r2,r17
  80a73c:	ac7fff15 	stw	r17,-4(r21)
  80a740:	080e5900 	call	80e590 <__malloc_unlock>
  80a744:	a805883a 	mov	r2,r21
  80a748:	003f6b06 	br	80a4f8 <__alt_mem_onchip_mem+0xff8024f8>
  80a74c:	a80b883a 	mov	r5,r21
  80a750:	9009883a 	mov	r4,r18
  80a754:	080a22c0 	call	80a22c <memmove>
  80a758:	003f4e06 	br	80a494 <__alt_mem_onchip_mem+0xff802494>
  80a75c:	89000404 	addi	r4,r17,16
  80a760:	b93fbc16 	blt	r23,r4,80a654 <__alt_mem_onchip_mem+0xff802654>
  80a764:	b0800317 	ldw	r2,12(r22)
  80a768:	b0c00217 	ldw	r3,8(r22)
  80a76c:	81bfff04 	addi	r6,r16,-4
  80a770:	01000904 	movi	r4,36
  80a774:	18800315 	stw	r2,12(r3)
  80a778:	10c00215 	stw	r3,8(r2)
  80a77c:	b4800204 	addi	r18,r22,8
  80a780:	21804336 	bltu	r4,r6,80a890 <_realloc_r+0x508>
  80a784:	008004c4 	movi	r2,19
  80a788:	11803f2e 	bgeu	r2,r6,80a888 <_realloc_r+0x500>
  80a78c:	a8800017 	ldw	r2,0(r21)
  80a790:	b0800215 	stw	r2,8(r22)
  80a794:	a8800117 	ldw	r2,4(r21)
  80a798:	b0800315 	stw	r2,12(r22)
  80a79c:	008006c4 	movi	r2,27
  80a7a0:	11803f36 	bltu	r2,r6,80a8a0 <_realloc_r+0x518>
  80a7a4:	b0800404 	addi	r2,r22,16
  80a7a8:	ad400204 	addi	r21,r21,8
  80a7ac:	a8c00017 	ldw	r3,0(r21)
  80a7b0:	10c00015 	stw	r3,0(r2)
  80a7b4:	a8c00117 	ldw	r3,4(r21)
  80a7b8:	10c00115 	stw	r3,4(r2)
  80a7bc:	a8c00217 	ldw	r3,8(r21)
  80a7c0:	10c00215 	stw	r3,8(r2)
  80a7c4:	b447883a 	add	r3,r22,r17
  80a7c8:	bc45c83a 	sub	r2,r23,r17
  80a7cc:	e0c00215 	stw	r3,8(fp)
  80a7d0:	10800054 	ori	r2,r2,1
  80a7d4:	18800115 	stw	r2,4(r3)
  80a7d8:	b0800117 	ldw	r2,4(r22)
  80a7dc:	a009883a 	mov	r4,r20
  80a7e0:	1080004c 	andi	r2,r2,1
  80a7e4:	1462b03a 	or	r17,r2,r17
  80a7e8:	b4400115 	stw	r17,4(r22)
  80a7ec:	080e5900 	call	80e590 <__malloc_unlock>
  80a7f0:	9005883a 	mov	r2,r18
  80a7f4:	003f4006 	br	80a4f8 <__alt_mem_onchip_mem+0xff8024f8>
  80a7f8:	a8c00217 	ldw	r3,8(r21)
  80a7fc:	90c00215 	stw	r3,8(r18)
  80a800:	a8c00317 	ldw	r3,12(r21)
  80a804:	90c00315 	stw	r3,12(r18)
  80a808:	30801126 	beq	r6,r2,80a850 <_realloc_r+0x4c8>
  80a80c:	90800404 	addi	r2,r18,16
  80a810:	a8c00404 	addi	r3,r21,16
  80a814:	003f1906 	br	80a47c <__alt_mem_onchip_mem+0xff80247c>
  80a818:	90ffff17 	ldw	r3,-4(r18)
  80a81c:	00bfff04 	movi	r2,-4
  80a820:	a825883a 	mov	r18,r21
  80a824:	1884703a 	and	r2,r3,r2
  80a828:	80a1883a 	add	r16,r16,r2
  80a82c:	003f2406 	br	80a4c0 <__alt_mem_onchip_mem+0xff8024c0>
  80a830:	a8800217 	ldw	r2,8(r21)
  80a834:	b0800415 	stw	r2,16(r22)
  80a838:	a8800317 	ldw	r2,12(r21)
  80a83c:	b0800515 	stw	r2,20(r22)
  80a840:	31000a26 	beq	r6,r4,80a86c <_realloc_r+0x4e4>
  80a844:	b0800604 	addi	r2,r22,24
  80a848:	ad400404 	addi	r21,r21,16
  80a84c:	003fa906 	br	80a6f4 <__alt_mem_onchip_mem+0xff8026f4>
  80a850:	a9000417 	ldw	r4,16(r21)
  80a854:	90800604 	addi	r2,r18,24
  80a858:	a8c00604 	addi	r3,r21,24
  80a85c:	91000415 	stw	r4,16(r18)
  80a860:	a9000517 	ldw	r4,20(r21)
  80a864:	91000515 	stw	r4,20(r18)
  80a868:	003f0406 	br	80a47c <__alt_mem_onchip_mem+0xff80247c>
  80a86c:	a8c00417 	ldw	r3,16(r21)
  80a870:	ad400604 	addi	r21,r21,24
  80a874:	b0800804 	addi	r2,r22,32
  80a878:	b0c00615 	stw	r3,24(r22)
  80a87c:	a8ffff17 	ldw	r3,-4(r21)
  80a880:	b0c00715 	stw	r3,28(r22)
  80a884:	003f9b06 	br	80a6f4 <__alt_mem_onchip_mem+0xff8026f4>
  80a888:	9005883a 	mov	r2,r18
  80a88c:	003fc706 	br	80a7ac <__alt_mem_onchip_mem+0xff8027ac>
  80a890:	a80b883a 	mov	r5,r21
  80a894:	9009883a 	mov	r4,r18
  80a898:	080a22c0 	call	80a22c <memmove>
  80a89c:	003fc906 	br	80a7c4 <__alt_mem_onchip_mem+0xff8027c4>
  80a8a0:	a8800217 	ldw	r2,8(r21)
  80a8a4:	b0800415 	stw	r2,16(r22)
  80a8a8:	a8800317 	ldw	r2,12(r21)
  80a8ac:	b0800515 	stw	r2,20(r22)
  80a8b0:	31000726 	beq	r6,r4,80a8d0 <_realloc_r+0x548>
  80a8b4:	b0800604 	addi	r2,r22,24
  80a8b8:	ad400404 	addi	r21,r21,16
  80a8bc:	003fbb06 	br	80a7ac <__alt_mem_onchip_mem+0xff8027ac>
  80a8c0:	a009883a 	mov	r4,r20
  80a8c4:	080e5900 	call	80e590 <__malloc_unlock>
  80a8c8:	0005883a 	mov	r2,zero
  80a8cc:	003f0a06 	br	80a4f8 <__alt_mem_onchip_mem+0xff8024f8>
  80a8d0:	a8c00417 	ldw	r3,16(r21)
  80a8d4:	ad400604 	addi	r21,r21,24
  80a8d8:	b0800804 	addi	r2,r22,32
  80a8dc:	b0c00615 	stw	r3,24(r22)
  80a8e0:	a8ffff17 	ldw	r3,-4(r21)
  80a8e4:	b0c00715 	stw	r3,28(r22)
  80a8e8:	003fb006 	br	80a7ac <__alt_mem_onchip_mem+0xff8027ac>

0080a8ec <__swbuf_r>:
  80a8ec:	defffb04 	addi	sp,sp,-20
  80a8f0:	dcc00315 	stw	r19,12(sp)
  80a8f4:	dc800215 	stw	r18,8(sp)
  80a8f8:	dc000015 	stw	r16,0(sp)
  80a8fc:	dfc00415 	stw	ra,16(sp)
  80a900:	dc400115 	stw	r17,4(sp)
  80a904:	2025883a 	mov	r18,r4
  80a908:	2827883a 	mov	r19,r5
  80a90c:	3021883a 	mov	r16,r6
  80a910:	20000226 	beq	r4,zero,80a91c <__swbuf_r+0x30>
  80a914:	20800e17 	ldw	r2,56(r4)
  80a918:	10004226 	beq	r2,zero,80aa24 <__swbuf_r+0x138>
  80a91c:	80800617 	ldw	r2,24(r16)
  80a920:	8100030b 	ldhu	r4,12(r16)
  80a924:	80800215 	stw	r2,8(r16)
  80a928:	2080020c 	andi	r2,r4,8
  80a92c:	10003626 	beq	r2,zero,80aa08 <__swbuf_r+0x11c>
  80a930:	80c00417 	ldw	r3,16(r16)
  80a934:	18003426 	beq	r3,zero,80aa08 <__swbuf_r+0x11c>
  80a938:	2088000c 	andi	r2,r4,8192
  80a93c:	9c403fcc 	andi	r17,r19,255
  80a940:	10001a26 	beq	r2,zero,80a9ac <__swbuf_r+0xc0>
  80a944:	80800017 	ldw	r2,0(r16)
  80a948:	81000517 	ldw	r4,20(r16)
  80a94c:	10c7c83a 	sub	r3,r2,r3
  80a950:	1900200e 	bge	r3,r4,80a9d4 <__swbuf_r+0xe8>
  80a954:	18c00044 	addi	r3,r3,1
  80a958:	81000217 	ldw	r4,8(r16)
  80a95c:	11400044 	addi	r5,r2,1
  80a960:	81400015 	stw	r5,0(r16)
  80a964:	213fffc4 	addi	r4,r4,-1
  80a968:	81000215 	stw	r4,8(r16)
  80a96c:	14c00005 	stb	r19,0(r2)
  80a970:	80800517 	ldw	r2,20(r16)
  80a974:	10c01e26 	beq	r2,r3,80a9f0 <__swbuf_r+0x104>
  80a978:	8080030b 	ldhu	r2,12(r16)
  80a97c:	1080004c 	andi	r2,r2,1
  80a980:	10000226 	beq	r2,zero,80a98c <__swbuf_r+0xa0>
  80a984:	00800284 	movi	r2,10
  80a988:	88801926 	beq	r17,r2,80a9f0 <__swbuf_r+0x104>
  80a98c:	8805883a 	mov	r2,r17
  80a990:	dfc00417 	ldw	ra,16(sp)
  80a994:	dcc00317 	ldw	r19,12(sp)
  80a998:	dc800217 	ldw	r18,8(sp)
  80a99c:	dc400117 	ldw	r17,4(sp)
  80a9a0:	dc000017 	ldw	r16,0(sp)
  80a9a4:	dec00504 	addi	sp,sp,20
  80a9a8:	f800283a 	ret
  80a9ac:	81401917 	ldw	r5,100(r16)
  80a9b0:	00b7ffc4 	movi	r2,-8193
  80a9b4:	21080014 	ori	r4,r4,8192
  80a9b8:	2884703a 	and	r2,r5,r2
  80a9bc:	80801915 	stw	r2,100(r16)
  80a9c0:	80800017 	ldw	r2,0(r16)
  80a9c4:	8100030d 	sth	r4,12(r16)
  80a9c8:	81000517 	ldw	r4,20(r16)
  80a9cc:	10c7c83a 	sub	r3,r2,r3
  80a9d0:	193fe016 	blt	r3,r4,80a954 <__alt_mem_onchip_mem+0xff802954>
  80a9d4:	800b883a 	mov	r5,r16
  80a9d8:	9009883a 	mov	r4,r18
  80a9dc:	08068f00 	call	8068f0 <_fflush_r>
  80a9e0:	1000071e 	bne	r2,zero,80aa00 <__swbuf_r+0x114>
  80a9e4:	80800017 	ldw	r2,0(r16)
  80a9e8:	00c00044 	movi	r3,1
  80a9ec:	003fda06 	br	80a958 <__alt_mem_onchip_mem+0xff802958>
  80a9f0:	800b883a 	mov	r5,r16
  80a9f4:	9009883a 	mov	r4,r18
  80a9f8:	08068f00 	call	8068f0 <_fflush_r>
  80a9fc:	103fe326 	beq	r2,zero,80a98c <__alt_mem_onchip_mem+0xff80298c>
  80aa00:	00bfffc4 	movi	r2,-1
  80aa04:	003fe206 	br	80a990 <__alt_mem_onchip_mem+0xff802990>
  80aa08:	800b883a 	mov	r5,r16
  80aa0c:	9009883a 	mov	r4,r18
  80aa10:	0804ba00 	call	804ba0 <__swsetup_r>
  80aa14:	103ffa1e 	bne	r2,zero,80aa00 <__alt_mem_onchip_mem+0xff802a00>
  80aa18:	8100030b 	ldhu	r4,12(r16)
  80aa1c:	80c00417 	ldw	r3,16(r16)
  80aa20:	003fc506 	br	80a938 <__alt_mem_onchip_mem+0xff802938>
  80aa24:	08010a00 	call	8010a0 <__sinit>
  80aa28:	003fbc06 	br	80a91c <__alt_mem_onchip_mem+0xff80291c>

0080aa2c <__swbuf>:
  80aa2c:	00802074 	movhi	r2,129
  80aa30:	10909704 	addi	r2,r2,16988
  80aa34:	280d883a 	mov	r6,r5
  80aa38:	200b883a 	mov	r5,r4
  80aa3c:	11000017 	ldw	r4,0(r2)
  80aa40:	080a8ec1 	jmpi	80a8ec <__swbuf_r>

0080aa44 <_wcrtomb_r>:
  80aa44:	defff604 	addi	sp,sp,-40
  80aa48:	00802074 	movhi	r2,129
  80aa4c:	dc800815 	stw	r18,32(sp)
  80aa50:	dc400715 	stw	r17,28(sp)
  80aa54:	dc000615 	stw	r16,24(sp)
  80aa58:	10909b04 	addi	r2,r2,17004
  80aa5c:	dfc00915 	stw	ra,36(sp)
  80aa60:	2021883a 	mov	r16,r4
  80aa64:	3823883a 	mov	r17,r7
  80aa68:	14800017 	ldw	r18,0(r2)
  80aa6c:	28001426 	beq	r5,zero,80aac0 <_wcrtomb_r+0x7c>
  80aa70:	d9400415 	stw	r5,16(sp)
  80aa74:	d9800515 	stw	r6,20(sp)
  80aa78:	0806f2c0 	call	806f2c <__locale_charset>
  80aa7c:	d9800517 	ldw	r6,20(sp)
  80aa80:	d9400417 	ldw	r5,16(sp)
  80aa84:	100f883a 	mov	r7,r2
  80aa88:	dc400015 	stw	r17,0(sp)
  80aa8c:	8009883a 	mov	r4,r16
  80aa90:	903ee83a 	callr	r18
  80aa94:	00ffffc4 	movi	r3,-1
  80aa98:	10c0031e 	bne	r2,r3,80aaa8 <_wcrtomb_r+0x64>
  80aa9c:	88000015 	stw	zero,0(r17)
  80aaa0:	00c02284 	movi	r3,138
  80aaa4:	80c00015 	stw	r3,0(r16)
  80aaa8:	dfc00917 	ldw	ra,36(sp)
  80aaac:	dc800817 	ldw	r18,32(sp)
  80aab0:	dc400717 	ldw	r17,28(sp)
  80aab4:	dc000617 	ldw	r16,24(sp)
  80aab8:	dec00a04 	addi	sp,sp,40
  80aabc:	f800283a 	ret
  80aac0:	0806f2c0 	call	806f2c <__locale_charset>
  80aac4:	100f883a 	mov	r7,r2
  80aac8:	dc400015 	stw	r17,0(sp)
  80aacc:	000d883a 	mov	r6,zero
  80aad0:	d9400104 	addi	r5,sp,4
  80aad4:	8009883a 	mov	r4,r16
  80aad8:	903ee83a 	callr	r18
  80aadc:	003fed06 	br	80aa94 <__alt_mem_onchip_mem+0xff802a94>

0080aae0 <wcrtomb>:
  80aae0:	defff604 	addi	sp,sp,-40
  80aae4:	00802074 	movhi	r2,129
  80aae8:	dc800615 	stw	r18,24(sp)
  80aaec:	dc400515 	stw	r17,20(sp)
  80aaf0:	10909704 	addi	r2,r2,16988
  80aaf4:	dfc00915 	stw	ra,36(sp)
  80aaf8:	dd000815 	stw	r20,32(sp)
  80aafc:	dcc00715 	stw	r19,28(sp)
  80ab00:	dc000415 	stw	r16,16(sp)
  80ab04:	3025883a 	mov	r18,r6
  80ab08:	14400017 	ldw	r17,0(r2)
  80ab0c:	20001926 	beq	r4,zero,80ab74 <wcrtomb+0x94>
  80ab10:	00802074 	movhi	r2,129
  80ab14:	10909b04 	addi	r2,r2,17004
  80ab18:	15000017 	ldw	r20,0(r2)
  80ab1c:	2021883a 	mov	r16,r4
  80ab20:	2827883a 	mov	r19,r5
  80ab24:	0806f2c0 	call	806f2c <__locale_charset>
  80ab28:	100f883a 	mov	r7,r2
  80ab2c:	dc800015 	stw	r18,0(sp)
  80ab30:	980d883a 	mov	r6,r19
  80ab34:	800b883a 	mov	r5,r16
  80ab38:	8809883a 	mov	r4,r17
  80ab3c:	a03ee83a 	callr	r20
  80ab40:	00ffffc4 	movi	r3,-1
  80ab44:	10c0031e 	bne	r2,r3,80ab54 <wcrtomb+0x74>
  80ab48:	90000015 	stw	zero,0(r18)
  80ab4c:	00c02284 	movi	r3,138
  80ab50:	88c00015 	stw	r3,0(r17)
  80ab54:	dfc00917 	ldw	ra,36(sp)
  80ab58:	dd000817 	ldw	r20,32(sp)
  80ab5c:	dcc00717 	ldw	r19,28(sp)
  80ab60:	dc800617 	ldw	r18,24(sp)
  80ab64:	dc400517 	ldw	r17,20(sp)
  80ab68:	dc000417 	ldw	r16,16(sp)
  80ab6c:	dec00a04 	addi	sp,sp,40
  80ab70:	f800283a 	ret
  80ab74:	00802074 	movhi	r2,129
  80ab78:	10909b04 	addi	r2,r2,17004
  80ab7c:	14000017 	ldw	r16,0(r2)
  80ab80:	0806f2c0 	call	806f2c <__locale_charset>
  80ab84:	100f883a 	mov	r7,r2
  80ab88:	dc800015 	stw	r18,0(sp)
  80ab8c:	000d883a 	mov	r6,zero
  80ab90:	d9400104 	addi	r5,sp,4
  80ab94:	8809883a 	mov	r4,r17
  80ab98:	803ee83a 	callr	r16
  80ab9c:	003fe806 	br	80ab40 <__alt_mem_onchip_mem+0xff802b40>

0080aba0 <__ascii_wctomb>:
  80aba0:	28000526 	beq	r5,zero,80abb8 <__ascii_wctomb+0x18>
  80aba4:	00803fc4 	movi	r2,255
  80aba8:	11800536 	bltu	r2,r6,80abc0 <__ascii_wctomb+0x20>
  80abac:	29800005 	stb	r6,0(r5)
  80abb0:	00800044 	movi	r2,1
  80abb4:	f800283a 	ret
  80abb8:	0005883a 	mov	r2,zero
  80abbc:	f800283a 	ret
  80abc0:	00802284 	movi	r2,138
  80abc4:	20800015 	stw	r2,0(r4)
  80abc8:	00bfffc4 	movi	r2,-1
  80abcc:	f800283a 	ret

0080abd0 <_wctomb_r>:
  80abd0:	00802074 	movhi	r2,129
  80abd4:	defff904 	addi	sp,sp,-28
  80abd8:	10909b04 	addi	r2,r2,17004
  80abdc:	dfc00615 	stw	ra,24(sp)
  80abe0:	dc400515 	stw	r17,20(sp)
  80abe4:	dc000415 	stw	r16,16(sp)
  80abe8:	3823883a 	mov	r17,r7
  80abec:	14000017 	ldw	r16,0(r2)
  80abf0:	d9000115 	stw	r4,4(sp)
  80abf4:	d9400215 	stw	r5,8(sp)
  80abf8:	d9800315 	stw	r6,12(sp)
  80abfc:	0806f2c0 	call	806f2c <__locale_charset>
  80ac00:	d9800317 	ldw	r6,12(sp)
  80ac04:	d9400217 	ldw	r5,8(sp)
  80ac08:	d9000117 	ldw	r4,4(sp)
  80ac0c:	100f883a 	mov	r7,r2
  80ac10:	dc400015 	stw	r17,0(sp)
  80ac14:	803ee83a 	callr	r16
  80ac18:	dfc00617 	ldw	ra,24(sp)
  80ac1c:	dc400517 	ldw	r17,20(sp)
  80ac20:	dc000417 	ldw	r16,16(sp)
  80ac24:	dec00704 	addi	sp,sp,28
  80ac28:	f800283a 	ret

0080ac2c <__udivdi3>:
  80ac2c:	defff504 	addi	sp,sp,-44
  80ac30:	dcc00415 	stw	r19,16(sp)
  80ac34:	dc000115 	stw	r16,4(sp)
  80ac38:	dfc00a15 	stw	ra,40(sp)
  80ac3c:	df000915 	stw	fp,36(sp)
  80ac40:	ddc00815 	stw	r23,32(sp)
  80ac44:	dd800715 	stw	r22,28(sp)
  80ac48:	dd400615 	stw	r21,24(sp)
  80ac4c:	dd000515 	stw	r20,20(sp)
  80ac50:	dc800315 	stw	r18,12(sp)
  80ac54:	dc400215 	stw	r17,8(sp)
  80ac58:	2027883a 	mov	r19,r4
  80ac5c:	2821883a 	mov	r16,r5
  80ac60:	3800411e 	bne	r7,zero,80ad68 <__udivdi3+0x13c>
  80ac64:	3023883a 	mov	r17,r6
  80ac68:	2025883a 	mov	r18,r4
  80ac6c:	2980522e 	bgeu	r5,r6,80adb8 <__udivdi3+0x18c>
  80ac70:	00bfffd4 	movui	r2,65535
  80ac74:	282d883a 	mov	r22,r5
  80ac78:	1180a836 	bltu	r2,r6,80af1c <__udivdi3+0x2f0>
  80ac7c:	00803fc4 	movi	r2,255
  80ac80:	1185803a 	cmpltu	r2,r2,r6
  80ac84:	100490fa 	slli	r2,r2,3
  80ac88:	3086d83a 	srl	r3,r6,r2
  80ac8c:	01002074 	movhi	r4,129
  80ac90:	21087b04 	addi	r4,r4,8684
  80ac94:	20c7883a 	add	r3,r4,r3
  80ac98:	18c00003 	ldbu	r3,0(r3)
  80ac9c:	1885883a 	add	r2,r3,r2
  80aca0:	00c00804 	movi	r3,32
  80aca4:	1887c83a 	sub	r3,r3,r2
  80aca8:	18000526 	beq	r3,zero,80acc0 <__udivdi3+0x94>
  80acac:	80e0983a 	sll	r16,r16,r3
  80acb0:	9884d83a 	srl	r2,r19,r2
  80acb4:	30e2983a 	sll	r17,r6,r3
  80acb8:	98e4983a 	sll	r18,r19,r3
  80acbc:	142cb03a 	or	r22,r2,r16
  80acc0:	882ad43a 	srli	r21,r17,16
  80acc4:	b009883a 	mov	r4,r22
  80acc8:	8d3fffcc 	andi	r20,r17,65535
  80accc:	a80b883a 	mov	r5,r21
  80acd0:	0800c000 	call	800c00 <__umodsi3>
  80acd4:	b009883a 	mov	r4,r22
  80acd8:	a80b883a 	mov	r5,r21
  80acdc:	1027883a 	mov	r19,r2
  80ace0:	0800b9c0 	call	800b9c <__udivsi3>
  80ace4:	102d883a 	mov	r22,r2
  80ace8:	9826943a 	slli	r19,r19,16
  80acec:	9004d43a 	srli	r2,r18,16
  80acf0:	a5a1383a 	mul	r16,r20,r22
  80acf4:	14c4b03a 	or	r2,r2,r19
  80acf8:	1400052e 	bgeu	r2,r16,80ad10 <__udivdi3+0xe4>
  80acfc:	1445883a 	add	r2,r2,r17
  80ad00:	b0ffffc4 	addi	r3,r22,-1
  80ad04:	14400136 	bltu	r2,r17,80ad0c <__udivdi3+0xe0>
  80ad08:	14012336 	bltu	r2,r16,80b198 <__udivdi3+0x56c>
  80ad0c:	182d883a 	mov	r22,r3
  80ad10:	1421c83a 	sub	r16,r2,r16
  80ad14:	a80b883a 	mov	r5,r21
  80ad18:	8009883a 	mov	r4,r16
  80ad1c:	0800c000 	call	800c00 <__umodsi3>
  80ad20:	1027883a 	mov	r19,r2
  80ad24:	a80b883a 	mov	r5,r21
  80ad28:	8009883a 	mov	r4,r16
  80ad2c:	0800b9c0 	call	800b9c <__udivsi3>
  80ad30:	9826943a 	slli	r19,r19,16
  80ad34:	a0a9383a 	mul	r20,r20,r2
  80ad38:	94bfffcc 	andi	r18,r18,65535
  80ad3c:	94e4b03a 	or	r18,r18,r19
  80ad40:	9500052e 	bgeu	r18,r20,80ad58 <__udivdi3+0x12c>
  80ad44:	8ca5883a 	add	r18,r17,r18
  80ad48:	10ffffc4 	addi	r3,r2,-1
  80ad4c:	9440f136 	bltu	r18,r17,80b114 <__udivdi3+0x4e8>
  80ad50:	9500f02e 	bgeu	r18,r20,80b114 <__udivdi3+0x4e8>
  80ad54:	10bfff84 	addi	r2,r2,-2
  80ad58:	b00c943a 	slli	r6,r22,16
  80ad5c:	0007883a 	mov	r3,zero
  80ad60:	3084b03a 	or	r2,r6,r2
  80ad64:	00005906 	br	80aecc <__udivdi3+0x2a0>
  80ad68:	29c05636 	bltu	r5,r7,80aec4 <__udivdi3+0x298>
  80ad6c:	00bfffd4 	movui	r2,65535
  80ad70:	11c0622e 	bgeu	r2,r7,80aefc <__udivdi3+0x2d0>
  80ad74:	00804034 	movhi	r2,256
  80ad78:	10bfffc4 	addi	r2,r2,-1
  80ad7c:	11c0ee36 	bltu	r2,r7,80b138 <__udivdi3+0x50c>
  80ad80:	00800404 	movi	r2,16
  80ad84:	3886d83a 	srl	r3,r7,r2
  80ad88:	01002074 	movhi	r4,129
  80ad8c:	21087b04 	addi	r4,r4,8684
  80ad90:	20c7883a 	add	r3,r4,r3
  80ad94:	18c00003 	ldbu	r3,0(r3)
  80ad98:	05400804 	movi	r21,32
  80ad9c:	1885883a 	add	r2,r3,r2
  80ada0:	a8abc83a 	sub	r21,r21,r2
  80ada4:	a800621e 	bne	r21,zero,80af30 <__udivdi3+0x304>
  80ada8:	3c00e936 	bltu	r7,r16,80b150 <__udivdi3+0x524>
  80adac:	9985403a 	cmpgeu	r2,r19,r6
  80adb0:	0007883a 	mov	r3,zero
  80adb4:	00004506 	br	80aecc <__udivdi3+0x2a0>
  80adb8:	3000041e 	bne	r6,zero,80adcc <__udivdi3+0x1a0>
  80adbc:	000b883a 	mov	r5,zero
  80adc0:	01000044 	movi	r4,1
  80adc4:	0800b9c0 	call	800b9c <__udivsi3>
  80adc8:	1023883a 	mov	r17,r2
  80adcc:	00bfffd4 	movui	r2,65535
  80add0:	14404e2e 	bgeu	r2,r17,80af0c <__udivdi3+0x2e0>
  80add4:	00804034 	movhi	r2,256
  80add8:	10bfffc4 	addi	r2,r2,-1
  80addc:	1440d836 	bltu	r2,r17,80b140 <__udivdi3+0x514>
  80ade0:	00800404 	movi	r2,16
  80ade4:	8886d83a 	srl	r3,r17,r2
  80ade8:	01002074 	movhi	r4,129
  80adec:	21087b04 	addi	r4,r4,8684
  80adf0:	20c7883a 	add	r3,r4,r3
  80adf4:	18c00003 	ldbu	r3,0(r3)
  80adf8:	1885883a 	add	r2,r3,r2
  80adfc:	00c00804 	movi	r3,32
  80ae00:	1887c83a 	sub	r3,r3,r2
  80ae04:	18008f1e 	bne	r3,zero,80b044 <__udivdi3+0x418>
  80ae08:	882ad43a 	srli	r21,r17,16
  80ae0c:	8461c83a 	sub	r16,r16,r17
  80ae10:	8d3fffcc 	andi	r20,r17,65535
  80ae14:	00c00044 	movi	r3,1
  80ae18:	8009883a 	mov	r4,r16
  80ae1c:	a80b883a 	mov	r5,r21
  80ae20:	d8c00015 	stw	r3,0(sp)
  80ae24:	0800c000 	call	800c00 <__umodsi3>
  80ae28:	8009883a 	mov	r4,r16
  80ae2c:	a80b883a 	mov	r5,r21
  80ae30:	1027883a 	mov	r19,r2
  80ae34:	0800b9c0 	call	800b9c <__udivsi3>
  80ae38:	9826943a 	slli	r19,r19,16
  80ae3c:	9008d43a 	srli	r4,r18,16
  80ae40:	1521383a 	mul	r16,r2,r20
  80ae44:	102d883a 	mov	r22,r2
  80ae48:	24c8b03a 	or	r4,r4,r19
  80ae4c:	d8c00017 	ldw	r3,0(sp)
  80ae50:	2400052e 	bgeu	r4,r16,80ae68 <__udivdi3+0x23c>
  80ae54:	2449883a 	add	r4,r4,r17
  80ae58:	b0bfffc4 	addi	r2,r22,-1
  80ae5c:	24400136 	bltu	r4,r17,80ae64 <__udivdi3+0x238>
  80ae60:	2400ca36 	bltu	r4,r16,80b18c <__udivdi3+0x560>
  80ae64:	102d883a 	mov	r22,r2
  80ae68:	2421c83a 	sub	r16,r4,r16
  80ae6c:	a80b883a 	mov	r5,r21
  80ae70:	8009883a 	mov	r4,r16
  80ae74:	d8c00015 	stw	r3,0(sp)
  80ae78:	0800c000 	call	800c00 <__umodsi3>
  80ae7c:	1027883a 	mov	r19,r2
  80ae80:	a80b883a 	mov	r5,r21
  80ae84:	8009883a 	mov	r4,r16
  80ae88:	0800b9c0 	call	800b9c <__udivsi3>
  80ae8c:	9826943a 	slli	r19,r19,16
  80ae90:	1529383a 	mul	r20,r2,r20
  80ae94:	94bfffcc 	andi	r18,r18,65535
  80ae98:	94e4b03a 	or	r18,r18,r19
  80ae9c:	d8c00017 	ldw	r3,0(sp)
  80aea0:	9500052e 	bgeu	r18,r20,80aeb8 <__udivdi3+0x28c>
  80aea4:	8ca5883a 	add	r18,r17,r18
  80aea8:	113fffc4 	addi	r4,r2,-1
  80aeac:	94409736 	bltu	r18,r17,80b10c <__udivdi3+0x4e0>
  80aeb0:	9500962e 	bgeu	r18,r20,80b10c <__udivdi3+0x4e0>
  80aeb4:	10bfff84 	addi	r2,r2,-2
  80aeb8:	b00c943a 	slli	r6,r22,16
  80aebc:	3084b03a 	or	r2,r6,r2
  80aec0:	00000206 	br	80aecc <__udivdi3+0x2a0>
  80aec4:	0007883a 	mov	r3,zero
  80aec8:	0005883a 	mov	r2,zero
  80aecc:	dfc00a17 	ldw	ra,40(sp)
  80aed0:	df000917 	ldw	fp,36(sp)
  80aed4:	ddc00817 	ldw	r23,32(sp)
  80aed8:	dd800717 	ldw	r22,28(sp)
  80aedc:	dd400617 	ldw	r21,24(sp)
  80aee0:	dd000517 	ldw	r20,20(sp)
  80aee4:	dcc00417 	ldw	r19,16(sp)
  80aee8:	dc800317 	ldw	r18,12(sp)
  80aeec:	dc400217 	ldw	r17,8(sp)
  80aef0:	dc000117 	ldw	r16,4(sp)
  80aef4:	dec00b04 	addi	sp,sp,44
  80aef8:	f800283a 	ret
  80aefc:	00803fc4 	movi	r2,255
  80af00:	11c5803a 	cmpltu	r2,r2,r7
  80af04:	100490fa 	slli	r2,r2,3
  80af08:	003f9e06 	br	80ad84 <__alt_mem_onchip_mem+0xff802d84>
  80af0c:	00803fc4 	movi	r2,255
  80af10:	1445803a 	cmpltu	r2,r2,r17
  80af14:	100490fa 	slli	r2,r2,3
  80af18:	003fb206 	br	80ade4 <__alt_mem_onchip_mem+0xff802de4>
  80af1c:	00804034 	movhi	r2,256
  80af20:	10bfffc4 	addi	r2,r2,-1
  80af24:	11808836 	bltu	r2,r6,80b148 <__udivdi3+0x51c>
  80af28:	00800404 	movi	r2,16
  80af2c:	003f5606 	br	80ac88 <__alt_mem_onchip_mem+0xff802c88>
  80af30:	30aed83a 	srl	r23,r6,r2
  80af34:	3d4e983a 	sll	r7,r7,r21
  80af38:	80acd83a 	srl	r22,r16,r2
  80af3c:	9884d83a 	srl	r2,r19,r2
  80af40:	3deeb03a 	or	r23,r7,r23
  80af44:	b824d43a 	srli	r18,r23,16
  80af48:	8560983a 	sll	r16,r16,r21
  80af4c:	b009883a 	mov	r4,r22
  80af50:	900b883a 	mov	r5,r18
  80af54:	3568983a 	sll	r20,r6,r21
  80af58:	1420b03a 	or	r16,r2,r16
  80af5c:	0800c000 	call	800c00 <__umodsi3>
  80af60:	b009883a 	mov	r4,r22
  80af64:	900b883a 	mov	r5,r18
  80af68:	1023883a 	mov	r17,r2
  80af6c:	0800b9c0 	call	800b9c <__udivsi3>
  80af70:	8808943a 	slli	r4,r17,16
  80af74:	bf3fffcc 	andi	fp,r23,65535
  80af78:	8006d43a 	srli	r3,r16,16
  80af7c:	e0a3383a 	mul	r17,fp,r2
  80af80:	100d883a 	mov	r6,r2
  80af84:	1906b03a 	or	r3,r3,r4
  80af88:	1c40042e 	bgeu	r3,r17,80af9c <__udivdi3+0x370>
  80af8c:	1dc7883a 	add	r3,r3,r23
  80af90:	10bfffc4 	addi	r2,r2,-1
  80af94:	1dc0752e 	bgeu	r3,r23,80b16c <__udivdi3+0x540>
  80af98:	100d883a 	mov	r6,r2
  80af9c:	1c63c83a 	sub	r17,r3,r17
  80afa0:	900b883a 	mov	r5,r18
  80afa4:	8809883a 	mov	r4,r17
  80afa8:	d9800015 	stw	r6,0(sp)
  80afac:	0800c000 	call	800c00 <__umodsi3>
  80afb0:	102d883a 	mov	r22,r2
  80afb4:	8809883a 	mov	r4,r17
  80afb8:	900b883a 	mov	r5,r18
  80afbc:	0800b9c0 	call	800b9c <__udivsi3>
  80afc0:	b02c943a 	slli	r22,r22,16
  80afc4:	e089383a 	mul	r4,fp,r2
  80afc8:	843fffcc 	andi	r16,r16,65535
  80afcc:	85a0b03a 	or	r16,r16,r22
  80afd0:	d9800017 	ldw	r6,0(sp)
  80afd4:	8100042e 	bgeu	r16,r4,80afe8 <__udivdi3+0x3bc>
  80afd8:	85e1883a 	add	r16,r16,r23
  80afdc:	10ffffc4 	addi	r3,r2,-1
  80afe0:	85c05e2e 	bgeu	r16,r23,80b15c <__udivdi3+0x530>
  80afe4:	1805883a 	mov	r2,r3
  80afe8:	300c943a 	slli	r6,r6,16
  80afec:	a17fffcc 	andi	r5,r20,65535
  80aff0:	a028d43a 	srli	r20,r20,16
  80aff4:	3084b03a 	or	r2,r6,r2
  80aff8:	10ffffcc 	andi	r3,r2,65535
  80affc:	100cd43a 	srli	r6,r2,16
  80b000:	194f383a 	mul	r7,r3,r5
  80b004:	1d07383a 	mul	r3,r3,r20
  80b008:	314b383a 	mul	r5,r6,r5
  80b00c:	3810d43a 	srli	r8,r7,16
  80b010:	8121c83a 	sub	r16,r16,r4
  80b014:	1947883a 	add	r3,r3,r5
  80b018:	40c7883a 	add	r3,r8,r3
  80b01c:	350d383a 	mul	r6,r6,r20
  80b020:	1940022e 	bgeu	r3,r5,80b02c <__udivdi3+0x400>
  80b024:	01000074 	movhi	r4,1
  80b028:	310d883a 	add	r6,r6,r4
  80b02c:	1828d43a 	srli	r20,r3,16
  80b030:	a18d883a 	add	r6,r20,r6
  80b034:	81803e36 	bltu	r16,r6,80b130 <__udivdi3+0x504>
  80b038:	81803826 	beq	r16,r6,80b11c <__udivdi3+0x4f0>
  80b03c:	0007883a 	mov	r3,zero
  80b040:	003fa206 	br	80aecc <__alt_mem_onchip_mem+0xff802ecc>
  80b044:	88e2983a 	sll	r17,r17,r3
  80b048:	80a8d83a 	srl	r20,r16,r2
  80b04c:	80e0983a 	sll	r16,r16,r3
  80b050:	882ad43a 	srli	r21,r17,16
  80b054:	9884d83a 	srl	r2,r19,r2
  80b058:	a009883a 	mov	r4,r20
  80b05c:	a80b883a 	mov	r5,r21
  80b060:	142eb03a 	or	r23,r2,r16
  80b064:	98e4983a 	sll	r18,r19,r3
  80b068:	0800c000 	call	800c00 <__umodsi3>
  80b06c:	a009883a 	mov	r4,r20
  80b070:	a80b883a 	mov	r5,r21
  80b074:	1021883a 	mov	r16,r2
  80b078:	0800b9c0 	call	800b9c <__udivsi3>
  80b07c:	1039883a 	mov	fp,r2
  80b080:	8d3fffcc 	andi	r20,r17,65535
  80b084:	8020943a 	slli	r16,r16,16
  80b088:	b804d43a 	srli	r2,r23,16
  80b08c:	a72d383a 	mul	r22,r20,fp
  80b090:	1404b03a 	or	r2,r2,r16
  80b094:	1580062e 	bgeu	r2,r22,80b0b0 <__udivdi3+0x484>
  80b098:	1445883a 	add	r2,r2,r17
  80b09c:	e0ffffc4 	addi	r3,fp,-1
  80b0a0:	14403836 	bltu	r2,r17,80b184 <__udivdi3+0x558>
  80b0a4:	1580372e 	bgeu	r2,r22,80b184 <__udivdi3+0x558>
  80b0a8:	e73fff84 	addi	fp,fp,-2
  80b0ac:	1445883a 	add	r2,r2,r17
  80b0b0:	15adc83a 	sub	r22,r2,r22
  80b0b4:	a80b883a 	mov	r5,r21
  80b0b8:	b009883a 	mov	r4,r22
  80b0bc:	0800c000 	call	800c00 <__umodsi3>
  80b0c0:	1027883a 	mov	r19,r2
  80b0c4:	b009883a 	mov	r4,r22
  80b0c8:	a80b883a 	mov	r5,r21
  80b0cc:	0800b9c0 	call	800b9c <__udivsi3>
  80b0d0:	9826943a 	slli	r19,r19,16
  80b0d4:	a0a1383a 	mul	r16,r20,r2
  80b0d8:	b93fffcc 	andi	r4,r23,65535
  80b0dc:	24c8b03a 	or	r4,r4,r19
  80b0e0:	2400062e 	bgeu	r4,r16,80b0fc <__udivdi3+0x4d0>
  80b0e4:	2449883a 	add	r4,r4,r17
  80b0e8:	10ffffc4 	addi	r3,r2,-1
  80b0ec:	24402336 	bltu	r4,r17,80b17c <__udivdi3+0x550>
  80b0f0:	2400222e 	bgeu	r4,r16,80b17c <__udivdi3+0x550>
  80b0f4:	10bfff84 	addi	r2,r2,-2
  80b0f8:	2449883a 	add	r4,r4,r17
  80b0fc:	e038943a 	slli	fp,fp,16
  80b100:	2421c83a 	sub	r16,r4,r16
  80b104:	e086b03a 	or	r3,fp,r2
  80b108:	003f4306 	br	80ae18 <__alt_mem_onchip_mem+0xff802e18>
  80b10c:	2005883a 	mov	r2,r4
  80b110:	003f6906 	br	80aeb8 <__alt_mem_onchip_mem+0xff802eb8>
  80b114:	1805883a 	mov	r2,r3
  80b118:	003f0f06 	br	80ad58 <__alt_mem_onchip_mem+0xff802d58>
  80b11c:	1806943a 	slli	r3,r3,16
  80b120:	9d66983a 	sll	r19,r19,r21
  80b124:	39ffffcc 	andi	r7,r7,65535
  80b128:	19c7883a 	add	r3,r3,r7
  80b12c:	98ffc32e 	bgeu	r19,r3,80b03c <__alt_mem_onchip_mem+0xff80303c>
  80b130:	10bfffc4 	addi	r2,r2,-1
  80b134:	003fc106 	br	80b03c <__alt_mem_onchip_mem+0xff80303c>
  80b138:	00800604 	movi	r2,24
  80b13c:	003f1106 	br	80ad84 <__alt_mem_onchip_mem+0xff802d84>
  80b140:	00800604 	movi	r2,24
  80b144:	003f2706 	br	80ade4 <__alt_mem_onchip_mem+0xff802de4>
  80b148:	00800604 	movi	r2,24
  80b14c:	003ece06 	br	80ac88 <__alt_mem_onchip_mem+0xff802c88>
  80b150:	0007883a 	mov	r3,zero
  80b154:	00800044 	movi	r2,1
  80b158:	003f5c06 	br	80aecc <__alt_mem_onchip_mem+0xff802ecc>
  80b15c:	813fa12e 	bgeu	r16,r4,80afe4 <__alt_mem_onchip_mem+0xff802fe4>
  80b160:	10bfff84 	addi	r2,r2,-2
  80b164:	85e1883a 	add	r16,r16,r23
  80b168:	003f9f06 	br	80afe8 <__alt_mem_onchip_mem+0xff802fe8>
  80b16c:	1c7f8a2e 	bgeu	r3,r17,80af98 <__alt_mem_onchip_mem+0xff802f98>
  80b170:	31bfff84 	addi	r6,r6,-2
  80b174:	1dc7883a 	add	r3,r3,r23
  80b178:	003f8806 	br	80af9c <__alt_mem_onchip_mem+0xff802f9c>
  80b17c:	1805883a 	mov	r2,r3
  80b180:	003fde06 	br	80b0fc <__alt_mem_onchip_mem+0xff8030fc>
  80b184:	1839883a 	mov	fp,r3
  80b188:	003fc906 	br	80b0b0 <__alt_mem_onchip_mem+0xff8030b0>
  80b18c:	b5bfff84 	addi	r22,r22,-2
  80b190:	2449883a 	add	r4,r4,r17
  80b194:	003f3406 	br	80ae68 <__alt_mem_onchip_mem+0xff802e68>
  80b198:	b5bfff84 	addi	r22,r22,-2
  80b19c:	1445883a 	add	r2,r2,r17
  80b1a0:	003edb06 	br	80ad10 <__alt_mem_onchip_mem+0xff802d10>

0080b1a4 <__umoddi3>:
  80b1a4:	defff404 	addi	sp,sp,-48
  80b1a8:	df000a15 	stw	fp,40(sp)
  80b1ac:	dc400315 	stw	r17,12(sp)
  80b1b0:	dc000215 	stw	r16,8(sp)
  80b1b4:	dfc00b15 	stw	ra,44(sp)
  80b1b8:	ddc00915 	stw	r23,36(sp)
  80b1bc:	dd800815 	stw	r22,32(sp)
  80b1c0:	dd400715 	stw	r21,28(sp)
  80b1c4:	dd000615 	stw	r20,24(sp)
  80b1c8:	dcc00515 	stw	r19,20(sp)
  80b1cc:	dc800415 	stw	r18,16(sp)
  80b1d0:	2021883a 	mov	r16,r4
  80b1d4:	2823883a 	mov	r17,r5
  80b1d8:	2839883a 	mov	fp,r5
  80b1dc:	38003c1e 	bne	r7,zero,80b2d0 <__umoddi3+0x12c>
  80b1e0:	3027883a 	mov	r19,r6
  80b1e4:	2029883a 	mov	r20,r4
  80b1e8:	2980512e 	bgeu	r5,r6,80b330 <__umoddi3+0x18c>
  80b1ec:	00bfffd4 	movui	r2,65535
  80b1f0:	11809a36 	bltu	r2,r6,80b45c <__umoddi3+0x2b8>
  80b1f4:	01003fc4 	movi	r4,255
  80b1f8:	2189803a 	cmpltu	r4,r4,r6
  80b1fc:	200890fa 	slli	r4,r4,3
  80b200:	3104d83a 	srl	r2,r6,r4
  80b204:	00c02074 	movhi	r3,129
  80b208:	18c87b04 	addi	r3,r3,8684
  80b20c:	1885883a 	add	r2,r3,r2
  80b210:	10c00003 	ldbu	r3,0(r2)
  80b214:	00800804 	movi	r2,32
  80b218:	1909883a 	add	r4,r3,r4
  80b21c:	1125c83a 	sub	r18,r2,r4
  80b220:	90000526 	beq	r18,zero,80b238 <__umoddi3+0x94>
  80b224:	8ca2983a 	sll	r17,r17,r18
  80b228:	8108d83a 	srl	r4,r16,r4
  80b22c:	34a6983a 	sll	r19,r6,r18
  80b230:	84a8983a 	sll	r20,r16,r18
  80b234:	2478b03a 	or	fp,r4,r17
  80b238:	982ed43a 	srli	r23,r19,16
  80b23c:	e009883a 	mov	r4,fp
  80b240:	9dbfffcc 	andi	r22,r19,65535
  80b244:	b80b883a 	mov	r5,r23
  80b248:	0800c000 	call	800c00 <__umodsi3>
  80b24c:	e009883a 	mov	r4,fp
  80b250:	b80b883a 	mov	r5,r23
  80b254:	102b883a 	mov	r21,r2
  80b258:	0800b9c0 	call	800b9c <__udivsi3>
  80b25c:	a806943a 	slli	r3,r21,16
  80b260:	a008d43a 	srli	r4,r20,16
  80b264:	b085383a 	mul	r2,r22,r2
  80b268:	20c8b03a 	or	r4,r4,r3
  80b26c:	2080032e 	bgeu	r4,r2,80b27c <__umoddi3+0xd8>
  80b270:	24c9883a 	add	r4,r4,r19
  80b274:	24c00136 	bltu	r4,r19,80b27c <__umoddi3+0xd8>
  80b278:	20811036 	bltu	r4,r2,80b6bc <__umoddi3+0x518>
  80b27c:	20abc83a 	sub	r21,r4,r2
  80b280:	b80b883a 	mov	r5,r23
  80b284:	a809883a 	mov	r4,r21
  80b288:	0800c000 	call	800c00 <__umodsi3>
  80b28c:	1023883a 	mov	r17,r2
  80b290:	b80b883a 	mov	r5,r23
  80b294:	a809883a 	mov	r4,r21
  80b298:	0800b9c0 	call	800b9c <__udivsi3>
  80b29c:	8822943a 	slli	r17,r17,16
  80b2a0:	b085383a 	mul	r2,r22,r2
  80b2a4:	a0ffffcc 	andi	r3,r20,65535
  80b2a8:	1c46b03a 	or	r3,r3,r17
  80b2ac:	1880042e 	bgeu	r3,r2,80b2c0 <__umoddi3+0x11c>
  80b2b0:	1cc7883a 	add	r3,r3,r19
  80b2b4:	1cc00236 	bltu	r3,r19,80b2c0 <__umoddi3+0x11c>
  80b2b8:	1880012e 	bgeu	r3,r2,80b2c0 <__umoddi3+0x11c>
  80b2bc:	1cc7883a 	add	r3,r3,r19
  80b2c0:	1885c83a 	sub	r2,r3,r2
  80b2c4:	1484d83a 	srl	r2,r2,r18
  80b2c8:	0007883a 	mov	r3,zero
  80b2cc:	00004f06 	br	80b40c <__umoddi3+0x268>
  80b2d0:	29c04c36 	bltu	r5,r7,80b404 <__umoddi3+0x260>
  80b2d4:	00bfffd4 	movui	r2,65535
  80b2d8:	11c0582e 	bgeu	r2,r7,80b43c <__umoddi3+0x298>
  80b2dc:	00804034 	movhi	r2,256
  80b2e0:	10bfffc4 	addi	r2,r2,-1
  80b2e4:	11c0e736 	bltu	r2,r7,80b684 <__umoddi3+0x4e0>
  80b2e8:	01000404 	movi	r4,16
  80b2ec:	3904d83a 	srl	r2,r7,r4
  80b2f0:	00c02074 	movhi	r3,129
  80b2f4:	18c87b04 	addi	r3,r3,8684
  80b2f8:	1885883a 	add	r2,r3,r2
  80b2fc:	14c00003 	ldbu	r19,0(r2)
  80b300:	00c00804 	movi	r3,32
  80b304:	9927883a 	add	r19,r19,r4
  80b308:	1ce9c83a 	sub	r20,r3,r19
  80b30c:	a000581e 	bne	r20,zero,80b470 <__umoddi3+0x2cc>
  80b310:	3c400136 	bltu	r7,r17,80b318 <__umoddi3+0x174>
  80b314:	8180eb36 	bltu	r16,r6,80b6c4 <__umoddi3+0x520>
  80b318:	8185c83a 	sub	r2,r16,r6
  80b31c:	89e3c83a 	sub	r17,r17,r7
  80b320:	8089803a 	cmpltu	r4,r16,r2
  80b324:	8939c83a 	sub	fp,r17,r4
  80b328:	e007883a 	mov	r3,fp
  80b32c:	00003706 	br	80b40c <__umoddi3+0x268>
  80b330:	3000041e 	bne	r6,zero,80b344 <__umoddi3+0x1a0>
  80b334:	000b883a 	mov	r5,zero
  80b338:	01000044 	movi	r4,1
  80b33c:	0800b9c0 	call	800b9c <__udivsi3>
  80b340:	1027883a 	mov	r19,r2
  80b344:	00bfffd4 	movui	r2,65535
  80b348:	14c0402e 	bgeu	r2,r19,80b44c <__umoddi3+0x2a8>
  80b34c:	00804034 	movhi	r2,256
  80b350:	10bfffc4 	addi	r2,r2,-1
  80b354:	14c0cd36 	bltu	r2,r19,80b68c <__umoddi3+0x4e8>
  80b358:	00800404 	movi	r2,16
  80b35c:	9886d83a 	srl	r3,r19,r2
  80b360:	01002074 	movhi	r4,129
  80b364:	21087b04 	addi	r4,r4,8684
  80b368:	20c7883a 	add	r3,r4,r3
  80b36c:	18c00003 	ldbu	r3,0(r3)
  80b370:	1887883a 	add	r3,r3,r2
  80b374:	00800804 	movi	r2,32
  80b378:	10e5c83a 	sub	r18,r2,r3
  80b37c:	9000901e 	bne	r18,zero,80b5c0 <__umoddi3+0x41c>
  80b380:	982cd43a 	srli	r22,r19,16
  80b384:	8ce3c83a 	sub	r17,r17,r19
  80b388:	9d7fffcc 	andi	r21,r19,65535
  80b38c:	b00b883a 	mov	r5,r22
  80b390:	8809883a 	mov	r4,r17
  80b394:	0800c000 	call	800c00 <__umodsi3>
  80b398:	8809883a 	mov	r4,r17
  80b39c:	b00b883a 	mov	r5,r22
  80b3a0:	1021883a 	mov	r16,r2
  80b3a4:	0800b9c0 	call	800b9c <__udivsi3>
  80b3a8:	8006943a 	slli	r3,r16,16
  80b3ac:	a008d43a 	srli	r4,r20,16
  80b3b0:	1545383a 	mul	r2,r2,r21
  80b3b4:	20c8b03a 	or	r4,r4,r3
  80b3b8:	2080042e 	bgeu	r4,r2,80b3cc <__umoddi3+0x228>
  80b3bc:	24c9883a 	add	r4,r4,r19
  80b3c0:	24c00236 	bltu	r4,r19,80b3cc <__umoddi3+0x228>
  80b3c4:	2080012e 	bgeu	r4,r2,80b3cc <__umoddi3+0x228>
  80b3c8:	24c9883a 	add	r4,r4,r19
  80b3cc:	20a1c83a 	sub	r16,r4,r2
  80b3d0:	b00b883a 	mov	r5,r22
  80b3d4:	8009883a 	mov	r4,r16
  80b3d8:	0800c000 	call	800c00 <__umodsi3>
  80b3dc:	1023883a 	mov	r17,r2
  80b3e0:	b00b883a 	mov	r5,r22
  80b3e4:	8009883a 	mov	r4,r16
  80b3e8:	0800b9c0 	call	800b9c <__udivsi3>
  80b3ec:	8822943a 	slli	r17,r17,16
  80b3f0:	1545383a 	mul	r2,r2,r21
  80b3f4:	a53fffcc 	andi	r20,r20,65535
  80b3f8:	a446b03a 	or	r3,r20,r17
  80b3fc:	18bfb02e 	bgeu	r3,r2,80b2c0 <__alt_mem_onchip_mem+0xff8032c0>
  80b400:	003fab06 	br	80b2b0 <__alt_mem_onchip_mem+0xff8032b0>
  80b404:	2005883a 	mov	r2,r4
  80b408:	2807883a 	mov	r3,r5
  80b40c:	dfc00b17 	ldw	ra,44(sp)
  80b410:	df000a17 	ldw	fp,40(sp)
  80b414:	ddc00917 	ldw	r23,36(sp)
  80b418:	dd800817 	ldw	r22,32(sp)
  80b41c:	dd400717 	ldw	r21,28(sp)
  80b420:	dd000617 	ldw	r20,24(sp)
  80b424:	dcc00517 	ldw	r19,20(sp)
  80b428:	dc800417 	ldw	r18,16(sp)
  80b42c:	dc400317 	ldw	r17,12(sp)
  80b430:	dc000217 	ldw	r16,8(sp)
  80b434:	dec00c04 	addi	sp,sp,48
  80b438:	f800283a 	ret
  80b43c:	04c03fc4 	movi	r19,255
  80b440:	99c9803a 	cmpltu	r4,r19,r7
  80b444:	200890fa 	slli	r4,r4,3
  80b448:	003fa806 	br	80b2ec <__alt_mem_onchip_mem+0xff8032ec>
  80b44c:	00803fc4 	movi	r2,255
  80b450:	14c5803a 	cmpltu	r2,r2,r19
  80b454:	100490fa 	slli	r2,r2,3
  80b458:	003fc006 	br	80b35c <__alt_mem_onchip_mem+0xff80335c>
  80b45c:	00804034 	movhi	r2,256
  80b460:	10bfffc4 	addi	r2,r2,-1
  80b464:	11808b36 	bltu	r2,r6,80b694 <__umoddi3+0x4f0>
  80b468:	01000404 	movi	r4,16
  80b46c:	003f6406 	br	80b200 <__alt_mem_onchip_mem+0xff803200>
  80b470:	34c4d83a 	srl	r2,r6,r19
  80b474:	3d0e983a 	sll	r7,r7,r20
  80b478:	8cf8d83a 	srl	fp,r17,r19
  80b47c:	8d10983a 	sll	r8,r17,r20
  80b480:	38aab03a 	or	r21,r7,r2
  80b484:	a82cd43a 	srli	r22,r21,16
  80b488:	84e2d83a 	srl	r17,r16,r19
  80b48c:	e009883a 	mov	r4,fp
  80b490:	b00b883a 	mov	r5,r22
  80b494:	8a22b03a 	or	r17,r17,r8
  80b498:	3524983a 	sll	r18,r6,r20
  80b49c:	0800c000 	call	800c00 <__umodsi3>
  80b4a0:	e009883a 	mov	r4,fp
  80b4a4:	b00b883a 	mov	r5,r22
  80b4a8:	102f883a 	mov	r23,r2
  80b4ac:	0800b9c0 	call	800b9c <__udivsi3>
  80b4b0:	100d883a 	mov	r6,r2
  80b4b4:	b808943a 	slli	r4,r23,16
  80b4b8:	aa3fffcc 	andi	r8,r21,65535
  80b4bc:	8804d43a 	srli	r2,r17,16
  80b4c0:	41af383a 	mul	r23,r8,r6
  80b4c4:	8520983a 	sll	r16,r16,r20
  80b4c8:	1104b03a 	or	r2,r2,r4
  80b4cc:	15c0042e 	bgeu	r2,r23,80b4e0 <__umoddi3+0x33c>
  80b4d0:	1545883a 	add	r2,r2,r21
  80b4d4:	30ffffc4 	addi	r3,r6,-1
  80b4d8:	1540742e 	bgeu	r2,r21,80b6ac <__umoddi3+0x508>
  80b4dc:	180d883a 	mov	r6,r3
  80b4e0:	15efc83a 	sub	r23,r2,r23
  80b4e4:	b00b883a 	mov	r5,r22
  80b4e8:	b809883a 	mov	r4,r23
  80b4ec:	d9800115 	stw	r6,4(sp)
  80b4f0:	da000015 	stw	r8,0(sp)
  80b4f4:	0800c000 	call	800c00 <__umodsi3>
  80b4f8:	b00b883a 	mov	r5,r22
  80b4fc:	b809883a 	mov	r4,r23
  80b500:	1039883a 	mov	fp,r2
  80b504:	0800b9c0 	call	800b9c <__udivsi3>
  80b508:	da000017 	ldw	r8,0(sp)
  80b50c:	e038943a 	slli	fp,fp,16
  80b510:	100b883a 	mov	r5,r2
  80b514:	4089383a 	mul	r4,r8,r2
  80b518:	8a3fffcc 	andi	r8,r17,65535
  80b51c:	4710b03a 	or	r8,r8,fp
  80b520:	d9800117 	ldw	r6,4(sp)
  80b524:	4100042e 	bgeu	r8,r4,80b538 <__umoddi3+0x394>
  80b528:	4551883a 	add	r8,r8,r21
  80b52c:	10bfffc4 	addi	r2,r2,-1
  80b530:	45405a2e 	bgeu	r8,r21,80b69c <__umoddi3+0x4f8>
  80b534:	100b883a 	mov	r5,r2
  80b538:	300c943a 	slli	r6,r6,16
  80b53c:	91ffffcc 	andi	r7,r18,65535
  80b540:	9004d43a 	srli	r2,r18,16
  80b544:	314cb03a 	or	r6,r6,r5
  80b548:	317fffcc 	andi	r5,r6,65535
  80b54c:	300cd43a 	srli	r6,r6,16
  80b550:	29d3383a 	mul	r9,r5,r7
  80b554:	288b383a 	mul	r5,r5,r2
  80b558:	31cf383a 	mul	r7,r6,r7
  80b55c:	4806d43a 	srli	r3,r9,16
  80b560:	4111c83a 	sub	r8,r8,r4
  80b564:	29cb883a 	add	r5,r5,r7
  80b568:	194b883a 	add	r5,r3,r5
  80b56c:	3085383a 	mul	r2,r6,r2
  80b570:	29c0022e 	bgeu	r5,r7,80b57c <__umoddi3+0x3d8>
  80b574:	00c00074 	movhi	r3,1
  80b578:	10c5883a 	add	r2,r2,r3
  80b57c:	2808d43a 	srli	r4,r5,16
  80b580:	280a943a 	slli	r5,r5,16
  80b584:	4a7fffcc 	andi	r9,r9,65535
  80b588:	2085883a 	add	r2,r4,r2
  80b58c:	2a4b883a 	add	r5,r5,r9
  80b590:	40803636 	bltu	r8,r2,80b66c <__umoddi3+0x4c8>
  80b594:	40804d26 	beq	r8,r2,80b6cc <__umoddi3+0x528>
  80b598:	4089c83a 	sub	r4,r8,r2
  80b59c:	280f883a 	mov	r7,r5
  80b5a0:	81cfc83a 	sub	r7,r16,r7
  80b5a4:	81c7803a 	cmpltu	r3,r16,r7
  80b5a8:	20c7c83a 	sub	r3,r4,r3
  80b5ac:	1cc4983a 	sll	r2,r3,r19
  80b5b0:	3d0ed83a 	srl	r7,r7,r20
  80b5b4:	1d06d83a 	srl	r3,r3,r20
  80b5b8:	11c4b03a 	or	r2,r2,r7
  80b5bc:	003f9306 	br	80b40c <__alt_mem_onchip_mem+0xff80340c>
  80b5c0:	9ca6983a 	sll	r19,r19,r18
  80b5c4:	88e8d83a 	srl	r20,r17,r3
  80b5c8:	80c4d83a 	srl	r2,r16,r3
  80b5cc:	982cd43a 	srli	r22,r19,16
  80b5d0:	8ca2983a 	sll	r17,r17,r18
  80b5d4:	a009883a 	mov	r4,r20
  80b5d8:	b00b883a 	mov	r5,r22
  80b5dc:	1478b03a 	or	fp,r2,r17
  80b5e0:	0800c000 	call	800c00 <__umodsi3>
  80b5e4:	a009883a 	mov	r4,r20
  80b5e8:	b00b883a 	mov	r5,r22
  80b5ec:	1023883a 	mov	r17,r2
  80b5f0:	0800b9c0 	call	800b9c <__udivsi3>
  80b5f4:	9d7fffcc 	andi	r21,r19,65535
  80b5f8:	880a943a 	slli	r5,r17,16
  80b5fc:	e008d43a 	srli	r4,fp,16
  80b600:	a885383a 	mul	r2,r21,r2
  80b604:	84a8983a 	sll	r20,r16,r18
  80b608:	2148b03a 	or	r4,r4,r5
  80b60c:	2080042e 	bgeu	r4,r2,80b620 <__umoddi3+0x47c>
  80b610:	24c9883a 	add	r4,r4,r19
  80b614:	24c00236 	bltu	r4,r19,80b620 <__umoddi3+0x47c>
  80b618:	2080012e 	bgeu	r4,r2,80b620 <__umoddi3+0x47c>
  80b61c:	24c9883a 	add	r4,r4,r19
  80b620:	20a3c83a 	sub	r17,r4,r2
  80b624:	b00b883a 	mov	r5,r22
  80b628:	8809883a 	mov	r4,r17
  80b62c:	0800c000 	call	800c00 <__umodsi3>
  80b630:	102f883a 	mov	r23,r2
  80b634:	8809883a 	mov	r4,r17
  80b638:	b00b883a 	mov	r5,r22
  80b63c:	0800b9c0 	call	800b9c <__udivsi3>
  80b640:	b82e943a 	slli	r23,r23,16
  80b644:	a885383a 	mul	r2,r21,r2
  80b648:	e13fffcc 	andi	r4,fp,65535
  80b64c:	25c8b03a 	or	r4,r4,r23
  80b650:	2080042e 	bgeu	r4,r2,80b664 <__umoddi3+0x4c0>
  80b654:	24c9883a 	add	r4,r4,r19
  80b658:	24c00236 	bltu	r4,r19,80b664 <__umoddi3+0x4c0>
  80b65c:	2080012e 	bgeu	r4,r2,80b664 <__umoddi3+0x4c0>
  80b660:	24c9883a 	add	r4,r4,r19
  80b664:	20a3c83a 	sub	r17,r4,r2
  80b668:	003f4806 	br	80b38c <__alt_mem_onchip_mem+0xff80338c>
  80b66c:	2c8fc83a 	sub	r7,r5,r18
  80b670:	1545c83a 	sub	r2,r2,r21
  80b674:	29cb803a 	cmpltu	r5,r5,r7
  80b678:	1145c83a 	sub	r2,r2,r5
  80b67c:	4089c83a 	sub	r4,r8,r2
  80b680:	003fc706 	br	80b5a0 <__alt_mem_onchip_mem+0xff8035a0>
  80b684:	01000604 	movi	r4,24
  80b688:	003f1806 	br	80b2ec <__alt_mem_onchip_mem+0xff8032ec>
  80b68c:	00800604 	movi	r2,24
  80b690:	003f3206 	br	80b35c <__alt_mem_onchip_mem+0xff80335c>
  80b694:	01000604 	movi	r4,24
  80b698:	003ed906 	br	80b200 <__alt_mem_onchip_mem+0xff803200>
  80b69c:	413fa52e 	bgeu	r8,r4,80b534 <__alt_mem_onchip_mem+0xff803534>
  80b6a0:	297fff84 	addi	r5,r5,-2
  80b6a4:	4551883a 	add	r8,r8,r21
  80b6a8:	003fa306 	br	80b538 <__alt_mem_onchip_mem+0xff803538>
  80b6ac:	15ff8b2e 	bgeu	r2,r23,80b4dc <__alt_mem_onchip_mem+0xff8034dc>
  80b6b0:	31bfff84 	addi	r6,r6,-2
  80b6b4:	1545883a 	add	r2,r2,r21
  80b6b8:	003f8906 	br	80b4e0 <__alt_mem_onchip_mem+0xff8034e0>
  80b6bc:	24c9883a 	add	r4,r4,r19
  80b6c0:	003eee06 	br	80b27c <__alt_mem_onchip_mem+0xff80327c>
  80b6c4:	8005883a 	mov	r2,r16
  80b6c8:	003f1706 	br	80b328 <__alt_mem_onchip_mem+0xff803328>
  80b6cc:	817fe736 	bltu	r16,r5,80b66c <__alt_mem_onchip_mem+0xff80366c>
  80b6d0:	280f883a 	mov	r7,r5
  80b6d4:	0009883a 	mov	r4,zero
  80b6d8:	003fb106 	br	80b5a0 <__alt_mem_onchip_mem+0xff8035a0>

0080b6dc <__adddf3>:
  80b6dc:	02c00434 	movhi	r11,16
  80b6e0:	5affffc4 	addi	r11,r11,-1
  80b6e4:	2806d7fa 	srli	r3,r5,31
  80b6e8:	2ad4703a 	and	r10,r5,r11
  80b6ec:	3ad2703a 	and	r9,r7,r11
  80b6f0:	3804d53a 	srli	r2,r7,20
  80b6f4:	3018d77a 	srli	r12,r6,29
  80b6f8:	280ad53a 	srli	r5,r5,20
  80b6fc:	501490fa 	slli	r10,r10,3
  80b700:	2010d77a 	srli	r8,r4,29
  80b704:	481290fa 	slli	r9,r9,3
  80b708:	380ed7fa 	srli	r7,r7,31
  80b70c:	defffb04 	addi	sp,sp,-20
  80b710:	dc800215 	stw	r18,8(sp)
  80b714:	dc400115 	stw	r17,4(sp)
  80b718:	dc000015 	stw	r16,0(sp)
  80b71c:	dfc00415 	stw	ra,16(sp)
  80b720:	dcc00315 	stw	r19,12(sp)
  80b724:	1c803fcc 	andi	r18,r3,255
  80b728:	2c01ffcc 	andi	r16,r5,2047
  80b72c:	5210b03a 	or	r8,r10,r8
  80b730:	202290fa 	slli	r17,r4,3
  80b734:	1081ffcc 	andi	r2,r2,2047
  80b738:	4b12b03a 	or	r9,r9,r12
  80b73c:	300c90fa 	slli	r6,r6,3
  80b740:	91c07526 	beq	r18,r7,80b918 <__adddf3+0x23c>
  80b744:	8087c83a 	sub	r3,r16,r2
  80b748:	00c0ab0e 	bge	zero,r3,80b9f8 <__adddf3+0x31c>
  80b74c:	10002a1e 	bne	r2,zero,80b7f8 <__adddf3+0x11c>
  80b750:	4984b03a 	or	r2,r9,r6
  80b754:	1000961e 	bne	r2,zero,80b9b0 <__adddf3+0x2d4>
  80b758:	888001cc 	andi	r2,r17,7
  80b75c:	10000726 	beq	r2,zero,80b77c <__adddf3+0xa0>
  80b760:	888003cc 	andi	r2,r17,15
  80b764:	00c00104 	movi	r3,4
  80b768:	10c00426 	beq	r2,r3,80b77c <__adddf3+0xa0>
  80b76c:	88c7883a 	add	r3,r17,r3
  80b770:	1c63803a 	cmpltu	r17,r3,r17
  80b774:	4451883a 	add	r8,r8,r17
  80b778:	1823883a 	mov	r17,r3
  80b77c:	4080202c 	andhi	r2,r8,128
  80b780:	10005926 	beq	r2,zero,80b8e8 <__adddf3+0x20c>
  80b784:	84000044 	addi	r16,r16,1
  80b788:	0081ffc4 	movi	r2,2047
  80b78c:	8080ba26 	beq	r16,r2,80ba78 <__adddf3+0x39c>
  80b790:	00bfe034 	movhi	r2,65408
  80b794:	10bfffc4 	addi	r2,r2,-1
  80b798:	4090703a 	and	r8,r8,r2
  80b79c:	4004977a 	slli	r2,r8,29
  80b7a0:	4010927a 	slli	r8,r8,9
  80b7a4:	8822d0fa 	srli	r17,r17,3
  80b7a8:	8401ffcc 	andi	r16,r16,2047
  80b7ac:	4010d33a 	srli	r8,r8,12
  80b7b0:	9007883a 	mov	r3,r18
  80b7b4:	1444b03a 	or	r2,r2,r17
  80b7b8:	8401ffcc 	andi	r16,r16,2047
  80b7bc:	8020953a 	slli	r16,r16,20
  80b7c0:	18c03fcc 	andi	r3,r3,255
  80b7c4:	01000434 	movhi	r4,16
  80b7c8:	213fffc4 	addi	r4,r4,-1
  80b7cc:	180697fa 	slli	r3,r3,31
  80b7d0:	4110703a 	and	r8,r8,r4
  80b7d4:	4410b03a 	or	r8,r8,r16
  80b7d8:	40c6b03a 	or	r3,r8,r3
  80b7dc:	dfc00417 	ldw	ra,16(sp)
  80b7e0:	dcc00317 	ldw	r19,12(sp)
  80b7e4:	dc800217 	ldw	r18,8(sp)
  80b7e8:	dc400117 	ldw	r17,4(sp)
  80b7ec:	dc000017 	ldw	r16,0(sp)
  80b7f0:	dec00504 	addi	sp,sp,20
  80b7f4:	f800283a 	ret
  80b7f8:	0081ffc4 	movi	r2,2047
  80b7fc:	80bfd626 	beq	r16,r2,80b758 <__alt_mem_onchip_mem+0xff803758>
  80b800:	4a402034 	orhi	r9,r9,128
  80b804:	00800e04 	movi	r2,56
  80b808:	10c09f16 	blt	r2,r3,80ba88 <__adddf3+0x3ac>
  80b80c:	008007c4 	movi	r2,31
  80b810:	10c0c216 	blt	r2,r3,80bb1c <__adddf3+0x440>
  80b814:	00800804 	movi	r2,32
  80b818:	10c5c83a 	sub	r2,r2,r3
  80b81c:	488a983a 	sll	r5,r9,r2
  80b820:	30c8d83a 	srl	r4,r6,r3
  80b824:	3084983a 	sll	r2,r6,r2
  80b828:	48c6d83a 	srl	r3,r9,r3
  80b82c:	290cb03a 	or	r6,r5,r4
  80b830:	1004c03a 	cmpne	r2,r2,zero
  80b834:	308cb03a 	or	r6,r6,r2
  80b838:	898dc83a 	sub	r6,r17,r6
  80b83c:	89a3803a 	cmpltu	r17,r17,r6
  80b840:	40d1c83a 	sub	r8,r8,r3
  80b844:	4451c83a 	sub	r8,r8,r17
  80b848:	3023883a 	mov	r17,r6
  80b84c:	4080202c 	andhi	r2,r8,128
  80b850:	10002326 	beq	r2,zero,80b8e0 <__adddf3+0x204>
  80b854:	04c02034 	movhi	r19,128
  80b858:	9cffffc4 	addi	r19,r19,-1
  80b85c:	44e6703a 	and	r19,r8,r19
  80b860:	98007626 	beq	r19,zero,80ba3c <__adddf3+0x360>
  80b864:	9809883a 	mov	r4,r19
  80b868:	080dce00 	call	80dce0 <__clzsi2>
  80b86c:	10fffe04 	addi	r3,r2,-8
  80b870:	010007c4 	movi	r4,31
  80b874:	20c07716 	blt	r4,r3,80ba54 <__adddf3+0x378>
  80b878:	00800804 	movi	r2,32
  80b87c:	10c5c83a 	sub	r2,r2,r3
  80b880:	8884d83a 	srl	r2,r17,r2
  80b884:	98d0983a 	sll	r8,r19,r3
  80b888:	88e2983a 	sll	r17,r17,r3
  80b88c:	1204b03a 	or	r2,r2,r8
  80b890:	1c007416 	blt	r3,r16,80ba64 <__adddf3+0x388>
  80b894:	1c21c83a 	sub	r16,r3,r16
  80b898:	82000044 	addi	r8,r16,1
  80b89c:	00c007c4 	movi	r3,31
  80b8a0:	1a009116 	blt	r3,r8,80bae8 <__adddf3+0x40c>
  80b8a4:	00c00804 	movi	r3,32
  80b8a8:	1a07c83a 	sub	r3,r3,r8
  80b8ac:	8a08d83a 	srl	r4,r17,r8
  80b8b0:	88e2983a 	sll	r17,r17,r3
  80b8b4:	10c6983a 	sll	r3,r2,r3
  80b8b8:	1210d83a 	srl	r8,r2,r8
  80b8bc:	8804c03a 	cmpne	r2,r17,zero
  80b8c0:	1906b03a 	or	r3,r3,r4
  80b8c4:	18a2b03a 	or	r17,r3,r2
  80b8c8:	0021883a 	mov	r16,zero
  80b8cc:	003fa206 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80b8d0:	1890b03a 	or	r8,r3,r2
  80b8d4:	40017d26 	beq	r8,zero,80becc <__adddf3+0x7f0>
  80b8d8:	1011883a 	mov	r8,r2
  80b8dc:	1823883a 	mov	r17,r3
  80b8e0:	888001cc 	andi	r2,r17,7
  80b8e4:	103f9e1e 	bne	r2,zero,80b760 <__alt_mem_onchip_mem+0xff803760>
  80b8e8:	4004977a 	slli	r2,r8,29
  80b8ec:	8822d0fa 	srli	r17,r17,3
  80b8f0:	4010d0fa 	srli	r8,r8,3
  80b8f4:	9007883a 	mov	r3,r18
  80b8f8:	1444b03a 	or	r2,r2,r17
  80b8fc:	0101ffc4 	movi	r4,2047
  80b900:	81002426 	beq	r16,r4,80b994 <__adddf3+0x2b8>
  80b904:	8120703a 	and	r16,r16,r4
  80b908:	01000434 	movhi	r4,16
  80b90c:	213fffc4 	addi	r4,r4,-1
  80b910:	4110703a 	and	r8,r8,r4
  80b914:	003fa806 	br	80b7b8 <__alt_mem_onchip_mem+0xff8037b8>
  80b918:	8089c83a 	sub	r4,r16,r2
  80b91c:	01005e0e 	bge	zero,r4,80ba98 <__adddf3+0x3bc>
  80b920:	10002b26 	beq	r2,zero,80b9d0 <__adddf3+0x2f4>
  80b924:	0081ffc4 	movi	r2,2047
  80b928:	80bf8b26 	beq	r16,r2,80b758 <__alt_mem_onchip_mem+0xff803758>
  80b92c:	4a402034 	orhi	r9,r9,128
  80b930:	00800e04 	movi	r2,56
  80b934:	1100a40e 	bge	r2,r4,80bbc8 <__adddf3+0x4ec>
  80b938:	498cb03a 	or	r6,r9,r6
  80b93c:	300ac03a 	cmpne	r5,r6,zero
  80b940:	0013883a 	mov	r9,zero
  80b944:	2c4b883a 	add	r5,r5,r17
  80b948:	2c63803a 	cmpltu	r17,r5,r17
  80b94c:	4a11883a 	add	r8,r9,r8
  80b950:	8a11883a 	add	r8,r17,r8
  80b954:	2823883a 	mov	r17,r5
  80b958:	4080202c 	andhi	r2,r8,128
  80b95c:	103fe026 	beq	r2,zero,80b8e0 <__alt_mem_onchip_mem+0xff8038e0>
  80b960:	84000044 	addi	r16,r16,1
  80b964:	0081ffc4 	movi	r2,2047
  80b968:	8080d226 	beq	r16,r2,80bcb4 <__adddf3+0x5d8>
  80b96c:	00bfe034 	movhi	r2,65408
  80b970:	10bfffc4 	addi	r2,r2,-1
  80b974:	4090703a 	and	r8,r8,r2
  80b978:	880ad07a 	srli	r5,r17,1
  80b97c:	400897fa 	slli	r4,r8,31
  80b980:	88c0004c 	andi	r3,r17,1
  80b984:	28e2b03a 	or	r17,r5,r3
  80b988:	4010d07a 	srli	r8,r8,1
  80b98c:	2462b03a 	or	r17,r4,r17
  80b990:	003f7106 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80b994:	4088b03a 	or	r4,r8,r2
  80b998:	20014526 	beq	r4,zero,80beb0 <__adddf3+0x7d4>
  80b99c:	01000434 	movhi	r4,16
  80b9a0:	42000234 	orhi	r8,r8,8
  80b9a4:	213fffc4 	addi	r4,r4,-1
  80b9a8:	4110703a 	and	r8,r8,r4
  80b9ac:	003f8206 	br	80b7b8 <__alt_mem_onchip_mem+0xff8037b8>
  80b9b0:	18ffffc4 	addi	r3,r3,-1
  80b9b4:	1800491e 	bne	r3,zero,80badc <__adddf3+0x400>
  80b9b8:	898bc83a 	sub	r5,r17,r6
  80b9bc:	8963803a 	cmpltu	r17,r17,r5
  80b9c0:	4251c83a 	sub	r8,r8,r9
  80b9c4:	4451c83a 	sub	r8,r8,r17
  80b9c8:	2823883a 	mov	r17,r5
  80b9cc:	003f9f06 	br	80b84c <__alt_mem_onchip_mem+0xff80384c>
  80b9d0:	4984b03a 	or	r2,r9,r6
  80b9d4:	103f6026 	beq	r2,zero,80b758 <__alt_mem_onchip_mem+0xff803758>
  80b9d8:	213fffc4 	addi	r4,r4,-1
  80b9dc:	2000931e 	bne	r4,zero,80bc2c <__adddf3+0x550>
  80b9e0:	898d883a 	add	r6,r17,r6
  80b9e4:	3463803a 	cmpltu	r17,r6,r17
  80b9e8:	4251883a 	add	r8,r8,r9
  80b9ec:	8a11883a 	add	r8,r17,r8
  80b9f0:	3023883a 	mov	r17,r6
  80b9f4:	003fd806 	br	80b958 <__alt_mem_onchip_mem+0xff803958>
  80b9f8:	1800541e 	bne	r3,zero,80bb4c <__adddf3+0x470>
  80b9fc:	80800044 	addi	r2,r16,1
  80ba00:	1081ffcc 	andi	r2,r2,2047
  80ba04:	00c00044 	movi	r3,1
  80ba08:	1880a00e 	bge	r3,r2,80bc8c <__adddf3+0x5b0>
  80ba0c:	8989c83a 	sub	r4,r17,r6
  80ba10:	8905803a 	cmpltu	r2,r17,r4
  80ba14:	4267c83a 	sub	r19,r8,r9
  80ba18:	98a7c83a 	sub	r19,r19,r2
  80ba1c:	9880202c 	andhi	r2,r19,128
  80ba20:	10006326 	beq	r2,zero,80bbb0 <__adddf3+0x4d4>
  80ba24:	3463c83a 	sub	r17,r6,r17
  80ba28:	4a07c83a 	sub	r3,r9,r8
  80ba2c:	344d803a 	cmpltu	r6,r6,r17
  80ba30:	19a7c83a 	sub	r19,r3,r6
  80ba34:	3825883a 	mov	r18,r7
  80ba38:	983f8a1e 	bne	r19,zero,80b864 <__alt_mem_onchip_mem+0xff803864>
  80ba3c:	8809883a 	mov	r4,r17
  80ba40:	080dce00 	call	80dce0 <__clzsi2>
  80ba44:	10800804 	addi	r2,r2,32
  80ba48:	10fffe04 	addi	r3,r2,-8
  80ba4c:	010007c4 	movi	r4,31
  80ba50:	20ff890e 	bge	r4,r3,80b878 <__alt_mem_onchip_mem+0xff803878>
  80ba54:	10bff604 	addi	r2,r2,-40
  80ba58:	8884983a 	sll	r2,r17,r2
  80ba5c:	0023883a 	mov	r17,zero
  80ba60:	1c3f8c0e 	bge	r3,r16,80b894 <__alt_mem_onchip_mem+0xff803894>
  80ba64:	023fe034 	movhi	r8,65408
  80ba68:	423fffc4 	addi	r8,r8,-1
  80ba6c:	80e1c83a 	sub	r16,r16,r3
  80ba70:	1210703a 	and	r8,r2,r8
  80ba74:	003f3806 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80ba78:	9007883a 	mov	r3,r18
  80ba7c:	0011883a 	mov	r8,zero
  80ba80:	0005883a 	mov	r2,zero
  80ba84:	003f4c06 	br	80b7b8 <__alt_mem_onchip_mem+0xff8037b8>
  80ba88:	498cb03a 	or	r6,r9,r6
  80ba8c:	300cc03a 	cmpne	r6,r6,zero
  80ba90:	0007883a 	mov	r3,zero
  80ba94:	003f6806 	br	80b838 <__alt_mem_onchip_mem+0xff803838>
  80ba98:	20009c1e 	bne	r4,zero,80bd0c <__adddf3+0x630>
  80ba9c:	80800044 	addi	r2,r16,1
  80baa0:	1141ffcc 	andi	r5,r2,2047
  80baa4:	01000044 	movi	r4,1
  80baa8:	2140670e 	bge	r4,r5,80bc48 <__adddf3+0x56c>
  80baac:	0101ffc4 	movi	r4,2047
  80bab0:	11007f26 	beq	r2,r4,80bcb0 <__adddf3+0x5d4>
  80bab4:	898d883a 	add	r6,r17,r6
  80bab8:	4247883a 	add	r3,r8,r9
  80babc:	3451803a 	cmpltu	r8,r6,r17
  80bac0:	40d1883a 	add	r8,r8,r3
  80bac4:	402297fa 	slli	r17,r8,31
  80bac8:	300cd07a 	srli	r6,r6,1
  80bacc:	4010d07a 	srli	r8,r8,1
  80bad0:	1021883a 	mov	r16,r2
  80bad4:	89a2b03a 	or	r17,r17,r6
  80bad8:	003f1f06 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80badc:	0081ffc4 	movi	r2,2047
  80bae0:	80bf481e 	bne	r16,r2,80b804 <__alt_mem_onchip_mem+0xff803804>
  80bae4:	003f1c06 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bae8:	843ff844 	addi	r16,r16,-31
  80baec:	01000804 	movi	r4,32
  80baf0:	1406d83a 	srl	r3,r2,r16
  80baf4:	41005026 	beq	r8,r4,80bc38 <__adddf3+0x55c>
  80baf8:	01001004 	movi	r4,64
  80bafc:	2211c83a 	sub	r8,r4,r8
  80bb00:	1204983a 	sll	r2,r2,r8
  80bb04:	88a2b03a 	or	r17,r17,r2
  80bb08:	8822c03a 	cmpne	r17,r17,zero
  80bb0c:	1c62b03a 	or	r17,r3,r17
  80bb10:	0011883a 	mov	r8,zero
  80bb14:	0021883a 	mov	r16,zero
  80bb18:	003f7106 	br	80b8e0 <__alt_mem_onchip_mem+0xff8038e0>
  80bb1c:	193ff804 	addi	r4,r3,-32
  80bb20:	00800804 	movi	r2,32
  80bb24:	4908d83a 	srl	r4,r9,r4
  80bb28:	18804526 	beq	r3,r2,80bc40 <__adddf3+0x564>
  80bb2c:	00801004 	movi	r2,64
  80bb30:	10c5c83a 	sub	r2,r2,r3
  80bb34:	4886983a 	sll	r3,r9,r2
  80bb38:	198cb03a 	or	r6,r3,r6
  80bb3c:	300cc03a 	cmpne	r6,r6,zero
  80bb40:	218cb03a 	or	r6,r4,r6
  80bb44:	0007883a 	mov	r3,zero
  80bb48:	003f3b06 	br	80b838 <__alt_mem_onchip_mem+0xff803838>
  80bb4c:	80002a26 	beq	r16,zero,80bbf8 <__adddf3+0x51c>
  80bb50:	0101ffc4 	movi	r4,2047
  80bb54:	11006826 	beq	r2,r4,80bcf8 <__adddf3+0x61c>
  80bb58:	00c7c83a 	sub	r3,zero,r3
  80bb5c:	42002034 	orhi	r8,r8,128
  80bb60:	01000e04 	movi	r4,56
  80bb64:	20c07c16 	blt	r4,r3,80bd58 <__adddf3+0x67c>
  80bb68:	010007c4 	movi	r4,31
  80bb6c:	20c0da16 	blt	r4,r3,80bed8 <__adddf3+0x7fc>
  80bb70:	01000804 	movi	r4,32
  80bb74:	20c9c83a 	sub	r4,r4,r3
  80bb78:	4114983a 	sll	r10,r8,r4
  80bb7c:	88cad83a 	srl	r5,r17,r3
  80bb80:	8908983a 	sll	r4,r17,r4
  80bb84:	40c6d83a 	srl	r3,r8,r3
  80bb88:	5162b03a 	or	r17,r10,r5
  80bb8c:	2008c03a 	cmpne	r4,r4,zero
  80bb90:	8922b03a 	or	r17,r17,r4
  80bb94:	3463c83a 	sub	r17,r6,r17
  80bb98:	48c7c83a 	sub	r3,r9,r3
  80bb9c:	344d803a 	cmpltu	r6,r6,r17
  80bba0:	1991c83a 	sub	r8,r3,r6
  80bba4:	1021883a 	mov	r16,r2
  80bba8:	3825883a 	mov	r18,r7
  80bbac:	003f2706 	br	80b84c <__alt_mem_onchip_mem+0xff80384c>
  80bbb0:	24d0b03a 	or	r8,r4,r19
  80bbb4:	40001b1e 	bne	r8,zero,80bc24 <__adddf3+0x548>
  80bbb8:	0005883a 	mov	r2,zero
  80bbbc:	0007883a 	mov	r3,zero
  80bbc0:	0021883a 	mov	r16,zero
  80bbc4:	003f4d06 	br	80b8fc <__alt_mem_onchip_mem+0xff8038fc>
  80bbc8:	008007c4 	movi	r2,31
  80bbcc:	11003c16 	blt	r2,r4,80bcc0 <__adddf3+0x5e4>
  80bbd0:	00800804 	movi	r2,32
  80bbd4:	1105c83a 	sub	r2,r2,r4
  80bbd8:	488e983a 	sll	r7,r9,r2
  80bbdc:	310ad83a 	srl	r5,r6,r4
  80bbe0:	3084983a 	sll	r2,r6,r2
  80bbe4:	4912d83a 	srl	r9,r9,r4
  80bbe8:	394ab03a 	or	r5,r7,r5
  80bbec:	1004c03a 	cmpne	r2,r2,zero
  80bbf0:	288ab03a 	or	r5,r5,r2
  80bbf4:	003f5306 	br	80b944 <__alt_mem_onchip_mem+0xff803944>
  80bbf8:	4448b03a 	or	r4,r8,r17
  80bbfc:	20003e26 	beq	r4,zero,80bcf8 <__adddf3+0x61c>
  80bc00:	00c6303a 	nor	r3,zero,r3
  80bc04:	18003a1e 	bne	r3,zero,80bcf0 <__adddf3+0x614>
  80bc08:	3463c83a 	sub	r17,r6,r17
  80bc0c:	4a07c83a 	sub	r3,r9,r8
  80bc10:	344d803a 	cmpltu	r6,r6,r17
  80bc14:	1991c83a 	sub	r8,r3,r6
  80bc18:	1021883a 	mov	r16,r2
  80bc1c:	3825883a 	mov	r18,r7
  80bc20:	003f0a06 	br	80b84c <__alt_mem_onchip_mem+0xff80384c>
  80bc24:	2023883a 	mov	r17,r4
  80bc28:	003f0d06 	br	80b860 <__alt_mem_onchip_mem+0xff803860>
  80bc2c:	0081ffc4 	movi	r2,2047
  80bc30:	80bf3f1e 	bne	r16,r2,80b930 <__alt_mem_onchip_mem+0xff803930>
  80bc34:	003ec806 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bc38:	0005883a 	mov	r2,zero
  80bc3c:	003fb106 	br	80bb04 <__alt_mem_onchip_mem+0xff803b04>
  80bc40:	0007883a 	mov	r3,zero
  80bc44:	003fbc06 	br	80bb38 <__alt_mem_onchip_mem+0xff803b38>
  80bc48:	4444b03a 	or	r2,r8,r17
  80bc4c:	8000871e 	bne	r16,zero,80be6c <__adddf3+0x790>
  80bc50:	1000ba26 	beq	r2,zero,80bf3c <__adddf3+0x860>
  80bc54:	4984b03a 	or	r2,r9,r6
  80bc58:	103ebf26 	beq	r2,zero,80b758 <__alt_mem_onchip_mem+0xff803758>
  80bc5c:	8985883a 	add	r2,r17,r6
  80bc60:	4247883a 	add	r3,r8,r9
  80bc64:	1451803a 	cmpltu	r8,r2,r17
  80bc68:	40d1883a 	add	r8,r8,r3
  80bc6c:	40c0202c 	andhi	r3,r8,128
  80bc70:	1023883a 	mov	r17,r2
  80bc74:	183f1a26 	beq	r3,zero,80b8e0 <__alt_mem_onchip_mem+0xff8038e0>
  80bc78:	00bfe034 	movhi	r2,65408
  80bc7c:	10bfffc4 	addi	r2,r2,-1
  80bc80:	2021883a 	mov	r16,r4
  80bc84:	4090703a 	and	r8,r8,r2
  80bc88:	003eb306 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bc8c:	4444b03a 	or	r2,r8,r17
  80bc90:	8000291e 	bne	r16,zero,80bd38 <__adddf3+0x65c>
  80bc94:	10004b1e 	bne	r2,zero,80bdc4 <__adddf3+0x6e8>
  80bc98:	4990b03a 	or	r8,r9,r6
  80bc9c:	40008b26 	beq	r8,zero,80becc <__adddf3+0x7f0>
  80bca0:	4811883a 	mov	r8,r9
  80bca4:	3023883a 	mov	r17,r6
  80bca8:	3825883a 	mov	r18,r7
  80bcac:	003eaa06 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bcb0:	1021883a 	mov	r16,r2
  80bcb4:	0011883a 	mov	r8,zero
  80bcb8:	0005883a 	mov	r2,zero
  80bcbc:	003f0f06 	br	80b8fc <__alt_mem_onchip_mem+0xff8038fc>
  80bcc0:	217ff804 	addi	r5,r4,-32
  80bcc4:	00800804 	movi	r2,32
  80bcc8:	494ad83a 	srl	r5,r9,r5
  80bccc:	20807d26 	beq	r4,r2,80bec4 <__adddf3+0x7e8>
  80bcd0:	00801004 	movi	r2,64
  80bcd4:	1109c83a 	sub	r4,r2,r4
  80bcd8:	4912983a 	sll	r9,r9,r4
  80bcdc:	498cb03a 	or	r6,r9,r6
  80bce0:	300cc03a 	cmpne	r6,r6,zero
  80bce4:	298ab03a 	or	r5,r5,r6
  80bce8:	0013883a 	mov	r9,zero
  80bcec:	003f1506 	br	80b944 <__alt_mem_onchip_mem+0xff803944>
  80bcf0:	0101ffc4 	movi	r4,2047
  80bcf4:	113f9a1e 	bne	r2,r4,80bb60 <__alt_mem_onchip_mem+0xff803b60>
  80bcf8:	4811883a 	mov	r8,r9
  80bcfc:	3023883a 	mov	r17,r6
  80bd00:	1021883a 	mov	r16,r2
  80bd04:	3825883a 	mov	r18,r7
  80bd08:	003e9306 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bd0c:	8000161e 	bne	r16,zero,80bd68 <__adddf3+0x68c>
  80bd10:	444ab03a 	or	r5,r8,r17
  80bd14:	28005126 	beq	r5,zero,80be5c <__adddf3+0x780>
  80bd18:	0108303a 	nor	r4,zero,r4
  80bd1c:	20004d1e 	bne	r4,zero,80be54 <__adddf3+0x778>
  80bd20:	89a3883a 	add	r17,r17,r6
  80bd24:	4253883a 	add	r9,r8,r9
  80bd28:	898d803a 	cmpltu	r6,r17,r6
  80bd2c:	3251883a 	add	r8,r6,r9
  80bd30:	1021883a 	mov	r16,r2
  80bd34:	003f0806 	br	80b958 <__alt_mem_onchip_mem+0xff803958>
  80bd38:	1000301e 	bne	r2,zero,80bdfc <__adddf3+0x720>
  80bd3c:	4984b03a 	or	r2,r9,r6
  80bd40:	10007126 	beq	r2,zero,80bf08 <__adddf3+0x82c>
  80bd44:	4811883a 	mov	r8,r9
  80bd48:	3023883a 	mov	r17,r6
  80bd4c:	3825883a 	mov	r18,r7
  80bd50:	0401ffc4 	movi	r16,2047
  80bd54:	003e8006 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bd58:	4462b03a 	or	r17,r8,r17
  80bd5c:	8822c03a 	cmpne	r17,r17,zero
  80bd60:	0007883a 	mov	r3,zero
  80bd64:	003f8b06 	br	80bb94 <__alt_mem_onchip_mem+0xff803b94>
  80bd68:	0141ffc4 	movi	r5,2047
  80bd6c:	11403b26 	beq	r2,r5,80be5c <__adddf3+0x780>
  80bd70:	0109c83a 	sub	r4,zero,r4
  80bd74:	42002034 	orhi	r8,r8,128
  80bd78:	01400e04 	movi	r5,56
  80bd7c:	29006716 	blt	r5,r4,80bf1c <__adddf3+0x840>
  80bd80:	014007c4 	movi	r5,31
  80bd84:	29007016 	blt	r5,r4,80bf48 <__adddf3+0x86c>
  80bd88:	01400804 	movi	r5,32
  80bd8c:	290bc83a 	sub	r5,r5,r4
  80bd90:	4154983a 	sll	r10,r8,r5
  80bd94:	890ed83a 	srl	r7,r17,r4
  80bd98:	894a983a 	sll	r5,r17,r5
  80bd9c:	4108d83a 	srl	r4,r8,r4
  80bda0:	51e2b03a 	or	r17,r10,r7
  80bda4:	280ac03a 	cmpne	r5,r5,zero
  80bda8:	8962b03a 	or	r17,r17,r5
  80bdac:	89a3883a 	add	r17,r17,r6
  80bdb0:	2253883a 	add	r9,r4,r9
  80bdb4:	898d803a 	cmpltu	r6,r17,r6
  80bdb8:	3251883a 	add	r8,r6,r9
  80bdbc:	1021883a 	mov	r16,r2
  80bdc0:	003ee506 	br	80b958 <__alt_mem_onchip_mem+0xff803958>
  80bdc4:	4984b03a 	or	r2,r9,r6
  80bdc8:	103e6326 	beq	r2,zero,80b758 <__alt_mem_onchip_mem+0xff803758>
  80bdcc:	8987c83a 	sub	r3,r17,r6
  80bdd0:	88c9803a 	cmpltu	r4,r17,r3
  80bdd4:	4245c83a 	sub	r2,r8,r9
  80bdd8:	1105c83a 	sub	r2,r2,r4
  80bddc:	1100202c 	andhi	r4,r2,128
  80bde0:	203ebb26 	beq	r4,zero,80b8d0 <__alt_mem_onchip_mem+0xff8038d0>
  80bde4:	3463c83a 	sub	r17,r6,r17
  80bde8:	4a07c83a 	sub	r3,r9,r8
  80bdec:	344d803a 	cmpltu	r6,r6,r17
  80bdf0:	1991c83a 	sub	r8,r3,r6
  80bdf4:	3825883a 	mov	r18,r7
  80bdf8:	003e5706 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bdfc:	4984b03a 	or	r2,r9,r6
  80be00:	10002e26 	beq	r2,zero,80bebc <__adddf3+0x7e0>
  80be04:	4004d0fa 	srli	r2,r8,3
  80be08:	8822d0fa 	srli	r17,r17,3
  80be0c:	4010977a 	slli	r8,r8,29
  80be10:	10c0022c 	andhi	r3,r2,8
  80be14:	4462b03a 	or	r17,r8,r17
  80be18:	18000826 	beq	r3,zero,80be3c <__adddf3+0x760>
  80be1c:	4808d0fa 	srli	r4,r9,3
  80be20:	20c0022c 	andhi	r3,r4,8
  80be24:	1800051e 	bne	r3,zero,80be3c <__adddf3+0x760>
  80be28:	300cd0fa 	srli	r6,r6,3
  80be2c:	4806977a 	slli	r3,r9,29
  80be30:	2005883a 	mov	r2,r4
  80be34:	3825883a 	mov	r18,r7
  80be38:	19a2b03a 	or	r17,r3,r6
  80be3c:	8810d77a 	srli	r8,r17,29
  80be40:	100490fa 	slli	r2,r2,3
  80be44:	882290fa 	slli	r17,r17,3
  80be48:	0401ffc4 	movi	r16,2047
  80be4c:	4090b03a 	or	r8,r8,r2
  80be50:	003e4106 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80be54:	0141ffc4 	movi	r5,2047
  80be58:	117fc71e 	bne	r2,r5,80bd78 <__alt_mem_onchip_mem+0xff803d78>
  80be5c:	4811883a 	mov	r8,r9
  80be60:	3023883a 	mov	r17,r6
  80be64:	1021883a 	mov	r16,r2
  80be68:	003e3b06 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80be6c:	10002f26 	beq	r2,zero,80bf2c <__adddf3+0x850>
  80be70:	4984b03a 	or	r2,r9,r6
  80be74:	10001126 	beq	r2,zero,80bebc <__adddf3+0x7e0>
  80be78:	4004d0fa 	srli	r2,r8,3
  80be7c:	8822d0fa 	srli	r17,r17,3
  80be80:	4010977a 	slli	r8,r8,29
  80be84:	10c0022c 	andhi	r3,r2,8
  80be88:	4462b03a 	or	r17,r8,r17
  80be8c:	183feb26 	beq	r3,zero,80be3c <__alt_mem_onchip_mem+0xff803e3c>
  80be90:	4808d0fa 	srli	r4,r9,3
  80be94:	20c0022c 	andhi	r3,r4,8
  80be98:	183fe81e 	bne	r3,zero,80be3c <__alt_mem_onchip_mem+0xff803e3c>
  80be9c:	300cd0fa 	srli	r6,r6,3
  80bea0:	4806977a 	slli	r3,r9,29
  80bea4:	2005883a 	mov	r2,r4
  80bea8:	19a2b03a 	or	r17,r3,r6
  80beac:	003fe306 	br	80be3c <__alt_mem_onchip_mem+0xff803e3c>
  80beb0:	0011883a 	mov	r8,zero
  80beb4:	0005883a 	mov	r2,zero
  80beb8:	003e3f06 	br	80b7b8 <__alt_mem_onchip_mem+0xff8037b8>
  80bebc:	0401ffc4 	movi	r16,2047
  80bec0:	003e2506 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bec4:	0013883a 	mov	r9,zero
  80bec8:	003f8406 	br	80bcdc <__alt_mem_onchip_mem+0xff803cdc>
  80becc:	0005883a 	mov	r2,zero
  80bed0:	0007883a 	mov	r3,zero
  80bed4:	003e8906 	br	80b8fc <__alt_mem_onchip_mem+0xff8038fc>
  80bed8:	197ff804 	addi	r5,r3,-32
  80bedc:	01000804 	movi	r4,32
  80bee0:	414ad83a 	srl	r5,r8,r5
  80bee4:	19002426 	beq	r3,r4,80bf78 <__adddf3+0x89c>
  80bee8:	01001004 	movi	r4,64
  80beec:	20c7c83a 	sub	r3,r4,r3
  80bef0:	40c6983a 	sll	r3,r8,r3
  80bef4:	1c46b03a 	or	r3,r3,r17
  80bef8:	1806c03a 	cmpne	r3,r3,zero
  80befc:	28e2b03a 	or	r17,r5,r3
  80bf00:	0007883a 	mov	r3,zero
  80bf04:	003f2306 	br	80bb94 <__alt_mem_onchip_mem+0xff803b94>
  80bf08:	0007883a 	mov	r3,zero
  80bf0c:	5811883a 	mov	r8,r11
  80bf10:	00bfffc4 	movi	r2,-1
  80bf14:	0401ffc4 	movi	r16,2047
  80bf18:	003e7806 	br	80b8fc <__alt_mem_onchip_mem+0xff8038fc>
  80bf1c:	4462b03a 	or	r17,r8,r17
  80bf20:	8822c03a 	cmpne	r17,r17,zero
  80bf24:	0009883a 	mov	r4,zero
  80bf28:	003fa006 	br	80bdac <__alt_mem_onchip_mem+0xff803dac>
  80bf2c:	4811883a 	mov	r8,r9
  80bf30:	3023883a 	mov	r17,r6
  80bf34:	0401ffc4 	movi	r16,2047
  80bf38:	003e0706 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bf3c:	4811883a 	mov	r8,r9
  80bf40:	3023883a 	mov	r17,r6
  80bf44:	003e0406 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80bf48:	21fff804 	addi	r7,r4,-32
  80bf4c:	01400804 	movi	r5,32
  80bf50:	41ced83a 	srl	r7,r8,r7
  80bf54:	21400a26 	beq	r4,r5,80bf80 <__adddf3+0x8a4>
  80bf58:	01401004 	movi	r5,64
  80bf5c:	2909c83a 	sub	r4,r5,r4
  80bf60:	4108983a 	sll	r4,r8,r4
  80bf64:	2448b03a 	or	r4,r4,r17
  80bf68:	2008c03a 	cmpne	r4,r4,zero
  80bf6c:	3922b03a 	or	r17,r7,r4
  80bf70:	0009883a 	mov	r4,zero
  80bf74:	003f8d06 	br	80bdac <__alt_mem_onchip_mem+0xff803dac>
  80bf78:	0007883a 	mov	r3,zero
  80bf7c:	003fdd06 	br	80bef4 <__alt_mem_onchip_mem+0xff803ef4>
  80bf80:	0009883a 	mov	r4,zero
  80bf84:	003ff706 	br	80bf64 <__alt_mem_onchip_mem+0xff803f64>

0080bf88 <__divdf3>:
  80bf88:	defff204 	addi	sp,sp,-56
  80bf8c:	dd400915 	stw	r21,36(sp)
  80bf90:	282ad53a 	srli	r21,r5,20
  80bf94:	dd000815 	stw	r20,32(sp)
  80bf98:	2828d7fa 	srli	r20,r5,31
  80bf9c:	dc000415 	stw	r16,16(sp)
  80bfa0:	04000434 	movhi	r16,16
  80bfa4:	df000c15 	stw	fp,48(sp)
  80bfa8:	843fffc4 	addi	r16,r16,-1
  80bfac:	dfc00d15 	stw	ra,52(sp)
  80bfb0:	ddc00b15 	stw	r23,44(sp)
  80bfb4:	dd800a15 	stw	r22,40(sp)
  80bfb8:	dcc00715 	stw	r19,28(sp)
  80bfbc:	dc800615 	stw	r18,24(sp)
  80bfc0:	dc400515 	stw	r17,20(sp)
  80bfc4:	ad41ffcc 	andi	r21,r21,2047
  80bfc8:	2c20703a 	and	r16,r5,r16
  80bfcc:	a7003fcc 	andi	fp,r20,255
  80bfd0:	a8006126 	beq	r21,zero,80c158 <__divdf3+0x1d0>
  80bfd4:	0081ffc4 	movi	r2,2047
  80bfd8:	2025883a 	mov	r18,r4
  80bfdc:	a8803726 	beq	r21,r2,80c0bc <__divdf3+0x134>
  80bfe0:	80800434 	orhi	r2,r16,16
  80bfe4:	100490fa 	slli	r2,r2,3
  80bfe8:	2020d77a 	srli	r16,r4,29
  80bfec:	202490fa 	slli	r18,r4,3
  80bff0:	ad7f0044 	addi	r21,r21,-1023
  80bff4:	80a0b03a 	or	r16,r16,r2
  80bff8:	0027883a 	mov	r19,zero
  80bffc:	0013883a 	mov	r9,zero
  80c000:	3804d53a 	srli	r2,r7,20
  80c004:	382cd7fa 	srli	r22,r7,31
  80c008:	04400434 	movhi	r17,16
  80c00c:	8c7fffc4 	addi	r17,r17,-1
  80c010:	1081ffcc 	andi	r2,r2,2047
  80c014:	3011883a 	mov	r8,r6
  80c018:	3c62703a 	and	r17,r7,r17
  80c01c:	b5c03fcc 	andi	r23,r22,255
  80c020:	10006c26 	beq	r2,zero,80c1d4 <__divdf3+0x24c>
  80c024:	00c1ffc4 	movi	r3,2047
  80c028:	10c06426 	beq	r2,r3,80c1bc <__divdf3+0x234>
  80c02c:	88c00434 	orhi	r3,r17,16
  80c030:	180690fa 	slli	r3,r3,3
  80c034:	3022d77a 	srli	r17,r6,29
  80c038:	301090fa 	slli	r8,r6,3
  80c03c:	10bf0044 	addi	r2,r2,-1023
  80c040:	88e2b03a 	or	r17,r17,r3
  80c044:	000f883a 	mov	r7,zero
  80c048:	a58cf03a 	xor	r6,r20,r22
  80c04c:	3cc8b03a 	or	r4,r7,r19
  80c050:	a8abc83a 	sub	r21,r21,r2
  80c054:	008003c4 	movi	r2,15
  80c058:	3007883a 	mov	r3,r6
  80c05c:	34c03fcc 	andi	r19,r6,255
  80c060:	11009036 	bltu	r2,r4,80c2a4 <__divdf3+0x31c>
  80c064:	200890ba 	slli	r4,r4,2
  80c068:	00802074 	movhi	r2,129
  80c06c:	10b01f04 	addi	r2,r2,-16260
  80c070:	2089883a 	add	r4,r4,r2
  80c074:	20800017 	ldw	r2,0(r4)
  80c078:	1000683a 	jmp	r2
  80c07c:	0080c2a4 	muli	r2,zero,778
  80c080:	0080c0f4 	movhi	r2,771
  80c084:	0080c294 	movui	r2,778
  80c088:	0080c0e8 	cmpgeui	r2,zero,771
  80c08c:	0080c294 	movui	r2,778
  80c090:	0080c268 	cmpgeui	r2,zero,777
  80c094:	0080c294 	movui	r2,778
  80c098:	0080c0e8 	cmpgeui	r2,zero,771
  80c09c:	0080c0f4 	movhi	r2,771
  80c0a0:	0080c0f4 	movhi	r2,771
  80c0a4:	0080c268 	cmpgeui	r2,zero,777
  80c0a8:	0080c0e8 	cmpgeui	r2,zero,771
  80c0ac:	0080c0d8 	cmpnei	r2,zero,771
  80c0b0:	0080c0d8 	cmpnei	r2,zero,771
  80c0b4:	0080c0d8 	cmpnei	r2,zero,771
  80c0b8:	0080c588 	cmpgei	r2,zero,790
  80c0bc:	2404b03a 	or	r2,r4,r16
  80c0c0:	1000661e 	bne	r2,zero,80c25c <__divdf3+0x2d4>
  80c0c4:	04c00204 	movi	r19,8
  80c0c8:	0021883a 	mov	r16,zero
  80c0cc:	0025883a 	mov	r18,zero
  80c0d0:	02400084 	movi	r9,2
  80c0d4:	003fca06 	br	80c000 <__alt_mem_onchip_mem+0xff804000>
  80c0d8:	8023883a 	mov	r17,r16
  80c0dc:	9011883a 	mov	r8,r18
  80c0e0:	e02f883a 	mov	r23,fp
  80c0e4:	480f883a 	mov	r7,r9
  80c0e8:	00800084 	movi	r2,2
  80c0ec:	3881311e 	bne	r7,r2,80c5b4 <__divdf3+0x62c>
  80c0f0:	b827883a 	mov	r19,r23
  80c0f4:	98c0004c 	andi	r3,r19,1
  80c0f8:	0081ffc4 	movi	r2,2047
  80c0fc:	000b883a 	mov	r5,zero
  80c100:	0025883a 	mov	r18,zero
  80c104:	1004953a 	slli	r2,r2,20
  80c108:	18c03fcc 	andi	r3,r3,255
  80c10c:	04400434 	movhi	r17,16
  80c110:	8c7fffc4 	addi	r17,r17,-1
  80c114:	180697fa 	slli	r3,r3,31
  80c118:	2c4a703a 	and	r5,r5,r17
  80c11c:	288ab03a 	or	r5,r5,r2
  80c120:	28c6b03a 	or	r3,r5,r3
  80c124:	9005883a 	mov	r2,r18
  80c128:	dfc00d17 	ldw	ra,52(sp)
  80c12c:	df000c17 	ldw	fp,48(sp)
  80c130:	ddc00b17 	ldw	r23,44(sp)
  80c134:	dd800a17 	ldw	r22,40(sp)
  80c138:	dd400917 	ldw	r21,36(sp)
  80c13c:	dd000817 	ldw	r20,32(sp)
  80c140:	dcc00717 	ldw	r19,28(sp)
  80c144:	dc800617 	ldw	r18,24(sp)
  80c148:	dc400517 	ldw	r17,20(sp)
  80c14c:	dc000417 	ldw	r16,16(sp)
  80c150:	dec00e04 	addi	sp,sp,56
  80c154:	f800283a 	ret
  80c158:	2404b03a 	or	r2,r4,r16
  80c15c:	2027883a 	mov	r19,r4
  80c160:	10003926 	beq	r2,zero,80c248 <__divdf3+0x2c0>
  80c164:	80012e26 	beq	r16,zero,80c620 <__divdf3+0x698>
  80c168:	8009883a 	mov	r4,r16
  80c16c:	d9800315 	stw	r6,12(sp)
  80c170:	d9c00215 	stw	r7,8(sp)
  80c174:	080dce00 	call	80dce0 <__clzsi2>
  80c178:	d9800317 	ldw	r6,12(sp)
  80c17c:	d9c00217 	ldw	r7,8(sp)
  80c180:	113ffd44 	addi	r4,r2,-11
  80c184:	00c00704 	movi	r3,28
  80c188:	19012116 	blt	r3,r4,80c610 <__divdf3+0x688>
  80c18c:	00c00744 	movi	r3,29
  80c190:	147ffe04 	addi	r17,r2,-8
  80c194:	1907c83a 	sub	r3,r3,r4
  80c198:	8460983a 	sll	r16,r16,r17
  80c19c:	98c6d83a 	srl	r3,r19,r3
  80c1a0:	9c64983a 	sll	r18,r19,r17
  80c1a4:	1c20b03a 	or	r16,r3,r16
  80c1a8:	1080fcc4 	addi	r2,r2,1011
  80c1ac:	00abc83a 	sub	r21,zero,r2
  80c1b0:	0027883a 	mov	r19,zero
  80c1b4:	0013883a 	mov	r9,zero
  80c1b8:	003f9106 	br	80c000 <__alt_mem_onchip_mem+0xff804000>
  80c1bc:	3446b03a 	or	r3,r6,r17
  80c1c0:	18001f1e 	bne	r3,zero,80c240 <__divdf3+0x2b8>
  80c1c4:	0023883a 	mov	r17,zero
  80c1c8:	0011883a 	mov	r8,zero
  80c1cc:	01c00084 	movi	r7,2
  80c1d0:	003f9d06 	br	80c048 <__alt_mem_onchip_mem+0xff804048>
  80c1d4:	3446b03a 	or	r3,r6,r17
  80c1d8:	18001526 	beq	r3,zero,80c230 <__divdf3+0x2a8>
  80c1dc:	88011b26 	beq	r17,zero,80c64c <__divdf3+0x6c4>
  80c1e0:	8809883a 	mov	r4,r17
  80c1e4:	d9800315 	stw	r6,12(sp)
  80c1e8:	da400115 	stw	r9,4(sp)
  80c1ec:	080dce00 	call	80dce0 <__clzsi2>
  80c1f0:	d9800317 	ldw	r6,12(sp)
  80c1f4:	da400117 	ldw	r9,4(sp)
  80c1f8:	113ffd44 	addi	r4,r2,-11
  80c1fc:	00c00704 	movi	r3,28
  80c200:	19010e16 	blt	r3,r4,80c63c <__divdf3+0x6b4>
  80c204:	00c00744 	movi	r3,29
  80c208:	123ffe04 	addi	r8,r2,-8
  80c20c:	1907c83a 	sub	r3,r3,r4
  80c210:	8a22983a 	sll	r17,r17,r8
  80c214:	30c6d83a 	srl	r3,r6,r3
  80c218:	3210983a 	sll	r8,r6,r8
  80c21c:	1c62b03a 	or	r17,r3,r17
  80c220:	1080fcc4 	addi	r2,r2,1011
  80c224:	0085c83a 	sub	r2,zero,r2
  80c228:	000f883a 	mov	r7,zero
  80c22c:	003f8606 	br	80c048 <__alt_mem_onchip_mem+0xff804048>
  80c230:	0023883a 	mov	r17,zero
  80c234:	0011883a 	mov	r8,zero
  80c238:	01c00044 	movi	r7,1
  80c23c:	003f8206 	br	80c048 <__alt_mem_onchip_mem+0xff804048>
  80c240:	01c000c4 	movi	r7,3
  80c244:	003f8006 	br	80c048 <__alt_mem_onchip_mem+0xff804048>
  80c248:	04c00104 	movi	r19,4
  80c24c:	0021883a 	mov	r16,zero
  80c250:	0025883a 	mov	r18,zero
  80c254:	02400044 	movi	r9,1
  80c258:	003f6906 	br	80c000 <__alt_mem_onchip_mem+0xff804000>
  80c25c:	04c00304 	movi	r19,12
  80c260:	024000c4 	movi	r9,3
  80c264:	003f6606 	br	80c000 <__alt_mem_onchip_mem+0xff804000>
  80c268:	01400434 	movhi	r5,16
  80c26c:	0007883a 	mov	r3,zero
  80c270:	297fffc4 	addi	r5,r5,-1
  80c274:	04bfffc4 	movi	r18,-1
  80c278:	0081ffc4 	movi	r2,2047
  80c27c:	003fa106 	br	80c104 <__alt_mem_onchip_mem+0xff804104>
  80c280:	00c00044 	movi	r3,1
  80c284:	1887c83a 	sub	r3,r3,r2
  80c288:	01000e04 	movi	r4,56
  80c28c:	20c1210e 	bge	r4,r3,80c714 <__divdf3+0x78c>
  80c290:	98c0004c 	andi	r3,r19,1
  80c294:	0005883a 	mov	r2,zero
  80c298:	000b883a 	mov	r5,zero
  80c29c:	0025883a 	mov	r18,zero
  80c2a0:	003f9806 	br	80c104 <__alt_mem_onchip_mem+0xff804104>
  80c2a4:	8c00fd36 	bltu	r17,r16,80c69c <__divdf3+0x714>
  80c2a8:	8440fb26 	beq	r16,r17,80c698 <__divdf3+0x710>
  80c2ac:	8007883a 	mov	r3,r16
  80c2b0:	ad7fffc4 	addi	r21,r21,-1
  80c2b4:	0021883a 	mov	r16,zero
  80c2b8:	4004d63a 	srli	r2,r8,24
  80c2bc:	8822923a 	slli	r17,r17,8
  80c2c0:	1809883a 	mov	r4,r3
  80c2c4:	402c923a 	slli	r22,r8,8
  80c2c8:	88b8b03a 	or	fp,r17,r2
  80c2cc:	e028d43a 	srli	r20,fp,16
  80c2d0:	d8c00015 	stw	r3,0(sp)
  80c2d4:	e5ffffcc 	andi	r23,fp,65535
  80c2d8:	a00b883a 	mov	r5,r20
  80c2dc:	0800b9c0 	call	800b9c <__udivsi3>
  80c2e0:	d8c00017 	ldw	r3,0(sp)
  80c2e4:	a00b883a 	mov	r5,r20
  80c2e8:	d8800315 	stw	r2,12(sp)
  80c2ec:	1809883a 	mov	r4,r3
  80c2f0:	0800c000 	call	800c00 <__umodsi3>
  80c2f4:	d9800317 	ldw	r6,12(sp)
  80c2f8:	1006943a 	slli	r3,r2,16
  80c2fc:	9004d43a 	srli	r2,r18,16
  80c300:	b9a3383a 	mul	r17,r23,r6
  80c304:	10c4b03a 	or	r2,r2,r3
  80c308:	1440062e 	bgeu	r2,r17,80c324 <__divdf3+0x39c>
  80c30c:	1705883a 	add	r2,r2,fp
  80c310:	30ffffc4 	addi	r3,r6,-1
  80c314:	1700ee36 	bltu	r2,fp,80c6d0 <__divdf3+0x748>
  80c318:	1440ed2e 	bgeu	r2,r17,80c6d0 <__divdf3+0x748>
  80c31c:	31bfff84 	addi	r6,r6,-2
  80c320:	1705883a 	add	r2,r2,fp
  80c324:	1463c83a 	sub	r17,r2,r17
  80c328:	a00b883a 	mov	r5,r20
  80c32c:	8809883a 	mov	r4,r17
  80c330:	d9800315 	stw	r6,12(sp)
  80c334:	0800b9c0 	call	800b9c <__udivsi3>
  80c338:	a00b883a 	mov	r5,r20
  80c33c:	8809883a 	mov	r4,r17
  80c340:	d8800215 	stw	r2,8(sp)
  80c344:	0800c000 	call	800c00 <__umodsi3>
  80c348:	d9c00217 	ldw	r7,8(sp)
  80c34c:	1004943a 	slli	r2,r2,16
  80c350:	94bfffcc 	andi	r18,r18,65535
  80c354:	b9d1383a 	mul	r8,r23,r7
  80c358:	90a4b03a 	or	r18,r18,r2
  80c35c:	d9800317 	ldw	r6,12(sp)
  80c360:	9200062e 	bgeu	r18,r8,80c37c <__divdf3+0x3f4>
  80c364:	9725883a 	add	r18,r18,fp
  80c368:	38bfffc4 	addi	r2,r7,-1
  80c36c:	9700d636 	bltu	r18,fp,80c6c8 <__divdf3+0x740>
  80c370:	9200d52e 	bgeu	r18,r8,80c6c8 <__divdf3+0x740>
  80c374:	39ffff84 	addi	r7,r7,-2
  80c378:	9725883a 	add	r18,r18,fp
  80c37c:	3004943a 	slli	r2,r6,16
  80c380:	b012d43a 	srli	r9,r22,16
  80c384:	b1bfffcc 	andi	r6,r22,65535
  80c388:	11e2b03a 	or	r17,r2,r7
  80c38c:	8806d43a 	srli	r3,r17,16
  80c390:	893fffcc 	andi	r4,r17,65535
  80c394:	218b383a 	mul	r5,r4,r6
  80c398:	30c5383a 	mul	r2,r6,r3
  80c39c:	2249383a 	mul	r4,r4,r9
  80c3a0:	280ed43a 	srli	r7,r5,16
  80c3a4:	9225c83a 	sub	r18,r18,r8
  80c3a8:	2089883a 	add	r4,r4,r2
  80c3ac:	3909883a 	add	r4,r7,r4
  80c3b0:	1a47383a 	mul	r3,r3,r9
  80c3b4:	2080022e 	bgeu	r4,r2,80c3c0 <__divdf3+0x438>
  80c3b8:	00800074 	movhi	r2,1
  80c3bc:	1887883a 	add	r3,r3,r2
  80c3c0:	2004d43a 	srli	r2,r4,16
  80c3c4:	2008943a 	slli	r4,r4,16
  80c3c8:	297fffcc 	andi	r5,r5,65535
  80c3cc:	10c7883a 	add	r3,r2,r3
  80c3d0:	2149883a 	add	r4,r4,r5
  80c3d4:	90c0a536 	bltu	r18,r3,80c66c <__divdf3+0x6e4>
  80c3d8:	90c0bf26 	beq	r18,r3,80c6d8 <__divdf3+0x750>
  80c3dc:	90c7c83a 	sub	r3,r18,r3
  80c3e0:	810fc83a 	sub	r7,r16,r4
  80c3e4:	81e5803a 	cmpltu	r18,r16,r7
  80c3e8:	1ca5c83a 	sub	r18,r3,r18
  80c3ec:	e480c126 	beq	fp,r18,80c6f4 <__divdf3+0x76c>
  80c3f0:	a00b883a 	mov	r5,r20
  80c3f4:	9009883a 	mov	r4,r18
  80c3f8:	d9800315 	stw	r6,12(sp)
  80c3fc:	d9c00215 	stw	r7,8(sp)
  80c400:	da400115 	stw	r9,4(sp)
  80c404:	0800b9c0 	call	800b9c <__udivsi3>
  80c408:	a00b883a 	mov	r5,r20
  80c40c:	9009883a 	mov	r4,r18
  80c410:	d8800015 	stw	r2,0(sp)
  80c414:	0800c000 	call	800c00 <__umodsi3>
  80c418:	d9c00217 	ldw	r7,8(sp)
  80c41c:	da000017 	ldw	r8,0(sp)
  80c420:	1006943a 	slli	r3,r2,16
  80c424:	3804d43a 	srli	r2,r7,16
  80c428:	ba21383a 	mul	r16,r23,r8
  80c42c:	d9800317 	ldw	r6,12(sp)
  80c430:	10c4b03a 	or	r2,r2,r3
  80c434:	da400117 	ldw	r9,4(sp)
  80c438:	1400062e 	bgeu	r2,r16,80c454 <__divdf3+0x4cc>
  80c43c:	1705883a 	add	r2,r2,fp
  80c440:	40ffffc4 	addi	r3,r8,-1
  80c444:	1700ad36 	bltu	r2,fp,80c6fc <__divdf3+0x774>
  80c448:	1400ac2e 	bgeu	r2,r16,80c6fc <__divdf3+0x774>
  80c44c:	423fff84 	addi	r8,r8,-2
  80c450:	1705883a 	add	r2,r2,fp
  80c454:	1421c83a 	sub	r16,r2,r16
  80c458:	a00b883a 	mov	r5,r20
  80c45c:	8009883a 	mov	r4,r16
  80c460:	d9800315 	stw	r6,12(sp)
  80c464:	d9c00215 	stw	r7,8(sp)
  80c468:	da000015 	stw	r8,0(sp)
  80c46c:	da400115 	stw	r9,4(sp)
  80c470:	0800b9c0 	call	800b9c <__udivsi3>
  80c474:	8009883a 	mov	r4,r16
  80c478:	a00b883a 	mov	r5,r20
  80c47c:	1025883a 	mov	r18,r2
  80c480:	0800c000 	call	800c00 <__umodsi3>
  80c484:	d9c00217 	ldw	r7,8(sp)
  80c488:	1004943a 	slli	r2,r2,16
  80c48c:	bcaf383a 	mul	r23,r23,r18
  80c490:	393fffcc 	andi	r4,r7,65535
  80c494:	2088b03a 	or	r4,r4,r2
  80c498:	d9800317 	ldw	r6,12(sp)
  80c49c:	da000017 	ldw	r8,0(sp)
  80c4a0:	da400117 	ldw	r9,4(sp)
  80c4a4:	25c0062e 	bgeu	r4,r23,80c4c0 <__divdf3+0x538>
  80c4a8:	2709883a 	add	r4,r4,fp
  80c4ac:	90bfffc4 	addi	r2,r18,-1
  80c4b0:	27009436 	bltu	r4,fp,80c704 <__divdf3+0x77c>
  80c4b4:	25c0932e 	bgeu	r4,r23,80c704 <__divdf3+0x77c>
  80c4b8:	94bfff84 	addi	r18,r18,-2
  80c4bc:	2709883a 	add	r4,r4,fp
  80c4c0:	4004943a 	slli	r2,r8,16
  80c4c4:	25efc83a 	sub	r23,r4,r23
  80c4c8:	1490b03a 	or	r8,r2,r18
  80c4cc:	4008d43a 	srli	r4,r8,16
  80c4d0:	40ffffcc 	andi	r3,r8,65535
  80c4d4:	30c5383a 	mul	r2,r6,r3
  80c4d8:	1a47383a 	mul	r3,r3,r9
  80c4dc:	310d383a 	mul	r6,r6,r4
  80c4e0:	100ad43a 	srli	r5,r2,16
  80c4e4:	4913383a 	mul	r9,r9,r4
  80c4e8:	1987883a 	add	r3,r3,r6
  80c4ec:	28c7883a 	add	r3,r5,r3
  80c4f0:	1980022e 	bgeu	r3,r6,80c4fc <__divdf3+0x574>
  80c4f4:	01000074 	movhi	r4,1
  80c4f8:	4913883a 	add	r9,r9,r4
  80c4fc:	1808d43a 	srli	r4,r3,16
  80c500:	1806943a 	slli	r3,r3,16
  80c504:	10bfffcc 	andi	r2,r2,65535
  80c508:	2253883a 	add	r9,r4,r9
  80c50c:	1887883a 	add	r3,r3,r2
  80c510:	ba403836 	bltu	r23,r9,80c5f4 <__divdf3+0x66c>
  80c514:	ba403626 	beq	r23,r9,80c5f0 <__divdf3+0x668>
  80c518:	42000054 	ori	r8,r8,1
  80c51c:	a880ffc4 	addi	r2,r21,1023
  80c520:	00bf570e 	bge	zero,r2,80c280 <__alt_mem_onchip_mem+0xff804280>
  80c524:	40c001cc 	andi	r3,r8,7
  80c528:	18000726 	beq	r3,zero,80c548 <__divdf3+0x5c0>
  80c52c:	40c003cc 	andi	r3,r8,15
  80c530:	01000104 	movi	r4,4
  80c534:	19000426 	beq	r3,r4,80c548 <__divdf3+0x5c0>
  80c538:	4107883a 	add	r3,r8,r4
  80c53c:	1a11803a 	cmpltu	r8,r3,r8
  80c540:	8a23883a 	add	r17,r17,r8
  80c544:	1811883a 	mov	r8,r3
  80c548:	88c0402c 	andhi	r3,r17,256
  80c54c:	18000426 	beq	r3,zero,80c560 <__divdf3+0x5d8>
  80c550:	00ffc034 	movhi	r3,65280
  80c554:	18ffffc4 	addi	r3,r3,-1
  80c558:	a8810004 	addi	r2,r21,1024
  80c55c:	88e2703a 	and	r17,r17,r3
  80c560:	00c1ff84 	movi	r3,2046
  80c564:	18bee316 	blt	r3,r2,80c0f4 <__alt_mem_onchip_mem+0xff8040f4>
  80c568:	8824977a 	slli	r18,r17,29
  80c56c:	4010d0fa 	srli	r8,r8,3
  80c570:	8822927a 	slli	r17,r17,9
  80c574:	1081ffcc 	andi	r2,r2,2047
  80c578:	9224b03a 	or	r18,r18,r8
  80c57c:	880ad33a 	srli	r5,r17,12
  80c580:	98c0004c 	andi	r3,r19,1
  80c584:	003edf06 	br	80c104 <__alt_mem_onchip_mem+0xff804104>
  80c588:	8080022c 	andhi	r2,r16,8
  80c58c:	10001226 	beq	r2,zero,80c5d8 <__divdf3+0x650>
  80c590:	8880022c 	andhi	r2,r17,8
  80c594:	1000101e 	bne	r2,zero,80c5d8 <__divdf3+0x650>
  80c598:	00800434 	movhi	r2,16
  80c59c:	89400234 	orhi	r5,r17,8
  80c5a0:	10bfffc4 	addi	r2,r2,-1
  80c5a4:	b007883a 	mov	r3,r22
  80c5a8:	288a703a 	and	r5,r5,r2
  80c5ac:	4025883a 	mov	r18,r8
  80c5b0:	003f3106 	br	80c278 <__alt_mem_onchip_mem+0xff804278>
  80c5b4:	008000c4 	movi	r2,3
  80c5b8:	3880a626 	beq	r7,r2,80c854 <__divdf3+0x8cc>
  80c5bc:	00800044 	movi	r2,1
  80c5c0:	3880521e 	bne	r7,r2,80c70c <__divdf3+0x784>
  80c5c4:	b807883a 	mov	r3,r23
  80c5c8:	0005883a 	mov	r2,zero
  80c5cc:	000b883a 	mov	r5,zero
  80c5d0:	0025883a 	mov	r18,zero
  80c5d4:	003ecb06 	br	80c104 <__alt_mem_onchip_mem+0xff804104>
  80c5d8:	00800434 	movhi	r2,16
  80c5dc:	81400234 	orhi	r5,r16,8
  80c5e0:	10bfffc4 	addi	r2,r2,-1
  80c5e4:	a007883a 	mov	r3,r20
  80c5e8:	288a703a 	and	r5,r5,r2
  80c5ec:	003f2206 	br	80c278 <__alt_mem_onchip_mem+0xff804278>
  80c5f0:	183fca26 	beq	r3,zero,80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c5f4:	e5ef883a 	add	r23,fp,r23
  80c5f8:	40bfffc4 	addi	r2,r8,-1
  80c5fc:	bf00392e 	bgeu	r23,fp,80c6e4 <__divdf3+0x75c>
  80c600:	1011883a 	mov	r8,r2
  80c604:	ba7fc41e 	bne	r23,r9,80c518 <__alt_mem_onchip_mem+0xff804518>
  80c608:	b0ffc31e 	bne	r22,r3,80c518 <__alt_mem_onchip_mem+0xff804518>
  80c60c:	003fc306 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c610:	143ff604 	addi	r16,r2,-40
  80c614:	9c20983a 	sll	r16,r19,r16
  80c618:	0025883a 	mov	r18,zero
  80c61c:	003ee206 	br	80c1a8 <__alt_mem_onchip_mem+0xff8041a8>
  80c620:	d9800315 	stw	r6,12(sp)
  80c624:	d9c00215 	stw	r7,8(sp)
  80c628:	080dce00 	call	80dce0 <__clzsi2>
  80c62c:	10800804 	addi	r2,r2,32
  80c630:	d9c00217 	ldw	r7,8(sp)
  80c634:	d9800317 	ldw	r6,12(sp)
  80c638:	003ed106 	br	80c180 <__alt_mem_onchip_mem+0xff804180>
  80c63c:	147ff604 	addi	r17,r2,-40
  80c640:	3462983a 	sll	r17,r6,r17
  80c644:	0011883a 	mov	r8,zero
  80c648:	003ef506 	br	80c220 <__alt_mem_onchip_mem+0xff804220>
  80c64c:	3009883a 	mov	r4,r6
  80c650:	d9800315 	stw	r6,12(sp)
  80c654:	da400115 	stw	r9,4(sp)
  80c658:	080dce00 	call	80dce0 <__clzsi2>
  80c65c:	10800804 	addi	r2,r2,32
  80c660:	da400117 	ldw	r9,4(sp)
  80c664:	d9800317 	ldw	r6,12(sp)
  80c668:	003ee306 	br	80c1f8 <__alt_mem_onchip_mem+0xff8041f8>
  80c66c:	85a1883a 	add	r16,r16,r22
  80c670:	8585803a 	cmpltu	r2,r16,r22
  80c674:	1705883a 	add	r2,r2,fp
  80c678:	14a5883a 	add	r18,r2,r18
  80c67c:	88bfffc4 	addi	r2,r17,-1
  80c680:	e4800c2e 	bgeu	fp,r18,80c6b4 <__divdf3+0x72c>
  80c684:	90c03e36 	bltu	r18,r3,80c780 <__divdf3+0x7f8>
  80c688:	1c806926 	beq	r3,r18,80c830 <__divdf3+0x8a8>
  80c68c:	90c7c83a 	sub	r3,r18,r3
  80c690:	1023883a 	mov	r17,r2
  80c694:	003f5206 	br	80c3e0 <__alt_mem_onchip_mem+0xff8043e0>
  80c698:	923f0436 	bltu	r18,r8,80c2ac <__alt_mem_onchip_mem+0xff8042ac>
  80c69c:	800897fa 	slli	r4,r16,31
  80c6a0:	9004d07a 	srli	r2,r18,1
  80c6a4:	8006d07a 	srli	r3,r16,1
  80c6a8:	902097fa 	slli	r16,r18,31
  80c6ac:	20a4b03a 	or	r18,r4,r2
  80c6b0:	003f0106 	br	80c2b8 <__alt_mem_onchip_mem+0xff8042b8>
  80c6b4:	e4bff51e 	bne	fp,r18,80c68c <__alt_mem_onchip_mem+0xff80468c>
  80c6b8:	85bff22e 	bgeu	r16,r22,80c684 <__alt_mem_onchip_mem+0xff804684>
  80c6bc:	e0c7c83a 	sub	r3,fp,r3
  80c6c0:	1023883a 	mov	r17,r2
  80c6c4:	003f4606 	br	80c3e0 <__alt_mem_onchip_mem+0xff8043e0>
  80c6c8:	100f883a 	mov	r7,r2
  80c6cc:	003f2b06 	br	80c37c <__alt_mem_onchip_mem+0xff80437c>
  80c6d0:	180d883a 	mov	r6,r3
  80c6d4:	003f1306 	br	80c324 <__alt_mem_onchip_mem+0xff804324>
  80c6d8:	813fe436 	bltu	r16,r4,80c66c <__alt_mem_onchip_mem+0xff80466c>
  80c6dc:	0007883a 	mov	r3,zero
  80c6e0:	003f3f06 	br	80c3e0 <__alt_mem_onchip_mem+0xff8043e0>
  80c6e4:	ba402c36 	bltu	r23,r9,80c798 <__divdf3+0x810>
  80c6e8:	4dc05426 	beq	r9,r23,80c83c <__divdf3+0x8b4>
  80c6ec:	1011883a 	mov	r8,r2
  80c6f0:	003f8906 	br	80c518 <__alt_mem_onchip_mem+0xff804518>
  80c6f4:	023fffc4 	movi	r8,-1
  80c6f8:	003f8806 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c6fc:	1811883a 	mov	r8,r3
  80c700:	003f5406 	br	80c454 <__alt_mem_onchip_mem+0xff804454>
  80c704:	1025883a 	mov	r18,r2
  80c708:	003f6d06 	br	80c4c0 <__alt_mem_onchip_mem+0xff8044c0>
  80c70c:	b827883a 	mov	r19,r23
  80c710:	003f8206 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c714:	010007c4 	movi	r4,31
  80c718:	20c02616 	blt	r4,r3,80c7b4 <__divdf3+0x82c>
  80c71c:	00800804 	movi	r2,32
  80c720:	10c5c83a 	sub	r2,r2,r3
  80c724:	888a983a 	sll	r5,r17,r2
  80c728:	40c8d83a 	srl	r4,r8,r3
  80c72c:	4084983a 	sll	r2,r8,r2
  80c730:	88e2d83a 	srl	r17,r17,r3
  80c734:	2906b03a 	or	r3,r5,r4
  80c738:	1004c03a 	cmpne	r2,r2,zero
  80c73c:	1886b03a 	or	r3,r3,r2
  80c740:	188001cc 	andi	r2,r3,7
  80c744:	10000726 	beq	r2,zero,80c764 <__divdf3+0x7dc>
  80c748:	188003cc 	andi	r2,r3,15
  80c74c:	01000104 	movi	r4,4
  80c750:	11000426 	beq	r2,r4,80c764 <__divdf3+0x7dc>
  80c754:	1805883a 	mov	r2,r3
  80c758:	10c00104 	addi	r3,r2,4
  80c75c:	1885803a 	cmpltu	r2,r3,r2
  80c760:	88a3883a 	add	r17,r17,r2
  80c764:	8880202c 	andhi	r2,r17,128
  80c768:	10002726 	beq	r2,zero,80c808 <__divdf3+0x880>
  80c76c:	98c0004c 	andi	r3,r19,1
  80c770:	00800044 	movi	r2,1
  80c774:	000b883a 	mov	r5,zero
  80c778:	0025883a 	mov	r18,zero
  80c77c:	003e6106 	br	80c104 <__alt_mem_onchip_mem+0xff804104>
  80c780:	85a1883a 	add	r16,r16,r22
  80c784:	8585803a 	cmpltu	r2,r16,r22
  80c788:	1705883a 	add	r2,r2,fp
  80c78c:	14a5883a 	add	r18,r2,r18
  80c790:	8c7fff84 	addi	r17,r17,-2
  80c794:	003f1106 	br	80c3dc <__alt_mem_onchip_mem+0xff8043dc>
  80c798:	b589883a 	add	r4,r22,r22
  80c79c:	25ad803a 	cmpltu	r22,r4,r22
  80c7a0:	b739883a 	add	fp,r22,fp
  80c7a4:	40bfff84 	addi	r2,r8,-2
  80c7a8:	bf2f883a 	add	r23,r23,fp
  80c7ac:	202d883a 	mov	r22,r4
  80c7b0:	003f9306 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80c7b4:	013ff844 	movi	r4,-31
  80c7b8:	2085c83a 	sub	r2,r4,r2
  80c7bc:	8888d83a 	srl	r4,r17,r2
  80c7c0:	00800804 	movi	r2,32
  80c7c4:	18802126 	beq	r3,r2,80c84c <__divdf3+0x8c4>
  80c7c8:	00801004 	movi	r2,64
  80c7cc:	10c5c83a 	sub	r2,r2,r3
  80c7d0:	8884983a 	sll	r2,r17,r2
  80c7d4:	1204b03a 	or	r2,r2,r8
  80c7d8:	1004c03a 	cmpne	r2,r2,zero
  80c7dc:	2084b03a 	or	r2,r4,r2
  80c7e0:	144001cc 	andi	r17,r2,7
  80c7e4:	88000d1e 	bne	r17,zero,80c81c <__divdf3+0x894>
  80c7e8:	000b883a 	mov	r5,zero
  80c7ec:	1024d0fa 	srli	r18,r2,3
  80c7f0:	98c0004c 	andi	r3,r19,1
  80c7f4:	0005883a 	mov	r2,zero
  80c7f8:	9464b03a 	or	r18,r18,r17
  80c7fc:	003e4106 	br	80c104 <__alt_mem_onchip_mem+0xff804104>
  80c800:	1007883a 	mov	r3,r2
  80c804:	0023883a 	mov	r17,zero
  80c808:	880a927a 	slli	r5,r17,9
  80c80c:	1805883a 	mov	r2,r3
  80c810:	8822977a 	slli	r17,r17,29
  80c814:	280ad33a 	srli	r5,r5,12
  80c818:	003ff406 	br	80c7ec <__alt_mem_onchip_mem+0xff8047ec>
  80c81c:	10c003cc 	andi	r3,r2,15
  80c820:	01000104 	movi	r4,4
  80c824:	193ff626 	beq	r3,r4,80c800 <__alt_mem_onchip_mem+0xff804800>
  80c828:	0023883a 	mov	r17,zero
  80c82c:	003fca06 	br	80c758 <__alt_mem_onchip_mem+0xff804758>
  80c830:	813fd336 	bltu	r16,r4,80c780 <__alt_mem_onchip_mem+0xff804780>
  80c834:	1023883a 	mov	r17,r2
  80c838:	003fa806 	br	80c6dc <__alt_mem_onchip_mem+0xff8046dc>
  80c83c:	b0ffd636 	bltu	r22,r3,80c798 <__alt_mem_onchip_mem+0xff804798>
  80c840:	1011883a 	mov	r8,r2
  80c844:	b0ff341e 	bne	r22,r3,80c518 <__alt_mem_onchip_mem+0xff804518>
  80c848:	003f3406 	br	80c51c <__alt_mem_onchip_mem+0xff80451c>
  80c84c:	0005883a 	mov	r2,zero
  80c850:	003fe006 	br	80c7d4 <__alt_mem_onchip_mem+0xff8047d4>
  80c854:	00800434 	movhi	r2,16
  80c858:	89400234 	orhi	r5,r17,8
  80c85c:	10bfffc4 	addi	r2,r2,-1
  80c860:	b807883a 	mov	r3,r23
  80c864:	288a703a 	and	r5,r5,r2
  80c868:	4025883a 	mov	r18,r8
  80c86c:	003e8206 	br	80c278 <__alt_mem_onchip_mem+0xff804278>

0080c870 <__eqdf2>:
  80c870:	2804d53a 	srli	r2,r5,20
  80c874:	3806d53a 	srli	r3,r7,20
  80c878:	02000434 	movhi	r8,16
  80c87c:	423fffc4 	addi	r8,r8,-1
  80c880:	1081ffcc 	andi	r2,r2,2047
  80c884:	0281ffc4 	movi	r10,2047
  80c888:	2a12703a 	and	r9,r5,r8
  80c88c:	18c1ffcc 	andi	r3,r3,2047
  80c890:	3a10703a 	and	r8,r7,r8
  80c894:	280ad7fa 	srli	r5,r5,31
  80c898:	380ed7fa 	srli	r7,r7,31
  80c89c:	12801026 	beq	r2,r10,80c8e0 <__eqdf2+0x70>
  80c8a0:	0281ffc4 	movi	r10,2047
  80c8a4:	1a800a26 	beq	r3,r10,80c8d0 <__eqdf2+0x60>
  80c8a8:	10c00226 	beq	r2,r3,80c8b4 <__eqdf2+0x44>
  80c8ac:	00800044 	movi	r2,1
  80c8b0:	f800283a 	ret
  80c8b4:	4a3ffd1e 	bne	r9,r8,80c8ac <__alt_mem_onchip_mem+0xff8048ac>
  80c8b8:	21bffc1e 	bne	r4,r6,80c8ac <__alt_mem_onchip_mem+0xff8048ac>
  80c8bc:	29c00c26 	beq	r5,r7,80c8f0 <__eqdf2+0x80>
  80c8c0:	103ffa1e 	bne	r2,zero,80c8ac <__alt_mem_onchip_mem+0xff8048ac>
  80c8c4:	2244b03a 	or	r2,r4,r9
  80c8c8:	1004c03a 	cmpne	r2,r2,zero
  80c8cc:	f800283a 	ret
  80c8d0:	3214b03a 	or	r10,r6,r8
  80c8d4:	503ff426 	beq	r10,zero,80c8a8 <__alt_mem_onchip_mem+0xff8048a8>
  80c8d8:	00800044 	movi	r2,1
  80c8dc:	f800283a 	ret
  80c8e0:	2254b03a 	or	r10,r4,r9
  80c8e4:	503fee26 	beq	r10,zero,80c8a0 <__alt_mem_onchip_mem+0xff8048a0>
  80c8e8:	00800044 	movi	r2,1
  80c8ec:	f800283a 	ret
  80c8f0:	0005883a 	mov	r2,zero
  80c8f4:	f800283a 	ret

0080c8f8 <__gedf2>:
  80c8f8:	2804d53a 	srli	r2,r5,20
  80c8fc:	3806d53a 	srli	r3,r7,20
  80c900:	02000434 	movhi	r8,16
  80c904:	423fffc4 	addi	r8,r8,-1
  80c908:	1081ffcc 	andi	r2,r2,2047
  80c90c:	0241ffc4 	movi	r9,2047
  80c910:	2a14703a 	and	r10,r5,r8
  80c914:	18c1ffcc 	andi	r3,r3,2047
  80c918:	3a10703a 	and	r8,r7,r8
  80c91c:	280ad7fa 	srli	r5,r5,31
  80c920:	380ed7fa 	srli	r7,r7,31
  80c924:	12401d26 	beq	r2,r9,80c99c <__gedf2+0xa4>
  80c928:	0241ffc4 	movi	r9,2047
  80c92c:	1a401226 	beq	r3,r9,80c978 <__gedf2+0x80>
  80c930:	1000081e 	bne	r2,zero,80c954 <__gedf2+0x5c>
  80c934:	2296b03a 	or	r11,r4,r10
  80c938:	5813003a 	cmpeq	r9,r11,zero
  80c93c:	1800091e 	bne	r3,zero,80c964 <__gedf2+0x6c>
  80c940:	3218b03a 	or	r12,r6,r8
  80c944:	6000071e 	bne	r12,zero,80c964 <__gedf2+0x6c>
  80c948:	0005883a 	mov	r2,zero
  80c94c:	5800101e 	bne	r11,zero,80c990 <__gedf2+0x98>
  80c950:	f800283a 	ret
  80c954:	18000c1e 	bne	r3,zero,80c988 <__gedf2+0x90>
  80c958:	3212b03a 	or	r9,r6,r8
  80c95c:	48000c26 	beq	r9,zero,80c990 <__gedf2+0x98>
  80c960:	0013883a 	mov	r9,zero
  80c964:	39c03fcc 	andi	r7,r7,255
  80c968:	48000826 	beq	r9,zero,80c98c <__gedf2+0x94>
  80c96c:	38000926 	beq	r7,zero,80c994 <__gedf2+0x9c>
  80c970:	00800044 	movi	r2,1
  80c974:	f800283a 	ret
  80c978:	3212b03a 	or	r9,r6,r8
  80c97c:	483fec26 	beq	r9,zero,80c930 <__alt_mem_onchip_mem+0xff804930>
  80c980:	00bfff84 	movi	r2,-2
  80c984:	f800283a 	ret
  80c988:	39c03fcc 	andi	r7,r7,255
  80c98c:	29c00626 	beq	r5,r7,80c9a8 <__gedf2+0xb0>
  80c990:	283ff726 	beq	r5,zero,80c970 <__alt_mem_onchip_mem+0xff804970>
  80c994:	00bfffc4 	movi	r2,-1
  80c998:	f800283a 	ret
  80c99c:	2292b03a 	or	r9,r4,r10
  80c9a0:	483fe126 	beq	r9,zero,80c928 <__alt_mem_onchip_mem+0xff804928>
  80c9a4:	003ff606 	br	80c980 <__alt_mem_onchip_mem+0xff804980>
  80c9a8:	18bff916 	blt	r3,r2,80c990 <__alt_mem_onchip_mem+0xff804990>
  80c9ac:	10c00316 	blt	r2,r3,80c9bc <__gedf2+0xc4>
  80c9b0:	42bff736 	bltu	r8,r10,80c990 <__alt_mem_onchip_mem+0xff804990>
  80c9b4:	52000326 	beq	r10,r8,80c9c4 <__gedf2+0xcc>
  80c9b8:	5200042e 	bgeu	r10,r8,80c9cc <__gedf2+0xd4>
  80c9bc:	283fec1e 	bne	r5,zero,80c970 <__alt_mem_onchip_mem+0xff804970>
  80c9c0:	003ff406 	br	80c994 <__alt_mem_onchip_mem+0xff804994>
  80c9c4:	313ff236 	bltu	r6,r4,80c990 <__alt_mem_onchip_mem+0xff804990>
  80c9c8:	21bffc36 	bltu	r4,r6,80c9bc <__alt_mem_onchip_mem+0xff8049bc>
  80c9cc:	0005883a 	mov	r2,zero
  80c9d0:	f800283a 	ret

0080c9d4 <__ledf2>:
  80c9d4:	2804d53a 	srli	r2,r5,20
  80c9d8:	3810d53a 	srli	r8,r7,20
  80c9dc:	00c00434 	movhi	r3,16
  80c9e0:	18ffffc4 	addi	r3,r3,-1
  80c9e4:	1081ffcc 	andi	r2,r2,2047
  80c9e8:	0241ffc4 	movi	r9,2047
  80c9ec:	28d4703a 	and	r10,r5,r3
  80c9f0:	4201ffcc 	andi	r8,r8,2047
  80c9f4:	38c6703a 	and	r3,r7,r3
  80c9f8:	280ad7fa 	srli	r5,r5,31
  80c9fc:	380ed7fa 	srli	r7,r7,31
  80ca00:	12401f26 	beq	r2,r9,80ca80 <__ledf2+0xac>
  80ca04:	0241ffc4 	movi	r9,2047
  80ca08:	42401426 	beq	r8,r9,80ca5c <__ledf2+0x88>
  80ca0c:	1000091e 	bne	r2,zero,80ca34 <__ledf2+0x60>
  80ca10:	2296b03a 	or	r11,r4,r10
  80ca14:	5813003a 	cmpeq	r9,r11,zero
  80ca18:	29403fcc 	andi	r5,r5,255
  80ca1c:	40000a1e 	bne	r8,zero,80ca48 <__ledf2+0x74>
  80ca20:	30d8b03a 	or	r12,r6,r3
  80ca24:	6000081e 	bne	r12,zero,80ca48 <__ledf2+0x74>
  80ca28:	0005883a 	mov	r2,zero
  80ca2c:	5800111e 	bne	r11,zero,80ca74 <__ledf2+0xa0>
  80ca30:	f800283a 	ret
  80ca34:	29403fcc 	andi	r5,r5,255
  80ca38:	40000c1e 	bne	r8,zero,80ca6c <__ledf2+0x98>
  80ca3c:	30d2b03a 	or	r9,r6,r3
  80ca40:	48000c26 	beq	r9,zero,80ca74 <__ledf2+0xa0>
  80ca44:	0013883a 	mov	r9,zero
  80ca48:	39c03fcc 	andi	r7,r7,255
  80ca4c:	48000826 	beq	r9,zero,80ca70 <__ledf2+0x9c>
  80ca50:	38001126 	beq	r7,zero,80ca98 <__ledf2+0xc4>
  80ca54:	00800044 	movi	r2,1
  80ca58:	f800283a 	ret
  80ca5c:	30d2b03a 	or	r9,r6,r3
  80ca60:	483fea26 	beq	r9,zero,80ca0c <__alt_mem_onchip_mem+0xff804a0c>
  80ca64:	00800084 	movi	r2,2
  80ca68:	f800283a 	ret
  80ca6c:	39c03fcc 	andi	r7,r7,255
  80ca70:	39400726 	beq	r7,r5,80ca90 <__ledf2+0xbc>
  80ca74:	2800081e 	bne	r5,zero,80ca98 <__ledf2+0xc4>
  80ca78:	00800044 	movi	r2,1
  80ca7c:	f800283a 	ret
  80ca80:	2292b03a 	or	r9,r4,r10
  80ca84:	483fdf26 	beq	r9,zero,80ca04 <__alt_mem_onchip_mem+0xff804a04>
  80ca88:	00800084 	movi	r2,2
  80ca8c:	f800283a 	ret
  80ca90:	4080030e 	bge	r8,r2,80caa0 <__ledf2+0xcc>
  80ca94:	383fef26 	beq	r7,zero,80ca54 <__alt_mem_onchip_mem+0xff804a54>
  80ca98:	00bfffc4 	movi	r2,-1
  80ca9c:	f800283a 	ret
  80caa0:	123feb16 	blt	r2,r8,80ca50 <__alt_mem_onchip_mem+0xff804a50>
  80caa4:	1abff336 	bltu	r3,r10,80ca74 <__alt_mem_onchip_mem+0xff804a74>
  80caa8:	50c00326 	beq	r10,r3,80cab8 <__ledf2+0xe4>
  80caac:	50c0042e 	bgeu	r10,r3,80cac0 <__ledf2+0xec>
  80cab0:	283fe81e 	bne	r5,zero,80ca54 <__alt_mem_onchip_mem+0xff804a54>
  80cab4:	003ff806 	br	80ca98 <__alt_mem_onchip_mem+0xff804a98>
  80cab8:	313fee36 	bltu	r6,r4,80ca74 <__alt_mem_onchip_mem+0xff804a74>
  80cabc:	21bffc36 	bltu	r4,r6,80cab0 <__alt_mem_onchip_mem+0xff804ab0>
  80cac0:	0005883a 	mov	r2,zero
  80cac4:	f800283a 	ret

0080cac8 <__muldf3>:
  80cac8:	defff304 	addi	sp,sp,-52
  80cacc:	2804d53a 	srli	r2,r5,20
  80cad0:	dd800915 	stw	r22,36(sp)
  80cad4:	282cd7fa 	srli	r22,r5,31
  80cad8:	dc000315 	stw	r16,12(sp)
  80cadc:	04000434 	movhi	r16,16
  80cae0:	dd400815 	stw	r21,32(sp)
  80cae4:	dc800515 	stw	r18,20(sp)
  80cae8:	843fffc4 	addi	r16,r16,-1
  80caec:	dfc00c15 	stw	ra,48(sp)
  80caf0:	df000b15 	stw	fp,44(sp)
  80caf4:	ddc00a15 	stw	r23,40(sp)
  80caf8:	dd000715 	stw	r20,28(sp)
  80cafc:	dcc00615 	stw	r19,24(sp)
  80cb00:	dc400415 	stw	r17,16(sp)
  80cb04:	1481ffcc 	andi	r18,r2,2047
  80cb08:	2c20703a 	and	r16,r5,r16
  80cb0c:	b02b883a 	mov	r21,r22
  80cb10:	b2403fcc 	andi	r9,r22,255
  80cb14:	90006026 	beq	r18,zero,80cc98 <__muldf3+0x1d0>
  80cb18:	0081ffc4 	movi	r2,2047
  80cb1c:	2029883a 	mov	r20,r4
  80cb20:	90803626 	beq	r18,r2,80cbfc <__muldf3+0x134>
  80cb24:	80800434 	orhi	r2,r16,16
  80cb28:	100490fa 	slli	r2,r2,3
  80cb2c:	2020d77a 	srli	r16,r4,29
  80cb30:	202890fa 	slli	r20,r4,3
  80cb34:	94bf0044 	addi	r18,r18,-1023
  80cb38:	80a0b03a 	or	r16,r16,r2
  80cb3c:	0027883a 	mov	r19,zero
  80cb40:	0039883a 	mov	fp,zero
  80cb44:	3804d53a 	srli	r2,r7,20
  80cb48:	382ed7fa 	srli	r23,r7,31
  80cb4c:	04400434 	movhi	r17,16
  80cb50:	8c7fffc4 	addi	r17,r17,-1
  80cb54:	1081ffcc 	andi	r2,r2,2047
  80cb58:	3011883a 	mov	r8,r6
  80cb5c:	3c62703a 	and	r17,r7,r17
  80cb60:	ba803fcc 	andi	r10,r23,255
  80cb64:	10006d26 	beq	r2,zero,80cd1c <__muldf3+0x254>
  80cb68:	00c1ffc4 	movi	r3,2047
  80cb6c:	10c06526 	beq	r2,r3,80cd04 <__muldf3+0x23c>
  80cb70:	88c00434 	orhi	r3,r17,16
  80cb74:	180690fa 	slli	r3,r3,3
  80cb78:	3022d77a 	srli	r17,r6,29
  80cb7c:	301090fa 	slli	r8,r6,3
  80cb80:	10bf0044 	addi	r2,r2,-1023
  80cb84:	88e2b03a 	or	r17,r17,r3
  80cb88:	000b883a 	mov	r5,zero
  80cb8c:	9085883a 	add	r2,r18,r2
  80cb90:	2cc8b03a 	or	r4,r5,r19
  80cb94:	00c003c4 	movi	r3,15
  80cb98:	bdacf03a 	xor	r22,r23,r22
  80cb9c:	12c00044 	addi	r11,r2,1
  80cba0:	19009936 	bltu	r3,r4,80ce08 <__muldf3+0x340>
  80cba4:	200890ba 	slli	r4,r4,2
  80cba8:	00c02074 	movhi	r3,129
  80cbac:	18f2ef04 	addi	r3,r3,-13380
  80cbb0:	20c9883a 	add	r4,r4,r3
  80cbb4:	20c00017 	ldw	r3,0(r4)
  80cbb8:	1800683a 	jmp	r3
  80cbbc:	0080ce08 	cmpgei	r2,zero,824
  80cbc0:	0080cc1c 	xori	r2,zero,816
  80cbc4:	0080cc1c 	xori	r2,zero,816
  80cbc8:	0080cc18 	cmpnei	r2,zero,816
  80cbcc:	0080cde4 	muli	r2,zero,823
  80cbd0:	0080cde4 	muli	r2,zero,823
  80cbd4:	0080cdcc 	andi	r2,zero,823
  80cbd8:	0080cc18 	cmpnei	r2,zero,816
  80cbdc:	0080cde4 	muli	r2,zero,823
  80cbe0:	0080cdcc 	andi	r2,zero,823
  80cbe4:	0080cde4 	muli	r2,zero,823
  80cbe8:	0080cc18 	cmpnei	r2,zero,816
  80cbec:	0080cdf4 	movhi	r2,823
  80cbf0:	0080cdf4 	movhi	r2,823
  80cbf4:	0080cdf4 	movhi	r2,823
  80cbf8:	0080d010 	cmplti	r2,zero,832
  80cbfc:	2404b03a 	or	r2,r4,r16
  80cc00:	10006f1e 	bne	r2,zero,80cdc0 <__muldf3+0x2f8>
  80cc04:	04c00204 	movi	r19,8
  80cc08:	0021883a 	mov	r16,zero
  80cc0c:	0029883a 	mov	r20,zero
  80cc10:	07000084 	movi	fp,2
  80cc14:	003fcb06 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80cc18:	502d883a 	mov	r22,r10
  80cc1c:	00800084 	movi	r2,2
  80cc20:	28805726 	beq	r5,r2,80cd80 <__muldf3+0x2b8>
  80cc24:	008000c4 	movi	r2,3
  80cc28:	28816626 	beq	r5,r2,80d1c4 <__muldf3+0x6fc>
  80cc2c:	00800044 	movi	r2,1
  80cc30:	2881411e 	bne	r5,r2,80d138 <__muldf3+0x670>
  80cc34:	b02b883a 	mov	r21,r22
  80cc38:	0005883a 	mov	r2,zero
  80cc3c:	000b883a 	mov	r5,zero
  80cc40:	0029883a 	mov	r20,zero
  80cc44:	1004953a 	slli	r2,r2,20
  80cc48:	a8c03fcc 	andi	r3,r21,255
  80cc4c:	04400434 	movhi	r17,16
  80cc50:	8c7fffc4 	addi	r17,r17,-1
  80cc54:	180697fa 	slli	r3,r3,31
  80cc58:	2c4a703a 	and	r5,r5,r17
  80cc5c:	288ab03a 	or	r5,r5,r2
  80cc60:	28c6b03a 	or	r3,r5,r3
  80cc64:	a005883a 	mov	r2,r20
  80cc68:	dfc00c17 	ldw	ra,48(sp)
  80cc6c:	df000b17 	ldw	fp,44(sp)
  80cc70:	ddc00a17 	ldw	r23,40(sp)
  80cc74:	dd800917 	ldw	r22,36(sp)
  80cc78:	dd400817 	ldw	r21,32(sp)
  80cc7c:	dd000717 	ldw	r20,28(sp)
  80cc80:	dcc00617 	ldw	r19,24(sp)
  80cc84:	dc800517 	ldw	r18,20(sp)
  80cc88:	dc400417 	ldw	r17,16(sp)
  80cc8c:	dc000317 	ldw	r16,12(sp)
  80cc90:	dec00d04 	addi	sp,sp,52
  80cc94:	f800283a 	ret
  80cc98:	2404b03a 	or	r2,r4,r16
  80cc9c:	2027883a 	mov	r19,r4
  80cca0:	10004226 	beq	r2,zero,80cdac <__muldf3+0x2e4>
  80cca4:	8000fc26 	beq	r16,zero,80d098 <__muldf3+0x5d0>
  80cca8:	8009883a 	mov	r4,r16
  80ccac:	d9800215 	stw	r6,8(sp)
  80ccb0:	d9c00015 	stw	r7,0(sp)
  80ccb4:	da400115 	stw	r9,4(sp)
  80ccb8:	080dce00 	call	80dce0 <__clzsi2>
  80ccbc:	d9800217 	ldw	r6,8(sp)
  80ccc0:	d9c00017 	ldw	r7,0(sp)
  80ccc4:	da400117 	ldw	r9,4(sp)
  80ccc8:	113ffd44 	addi	r4,r2,-11
  80cccc:	00c00704 	movi	r3,28
  80ccd0:	1900ed16 	blt	r3,r4,80d088 <__muldf3+0x5c0>
  80ccd4:	00c00744 	movi	r3,29
  80ccd8:	147ffe04 	addi	r17,r2,-8
  80ccdc:	1907c83a 	sub	r3,r3,r4
  80cce0:	8460983a 	sll	r16,r16,r17
  80cce4:	98c6d83a 	srl	r3,r19,r3
  80cce8:	9c68983a 	sll	r20,r19,r17
  80ccec:	1c20b03a 	or	r16,r3,r16
  80ccf0:	1080fcc4 	addi	r2,r2,1011
  80ccf4:	00a5c83a 	sub	r18,zero,r2
  80ccf8:	0027883a 	mov	r19,zero
  80ccfc:	0039883a 	mov	fp,zero
  80cd00:	003f9006 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80cd04:	3446b03a 	or	r3,r6,r17
  80cd08:	1800261e 	bne	r3,zero,80cda4 <__muldf3+0x2dc>
  80cd0c:	0023883a 	mov	r17,zero
  80cd10:	0011883a 	mov	r8,zero
  80cd14:	01400084 	movi	r5,2
  80cd18:	003f9c06 	br	80cb8c <__alt_mem_onchip_mem+0xff804b8c>
  80cd1c:	3446b03a 	or	r3,r6,r17
  80cd20:	18001c26 	beq	r3,zero,80cd94 <__muldf3+0x2cc>
  80cd24:	8800ce26 	beq	r17,zero,80d060 <__muldf3+0x598>
  80cd28:	8809883a 	mov	r4,r17
  80cd2c:	d9800215 	stw	r6,8(sp)
  80cd30:	da400115 	stw	r9,4(sp)
  80cd34:	da800015 	stw	r10,0(sp)
  80cd38:	080dce00 	call	80dce0 <__clzsi2>
  80cd3c:	d9800217 	ldw	r6,8(sp)
  80cd40:	da400117 	ldw	r9,4(sp)
  80cd44:	da800017 	ldw	r10,0(sp)
  80cd48:	113ffd44 	addi	r4,r2,-11
  80cd4c:	00c00704 	movi	r3,28
  80cd50:	1900bf16 	blt	r3,r4,80d050 <__muldf3+0x588>
  80cd54:	00c00744 	movi	r3,29
  80cd58:	123ffe04 	addi	r8,r2,-8
  80cd5c:	1907c83a 	sub	r3,r3,r4
  80cd60:	8a22983a 	sll	r17,r17,r8
  80cd64:	30c6d83a 	srl	r3,r6,r3
  80cd68:	3210983a 	sll	r8,r6,r8
  80cd6c:	1c62b03a 	or	r17,r3,r17
  80cd70:	1080fcc4 	addi	r2,r2,1011
  80cd74:	0085c83a 	sub	r2,zero,r2
  80cd78:	000b883a 	mov	r5,zero
  80cd7c:	003f8306 	br	80cb8c <__alt_mem_onchip_mem+0xff804b8c>
  80cd80:	b02b883a 	mov	r21,r22
  80cd84:	0081ffc4 	movi	r2,2047
  80cd88:	000b883a 	mov	r5,zero
  80cd8c:	0029883a 	mov	r20,zero
  80cd90:	003fac06 	br	80cc44 <__alt_mem_onchip_mem+0xff804c44>
  80cd94:	0023883a 	mov	r17,zero
  80cd98:	0011883a 	mov	r8,zero
  80cd9c:	01400044 	movi	r5,1
  80cda0:	003f7a06 	br	80cb8c <__alt_mem_onchip_mem+0xff804b8c>
  80cda4:	014000c4 	movi	r5,3
  80cda8:	003f7806 	br	80cb8c <__alt_mem_onchip_mem+0xff804b8c>
  80cdac:	04c00104 	movi	r19,4
  80cdb0:	0021883a 	mov	r16,zero
  80cdb4:	0029883a 	mov	r20,zero
  80cdb8:	07000044 	movi	fp,1
  80cdbc:	003f6106 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80cdc0:	04c00304 	movi	r19,12
  80cdc4:	070000c4 	movi	fp,3
  80cdc8:	003f5e06 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80cdcc:	01400434 	movhi	r5,16
  80cdd0:	002b883a 	mov	r21,zero
  80cdd4:	297fffc4 	addi	r5,r5,-1
  80cdd8:	053fffc4 	movi	r20,-1
  80cddc:	0081ffc4 	movi	r2,2047
  80cde0:	003f9806 	br	80cc44 <__alt_mem_onchip_mem+0xff804c44>
  80cde4:	8023883a 	mov	r17,r16
  80cde8:	a011883a 	mov	r8,r20
  80cdec:	e00b883a 	mov	r5,fp
  80cdf0:	003f8a06 	br	80cc1c <__alt_mem_onchip_mem+0xff804c1c>
  80cdf4:	8023883a 	mov	r17,r16
  80cdf8:	a011883a 	mov	r8,r20
  80cdfc:	482d883a 	mov	r22,r9
  80ce00:	e00b883a 	mov	r5,fp
  80ce04:	003f8506 	br	80cc1c <__alt_mem_onchip_mem+0xff804c1c>
  80ce08:	a00ad43a 	srli	r5,r20,16
  80ce0c:	401ad43a 	srli	r13,r8,16
  80ce10:	a53fffcc 	andi	r20,r20,65535
  80ce14:	423fffcc 	andi	r8,r8,65535
  80ce18:	4519383a 	mul	r12,r8,r20
  80ce1c:	4147383a 	mul	r3,r8,r5
  80ce20:	6d09383a 	mul	r4,r13,r20
  80ce24:	600cd43a 	srli	r6,r12,16
  80ce28:	2b5d383a 	mul	r14,r5,r13
  80ce2c:	20c9883a 	add	r4,r4,r3
  80ce30:	310d883a 	add	r6,r6,r4
  80ce34:	30c0022e 	bgeu	r6,r3,80ce40 <__muldf3+0x378>
  80ce38:	00c00074 	movhi	r3,1
  80ce3c:	70dd883a 	add	r14,r14,r3
  80ce40:	8826d43a 	srli	r19,r17,16
  80ce44:	8bffffcc 	andi	r15,r17,65535
  80ce48:	7d23383a 	mul	r17,r15,r20
  80ce4c:	7949383a 	mul	r4,r15,r5
  80ce50:	9d29383a 	mul	r20,r19,r20
  80ce54:	8814d43a 	srli	r10,r17,16
  80ce58:	3012943a 	slli	r9,r6,16
  80ce5c:	a129883a 	add	r20,r20,r4
  80ce60:	633fffcc 	andi	r12,r12,65535
  80ce64:	5515883a 	add	r10,r10,r20
  80ce68:	3006d43a 	srli	r3,r6,16
  80ce6c:	4b13883a 	add	r9,r9,r12
  80ce70:	2ccb383a 	mul	r5,r5,r19
  80ce74:	5100022e 	bgeu	r10,r4,80ce80 <__muldf3+0x3b8>
  80ce78:	01000074 	movhi	r4,1
  80ce7c:	290b883a 	add	r5,r5,r4
  80ce80:	802ad43a 	srli	r21,r16,16
  80ce84:	843fffcc 	andi	r16,r16,65535
  80ce88:	440d383a 	mul	r6,r8,r16
  80ce8c:	4565383a 	mul	r18,r8,r21
  80ce90:	8349383a 	mul	r4,r16,r13
  80ce94:	500e943a 	slli	r7,r10,16
  80ce98:	3010d43a 	srli	r8,r6,16
  80ce9c:	5028d43a 	srli	r20,r10,16
  80cea0:	2489883a 	add	r4,r4,r18
  80cea4:	8abfffcc 	andi	r10,r17,65535
  80cea8:	3a95883a 	add	r10,r7,r10
  80ceac:	4119883a 	add	r12,r8,r4
  80ceb0:	a169883a 	add	r20,r20,r5
  80ceb4:	1a87883a 	add	r3,r3,r10
  80ceb8:	6d5b383a 	mul	r13,r13,r21
  80cebc:	6480022e 	bgeu	r12,r18,80cec8 <__muldf3+0x400>
  80cec0:	01000074 	movhi	r4,1
  80cec4:	691b883a 	add	r13,r13,r4
  80cec8:	7c25383a 	mul	r18,r15,r16
  80cecc:	7d4b383a 	mul	r5,r15,r21
  80ced0:	84cf383a 	mul	r7,r16,r19
  80ced4:	901ed43a 	srli	r15,r18,16
  80ced8:	6008d43a 	srli	r4,r12,16
  80cedc:	6010943a 	slli	r8,r12,16
  80cee0:	394f883a 	add	r7,r7,r5
  80cee4:	333fffcc 	andi	r12,r6,65535
  80cee8:	79df883a 	add	r15,r15,r7
  80ceec:	235b883a 	add	r13,r4,r13
  80cef0:	9d63383a 	mul	r17,r19,r21
  80cef4:	4309883a 	add	r4,r8,r12
  80cef8:	7940022e 	bgeu	r15,r5,80cf04 <__muldf3+0x43c>
  80cefc:	01400074 	movhi	r5,1
  80cf00:	8963883a 	add	r17,r17,r5
  80cf04:	780a943a 	slli	r5,r15,16
  80cf08:	91bfffcc 	andi	r6,r18,65535
  80cf0c:	70c7883a 	add	r3,r14,r3
  80cf10:	298d883a 	add	r6,r5,r6
  80cf14:	1a8f803a 	cmpltu	r7,r3,r10
  80cf18:	350b883a 	add	r5,r6,r20
  80cf1c:	20c7883a 	add	r3,r4,r3
  80cf20:	3955883a 	add	r10,r7,r5
  80cf24:	1909803a 	cmpltu	r4,r3,r4
  80cf28:	6a91883a 	add	r8,r13,r10
  80cf2c:	780cd43a 	srli	r6,r15,16
  80cf30:	2219883a 	add	r12,r4,r8
  80cf34:	2d0b803a 	cmpltu	r5,r5,r20
  80cf38:	51cf803a 	cmpltu	r7,r10,r7
  80cf3c:	29ceb03a 	or	r7,r5,r7
  80cf40:	4351803a 	cmpltu	r8,r8,r13
  80cf44:	610b803a 	cmpltu	r5,r12,r4
  80cf48:	4148b03a 	or	r4,r8,r5
  80cf4c:	398f883a 	add	r7,r7,r6
  80cf50:	3909883a 	add	r4,r7,r4
  80cf54:	1810927a 	slli	r8,r3,9
  80cf58:	2449883a 	add	r4,r4,r17
  80cf5c:	2008927a 	slli	r4,r4,9
  80cf60:	6022d5fa 	srli	r17,r12,23
  80cf64:	1806d5fa 	srli	r3,r3,23
  80cf68:	4252b03a 	or	r9,r8,r9
  80cf6c:	600a927a 	slli	r5,r12,9
  80cf70:	4810c03a 	cmpne	r8,r9,zero
  80cf74:	2462b03a 	or	r17,r4,r17
  80cf78:	40c6b03a 	or	r3,r8,r3
  80cf7c:	8900402c 	andhi	r4,r17,256
  80cf80:	1950b03a 	or	r8,r3,r5
  80cf84:	20000726 	beq	r4,zero,80cfa4 <__muldf3+0x4dc>
  80cf88:	4006d07a 	srli	r3,r8,1
  80cf8c:	880497fa 	slli	r2,r17,31
  80cf90:	4200004c 	andi	r8,r8,1
  80cf94:	8822d07a 	srli	r17,r17,1
  80cf98:	1a10b03a 	or	r8,r3,r8
  80cf9c:	1210b03a 	or	r8,r2,r8
  80cfa0:	5805883a 	mov	r2,r11
  80cfa4:	1140ffc4 	addi	r5,r2,1023
  80cfa8:	0140440e 	bge	zero,r5,80d0bc <__muldf3+0x5f4>
  80cfac:	40c001cc 	andi	r3,r8,7
  80cfb0:	18000726 	beq	r3,zero,80cfd0 <__muldf3+0x508>
  80cfb4:	40c003cc 	andi	r3,r8,15
  80cfb8:	01000104 	movi	r4,4
  80cfbc:	19000426 	beq	r3,r4,80cfd0 <__muldf3+0x508>
  80cfc0:	4107883a 	add	r3,r8,r4
  80cfc4:	1a11803a 	cmpltu	r8,r3,r8
  80cfc8:	8a23883a 	add	r17,r17,r8
  80cfcc:	1811883a 	mov	r8,r3
  80cfd0:	88c0402c 	andhi	r3,r17,256
  80cfd4:	18000426 	beq	r3,zero,80cfe8 <__muldf3+0x520>
  80cfd8:	11410004 	addi	r5,r2,1024
  80cfdc:	00bfc034 	movhi	r2,65280
  80cfe0:	10bfffc4 	addi	r2,r2,-1
  80cfe4:	88a2703a 	and	r17,r17,r2
  80cfe8:	0081ff84 	movi	r2,2046
  80cfec:	117f6416 	blt	r2,r5,80cd80 <__alt_mem_onchip_mem+0xff804d80>
  80cff0:	8828977a 	slli	r20,r17,29
  80cff4:	4010d0fa 	srli	r8,r8,3
  80cff8:	8822927a 	slli	r17,r17,9
  80cffc:	2881ffcc 	andi	r2,r5,2047
  80d000:	a228b03a 	or	r20,r20,r8
  80d004:	880ad33a 	srli	r5,r17,12
  80d008:	b02b883a 	mov	r21,r22
  80d00c:	003f0d06 	br	80cc44 <__alt_mem_onchip_mem+0xff804c44>
  80d010:	8080022c 	andhi	r2,r16,8
  80d014:	10000926 	beq	r2,zero,80d03c <__muldf3+0x574>
  80d018:	8880022c 	andhi	r2,r17,8
  80d01c:	1000071e 	bne	r2,zero,80d03c <__muldf3+0x574>
  80d020:	00800434 	movhi	r2,16
  80d024:	89400234 	orhi	r5,r17,8
  80d028:	10bfffc4 	addi	r2,r2,-1
  80d02c:	b82b883a 	mov	r21,r23
  80d030:	288a703a 	and	r5,r5,r2
  80d034:	4029883a 	mov	r20,r8
  80d038:	003f6806 	br	80cddc <__alt_mem_onchip_mem+0xff804ddc>
  80d03c:	00800434 	movhi	r2,16
  80d040:	81400234 	orhi	r5,r16,8
  80d044:	10bfffc4 	addi	r2,r2,-1
  80d048:	288a703a 	and	r5,r5,r2
  80d04c:	003f6306 	br	80cddc <__alt_mem_onchip_mem+0xff804ddc>
  80d050:	147ff604 	addi	r17,r2,-40
  80d054:	3462983a 	sll	r17,r6,r17
  80d058:	0011883a 	mov	r8,zero
  80d05c:	003f4406 	br	80cd70 <__alt_mem_onchip_mem+0xff804d70>
  80d060:	3009883a 	mov	r4,r6
  80d064:	d9800215 	stw	r6,8(sp)
  80d068:	da400115 	stw	r9,4(sp)
  80d06c:	da800015 	stw	r10,0(sp)
  80d070:	080dce00 	call	80dce0 <__clzsi2>
  80d074:	10800804 	addi	r2,r2,32
  80d078:	da800017 	ldw	r10,0(sp)
  80d07c:	da400117 	ldw	r9,4(sp)
  80d080:	d9800217 	ldw	r6,8(sp)
  80d084:	003f3006 	br	80cd48 <__alt_mem_onchip_mem+0xff804d48>
  80d088:	143ff604 	addi	r16,r2,-40
  80d08c:	9c20983a 	sll	r16,r19,r16
  80d090:	0029883a 	mov	r20,zero
  80d094:	003f1606 	br	80ccf0 <__alt_mem_onchip_mem+0xff804cf0>
  80d098:	d9800215 	stw	r6,8(sp)
  80d09c:	d9c00015 	stw	r7,0(sp)
  80d0a0:	da400115 	stw	r9,4(sp)
  80d0a4:	080dce00 	call	80dce0 <__clzsi2>
  80d0a8:	10800804 	addi	r2,r2,32
  80d0ac:	da400117 	ldw	r9,4(sp)
  80d0b0:	d9c00017 	ldw	r7,0(sp)
  80d0b4:	d9800217 	ldw	r6,8(sp)
  80d0b8:	003f0306 	br	80ccc8 <__alt_mem_onchip_mem+0xff804cc8>
  80d0bc:	00c00044 	movi	r3,1
  80d0c0:	1947c83a 	sub	r3,r3,r5
  80d0c4:	00800e04 	movi	r2,56
  80d0c8:	10feda16 	blt	r2,r3,80cc34 <__alt_mem_onchip_mem+0xff804c34>
  80d0cc:	008007c4 	movi	r2,31
  80d0d0:	10c01b16 	blt	r2,r3,80d140 <__muldf3+0x678>
  80d0d4:	00800804 	movi	r2,32
  80d0d8:	10c5c83a 	sub	r2,r2,r3
  80d0dc:	888a983a 	sll	r5,r17,r2
  80d0e0:	40c8d83a 	srl	r4,r8,r3
  80d0e4:	4084983a 	sll	r2,r8,r2
  80d0e8:	88e2d83a 	srl	r17,r17,r3
  80d0ec:	2906b03a 	or	r3,r5,r4
  80d0f0:	1004c03a 	cmpne	r2,r2,zero
  80d0f4:	1886b03a 	or	r3,r3,r2
  80d0f8:	188001cc 	andi	r2,r3,7
  80d0fc:	10000726 	beq	r2,zero,80d11c <__muldf3+0x654>
  80d100:	188003cc 	andi	r2,r3,15
  80d104:	01000104 	movi	r4,4
  80d108:	11000426 	beq	r2,r4,80d11c <__muldf3+0x654>
  80d10c:	1805883a 	mov	r2,r3
  80d110:	10c00104 	addi	r3,r2,4
  80d114:	1885803a 	cmpltu	r2,r3,r2
  80d118:	88a3883a 	add	r17,r17,r2
  80d11c:	8880202c 	andhi	r2,r17,128
  80d120:	10001c26 	beq	r2,zero,80d194 <__muldf3+0x6cc>
  80d124:	b02b883a 	mov	r21,r22
  80d128:	00800044 	movi	r2,1
  80d12c:	000b883a 	mov	r5,zero
  80d130:	0029883a 	mov	r20,zero
  80d134:	003ec306 	br	80cc44 <__alt_mem_onchip_mem+0xff804c44>
  80d138:	5805883a 	mov	r2,r11
  80d13c:	003f9906 	br	80cfa4 <__alt_mem_onchip_mem+0xff804fa4>
  80d140:	00bff844 	movi	r2,-31
  80d144:	1145c83a 	sub	r2,r2,r5
  80d148:	8888d83a 	srl	r4,r17,r2
  80d14c:	00800804 	movi	r2,32
  80d150:	18801a26 	beq	r3,r2,80d1bc <__muldf3+0x6f4>
  80d154:	00801004 	movi	r2,64
  80d158:	10c5c83a 	sub	r2,r2,r3
  80d15c:	8884983a 	sll	r2,r17,r2
  80d160:	1204b03a 	or	r2,r2,r8
  80d164:	1004c03a 	cmpne	r2,r2,zero
  80d168:	2084b03a 	or	r2,r4,r2
  80d16c:	144001cc 	andi	r17,r2,7
  80d170:	88000d1e 	bne	r17,zero,80d1a8 <__muldf3+0x6e0>
  80d174:	000b883a 	mov	r5,zero
  80d178:	1028d0fa 	srli	r20,r2,3
  80d17c:	b02b883a 	mov	r21,r22
  80d180:	0005883a 	mov	r2,zero
  80d184:	a468b03a 	or	r20,r20,r17
  80d188:	003eae06 	br	80cc44 <__alt_mem_onchip_mem+0xff804c44>
  80d18c:	1007883a 	mov	r3,r2
  80d190:	0023883a 	mov	r17,zero
  80d194:	880a927a 	slli	r5,r17,9
  80d198:	1805883a 	mov	r2,r3
  80d19c:	8822977a 	slli	r17,r17,29
  80d1a0:	280ad33a 	srli	r5,r5,12
  80d1a4:	003ff406 	br	80d178 <__alt_mem_onchip_mem+0xff805178>
  80d1a8:	10c003cc 	andi	r3,r2,15
  80d1ac:	01000104 	movi	r4,4
  80d1b0:	193ff626 	beq	r3,r4,80d18c <__alt_mem_onchip_mem+0xff80518c>
  80d1b4:	0023883a 	mov	r17,zero
  80d1b8:	003fd506 	br	80d110 <__alt_mem_onchip_mem+0xff805110>
  80d1bc:	0005883a 	mov	r2,zero
  80d1c0:	003fe706 	br	80d160 <__alt_mem_onchip_mem+0xff805160>
  80d1c4:	00800434 	movhi	r2,16
  80d1c8:	89400234 	orhi	r5,r17,8
  80d1cc:	10bfffc4 	addi	r2,r2,-1
  80d1d0:	b02b883a 	mov	r21,r22
  80d1d4:	288a703a 	and	r5,r5,r2
  80d1d8:	4029883a 	mov	r20,r8
  80d1dc:	003eff06 	br	80cddc <__alt_mem_onchip_mem+0xff804ddc>

0080d1e0 <__subdf3>:
  80d1e0:	02000434 	movhi	r8,16
  80d1e4:	423fffc4 	addi	r8,r8,-1
  80d1e8:	defffb04 	addi	sp,sp,-20
  80d1ec:	2a14703a 	and	r10,r5,r8
  80d1f0:	3812d53a 	srli	r9,r7,20
  80d1f4:	3a10703a 	and	r8,r7,r8
  80d1f8:	2006d77a 	srli	r3,r4,29
  80d1fc:	3004d77a 	srli	r2,r6,29
  80d200:	dc000015 	stw	r16,0(sp)
  80d204:	501490fa 	slli	r10,r10,3
  80d208:	2820d53a 	srli	r16,r5,20
  80d20c:	401090fa 	slli	r8,r8,3
  80d210:	dc800215 	stw	r18,8(sp)
  80d214:	dc400115 	stw	r17,4(sp)
  80d218:	dfc00415 	stw	ra,16(sp)
  80d21c:	202290fa 	slli	r17,r4,3
  80d220:	dcc00315 	stw	r19,12(sp)
  80d224:	4a41ffcc 	andi	r9,r9,2047
  80d228:	0101ffc4 	movi	r4,2047
  80d22c:	2824d7fa 	srli	r18,r5,31
  80d230:	8401ffcc 	andi	r16,r16,2047
  80d234:	50c6b03a 	or	r3,r10,r3
  80d238:	380ed7fa 	srli	r7,r7,31
  80d23c:	408ab03a 	or	r5,r8,r2
  80d240:	300c90fa 	slli	r6,r6,3
  80d244:	49009626 	beq	r9,r4,80d4a0 <__subdf3+0x2c0>
  80d248:	39c0005c 	xori	r7,r7,1
  80d24c:	8245c83a 	sub	r2,r16,r9
  80d250:	3c807426 	beq	r7,r18,80d424 <__subdf3+0x244>
  80d254:	0080af0e 	bge	zero,r2,80d514 <__subdf3+0x334>
  80d258:	48002a1e 	bne	r9,zero,80d304 <__subdf3+0x124>
  80d25c:	2988b03a 	or	r4,r5,r6
  80d260:	20009a1e 	bne	r4,zero,80d4cc <__subdf3+0x2ec>
  80d264:	888001cc 	andi	r2,r17,7
  80d268:	10000726 	beq	r2,zero,80d288 <__subdf3+0xa8>
  80d26c:	888003cc 	andi	r2,r17,15
  80d270:	01000104 	movi	r4,4
  80d274:	11000426 	beq	r2,r4,80d288 <__subdf3+0xa8>
  80d278:	890b883a 	add	r5,r17,r4
  80d27c:	2c63803a 	cmpltu	r17,r5,r17
  80d280:	1c47883a 	add	r3,r3,r17
  80d284:	2823883a 	mov	r17,r5
  80d288:	1880202c 	andhi	r2,r3,128
  80d28c:	10005926 	beq	r2,zero,80d3f4 <__subdf3+0x214>
  80d290:	84000044 	addi	r16,r16,1
  80d294:	0081ffc4 	movi	r2,2047
  80d298:	8080be26 	beq	r16,r2,80d594 <__subdf3+0x3b4>
  80d29c:	017fe034 	movhi	r5,65408
  80d2a0:	297fffc4 	addi	r5,r5,-1
  80d2a4:	1946703a 	and	r3,r3,r5
  80d2a8:	1804977a 	slli	r2,r3,29
  80d2ac:	1806927a 	slli	r3,r3,9
  80d2b0:	8822d0fa 	srli	r17,r17,3
  80d2b4:	8401ffcc 	andi	r16,r16,2047
  80d2b8:	180ad33a 	srli	r5,r3,12
  80d2bc:	9100004c 	andi	r4,r18,1
  80d2c0:	1444b03a 	or	r2,r2,r17
  80d2c4:	80c1ffcc 	andi	r3,r16,2047
  80d2c8:	1820953a 	slli	r16,r3,20
  80d2cc:	20c03fcc 	andi	r3,r4,255
  80d2d0:	180897fa 	slli	r4,r3,31
  80d2d4:	00c00434 	movhi	r3,16
  80d2d8:	18ffffc4 	addi	r3,r3,-1
  80d2dc:	28c6703a 	and	r3,r5,r3
  80d2e0:	1c06b03a 	or	r3,r3,r16
  80d2e4:	1906b03a 	or	r3,r3,r4
  80d2e8:	dfc00417 	ldw	ra,16(sp)
  80d2ec:	dcc00317 	ldw	r19,12(sp)
  80d2f0:	dc800217 	ldw	r18,8(sp)
  80d2f4:	dc400117 	ldw	r17,4(sp)
  80d2f8:	dc000017 	ldw	r16,0(sp)
  80d2fc:	dec00504 	addi	sp,sp,20
  80d300:	f800283a 	ret
  80d304:	0101ffc4 	movi	r4,2047
  80d308:	813fd626 	beq	r16,r4,80d264 <__alt_mem_onchip_mem+0xff805264>
  80d30c:	29402034 	orhi	r5,r5,128
  80d310:	01000e04 	movi	r4,56
  80d314:	2080a316 	blt	r4,r2,80d5a4 <__subdf3+0x3c4>
  80d318:	010007c4 	movi	r4,31
  80d31c:	2080c616 	blt	r4,r2,80d638 <__subdf3+0x458>
  80d320:	01000804 	movi	r4,32
  80d324:	2089c83a 	sub	r4,r4,r2
  80d328:	2910983a 	sll	r8,r5,r4
  80d32c:	308ed83a 	srl	r7,r6,r2
  80d330:	3108983a 	sll	r4,r6,r4
  80d334:	2884d83a 	srl	r2,r5,r2
  80d338:	41ccb03a 	or	r6,r8,r7
  80d33c:	2008c03a 	cmpne	r4,r4,zero
  80d340:	310cb03a 	or	r6,r6,r4
  80d344:	898dc83a 	sub	r6,r17,r6
  80d348:	89a3803a 	cmpltu	r17,r17,r6
  80d34c:	1887c83a 	sub	r3,r3,r2
  80d350:	1c47c83a 	sub	r3,r3,r17
  80d354:	3023883a 	mov	r17,r6
  80d358:	1880202c 	andhi	r2,r3,128
  80d35c:	10002326 	beq	r2,zero,80d3ec <__subdf3+0x20c>
  80d360:	04c02034 	movhi	r19,128
  80d364:	9cffffc4 	addi	r19,r19,-1
  80d368:	1ce6703a 	and	r19,r3,r19
  80d36c:	98007a26 	beq	r19,zero,80d558 <__subdf3+0x378>
  80d370:	9809883a 	mov	r4,r19
  80d374:	080dce00 	call	80dce0 <__clzsi2>
  80d378:	113ffe04 	addi	r4,r2,-8
  80d37c:	00c007c4 	movi	r3,31
  80d380:	19007b16 	blt	r3,r4,80d570 <__subdf3+0x390>
  80d384:	00800804 	movi	r2,32
  80d388:	1105c83a 	sub	r2,r2,r4
  80d38c:	8884d83a 	srl	r2,r17,r2
  80d390:	9906983a 	sll	r3,r19,r4
  80d394:	8922983a 	sll	r17,r17,r4
  80d398:	10c4b03a 	or	r2,r2,r3
  80d39c:	24007816 	blt	r4,r16,80d580 <__subdf3+0x3a0>
  80d3a0:	2421c83a 	sub	r16,r4,r16
  80d3a4:	80c00044 	addi	r3,r16,1
  80d3a8:	010007c4 	movi	r4,31
  80d3ac:	20c09516 	blt	r4,r3,80d604 <__subdf3+0x424>
  80d3b0:	01400804 	movi	r5,32
  80d3b4:	28cbc83a 	sub	r5,r5,r3
  80d3b8:	88c8d83a 	srl	r4,r17,r3
  80d3bc:	8962983a 	sll	r17,r17,r5
  80d3c0:	114a983a 	sll	r5,r2,r5
  80d3c4:	10c6d83a 	srl	r3,r2,r3
  80d3c8:	8804c03a 	cmpne	r2,r17,zero
  80d3cc:	290ab03a 	or	r5,r5,r4
  80d3d0:	28a2b03a 	or	r17,r5,r2
  80d3d4:	0021883a 	mov	r16,zero
  80d3d8:	003fa206 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d3dc:	2090b03a 	or	r8,r4,r2
  80d3e0:	40018e26 	beq	r8,zero,80da1c <__subdf3+0x83c>
  80d3e4:	1007883a 	mov	r3,r2
  80d3e8:	2023883a 	mov	r17,r4
  80d3ec:	888001cc 	andi	r2,r17,7
  80d3f0:	103f9e1e 	bne	r2,zero,80d26c <__alt_mem_onchip_mem+0xff80526c>
  80d3f4:	1804977a 	slli	r2,r3,29
  80d3f8:	8822d0fa 	srli	r17,r17,3
  80d3fc:	1810d0fa 	srli	r8,r3,3
  80d400:	9100004c 	andi	r4,r18,1
  80d404:	1444b03a 	or	r2,r2,r17
  80d408:	00c1ffc4 	movi	r3,2047
  80d40c:	80c02826 	beq	r16,r3,80d4b0 <__subdf3+0x2d0>
  80d410:	01400434 	movhi	r5,16
  80d414:	297fffc4 	addi	r5,r5,-1
  80d418:	80e0703a 	and	r16,r16,r3
  80d41c:	414a703a 	and	r5,r8,r5
  80d420:	003fa806 	br	80d2c4 <__alt_mem_onchip_mem+0xff8052c4>
  80d424:	0080630e 	bge	zero,r2,80d5b4 <__subdf3+0x3d4>
  80d428:	48003026 	beq	r9,zero,80d4ec <__subdf3+0x30c>
  80d42c:	0101ffc4 	movi	r4,2047
  80d430:	813f8c26 	beq	r16,r4,80d264 <__alt_mem_onchip_mem+0xff805264>
  80d434:	29402034 	orhi	r5,r5,128
  80d438:	01000e04 	movi	r4,56
  80d43c:	2080a90e 	bge	r4,r2,80d6e4 <__subdf3+0x504>
  80d440:	298cb03a 	or	r6,r5,r6
  80d444:	3012c03a 	cmpne	r9,r6,zero
  80d448:	0005883a 	mov	r2,zero
  80d44c:	4c53883a 	add	r9,r9,r17
  80d450:	4c63803a 	cmpltu	r17,r9,r17
  80d454:	10c7883a 	add	r3,r2,r3
  80d458:	88c7883a 	add	r3,r17,r3
  80d45c:	4823883a 	mov	r17,r9
  80d460:	1880202c 	andhi	r2,r3,128
  80d464:	1000d026 	beq	r2,zero,80d7a8 <__subdf3+0x5c8>
  80d468:	84000044 	addi	r16,r16,1
  80d46c:	0081ffc4 	movi	r2,2047
  80d470:	8080fe26 	beq	r16,r2,80d86c <__subdf3+0x68c>
  80d474:	00bfe034 	movhi	r2,65408
  80d478:	10bfffc4 	addi	r2,r2,-1
  80d47c:	1886703a 	and	r3,r3,r2
  80d480:	880ad07a 	srli	r5,r17,1
  80d484:	180497fa 	slli	r2,r3,31
  80d488:	8900004c 	andi	r4,r17,1
  80d48c:	2922b03a 	or	r17,r5,r4
  80d490:	1806d07a 	srli	r3,r3,1
  80d494:	1462b03a 	or	r17,r2,r17
  80d498:	3825883a 	mov	r18,r7
  80d49c:	003f7106 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d4a0:	2984b03a 	or	r2,r5,r6
  80d4a4:	103f6826 	beq	r2,zero,80d248 <__alt_mem_onchip_mem+0xff805248>
  80d4a8:	39c03fcc 	andi	r7,r7,255
  80d4ac:	003f6706 	br	80d24c <__alt_mem_onchip_mem+0xff80524c>
  80d4b0:	4086b03a 	or	r3,r8,r2
  80d4b4:	18015226 	beq	r3,zero,80da00 <__subdf3+0x820>
  80d4b8:	00c00434 	movhi	r3,16
  80d4bc:	41400234 	orhi	r5,r8,8
  80d4c0:	18ffffc4 	addi	r3,r3,-1
  80d4c4:	28ca703a 	and	r5,r5,r3
  80d4c8:	003f7e06 	br	80d2c4 <__alt_mem_onchip_mem+0xff8052c4>
  80d4cc:	10bfffc4 	addi	r2,r2,-1
  80d4d0:	1000491e 	bne	r2,zero,80d5f8 <__subdf3+0x418>
  80d4d4:	898fc83a 	sub	r7,r17,r6
  80d4d8:	89e3803a 	cmpltu	r17,r17,r7
  80d4dc:	1947c83a 	sub	r3,r3,r5
  80d4e0:	1c47c83a 	sub	r3,r3,r17
  80d4e4:	3823883a 	mov	r17,r7
  80d4e8:	003f9b06 	br	80d358 <__alt_mem_onchip_mem+0xff805358>
  80d4ec:	2988b03a 	or	r4,r5,r6
  80d4f0:	203f5c26 	beq	r4,zero,80d264 <__alt_mem_onchip_mem+0xff805264>
  80d4f4:	10bfffc4 	addi	r2,r2,-1
  80d4f8:	1000931e 	bne	r2,zero,80d748 <__subdf3+0x568>
  80d4fc:	898d883a 	add	r6,r17,r6
  80d500:	3463803a 	cmpltu	r17,r6,r17
  80d504:	1947883a 	add	r3,r3,r5
  80d508:	88c7883a 	add	r3,r17,r3
  80d50c:	3023883a 	mov	r17,r6
  80d510:	003fd306 	br	80d460 <__alt_mem_onchip_mem+0xff805460>
  80d514:	1000541e 	bne	r2,zero,80d668 <__subdf3+0x488>
  80d518:	80800044 	addi	r2,r16,1
  80d51c:	1081ffcc 	andi	r2,r2,2047
  80d520:	01000044 	movi	r4,1
  80d524:	2080a20e 	bge	r4,r2,80d7b0 <__subdf3+0x5d0>
  80d528:	8989c83a 	sub	r4,r17,r6
  80d52c:	8905803a 	cmpltu	r2,r17,r4
  80d530:	1967c83a 	sub	r19,r3,r5
  80d534:	98a7c83a 	sub	r19,r19,r2
  80d538:	9880202c 	andhi	r2,r19,128
  80d53c:	10006326 	beq	r2,zero,80d6cc <__subdf3+0x4ec>
  80d540:	3463c83a 	sub	r17,r6,r17
  80d544:	28c7c83a 	sub	r3,r5,r3
  80d548:	344d803a 	cmpltu	r6,r6,r17
  80d54c:	19a7c83a 	sub	r19,r3,r6
  80d550:	3825883a 	mov	r18,r7
  80d554:	983f861e 	bne	r19,zero,80d370 <__alt_mem_onchip_mem+0xff805370>
  80d558:	8809883a 	mov	r4,r17
  80d55c:	080dce00 	call	80dce0 <__clzsi2>
  80d560:	10800804 	addi	r2,r2,32
  80d564:	113ffe04 	addi	r4,r2,-8
  80d568:	00c007c4 	movi	r3,31
  80d56c:	193f850e 	bge	r3,r4,80d384 <__alt_mem_onchip_mem+0xff805384>
  80d570:	10bff604 	addi	r2,r2,-40
  80d574:	8884983a 	sll	r2,r17,r2
  80d578:	0023883a 	mov	r17,zero
  80d57c:	243f880e 	bge	r4,r16,80d3a0 <__alt_mem_onchip_mem+0xff8053a0>
  80d580:	00ffe034 	movhi	r3,65408
  80d584:	18ffffc4 	addi	r3,r3,-1
  80d588:	8121c83a 	sub	r16,r16,r4
  80d58c:	10c6703a 	and	r3,r2,r3
  80d590:	003f3406 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d594:	9100004c 	andi	r4,r18,1
  80d598:	000b883a 	mov	r5,zero
  80d59c:	0005883a 	mov	r2,zero
  80d5a0:	003f4806 	br	80d2c4 <__alt_mem_onchip_mem+0xff8052c4>
  80d5a4:	298cb03a 	or	r6,r5,r6
  80d5a8:	300cc03a 	cmpne	r6,r6,zero
  80d5ac:	0005883a 	mov	r2,zero
  80d5b0:	003f6406 	br	80d344 <__alt_mem_onchip_mem+0xff805344>
  80d5b4:	10009a1e 	bne	r2,zero,80d820 <__subdf3+0x640>
  80d5b8:	82400044 	addi	r9,r16,1
  80d5bc:	4881ffcc 	andi	r2,r9,2047
  80d5c0:	02800044 	movi	r10,1
  80d5c4:	5080670e 	bge	r10,r2,80d764 <__subdf3+0x584>
  80d5c8:	0081ffc4 	movi	r2,2047
  80d5cc:	4880af26 	beq	r9,r2,80d88c <__subdf3+0x6ac>
  80d5d0:	898d883a 	add	r6,r17,r6
  80d5d4:	1945883a 	add	r2,r3,r5
  80d5d8:	3447803a 	cmpltu	r3,r6,r17
  80d5dc:	1887883a 	add	r3,r3,r2
  80d5e0:	182297fa 	slli	r17,r3,31
  80d5e4:	300cd07a 	srli	r6,r6,1
  80d5e8:	1806d07a 	srli	r3,r3,1
  80d5ec:	4821883a 	mov	r16,r9
  80d5f0:	89a2b03a 	or	r17,r17,r6
  80d5f4:	003f1b06 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d5f8:	0101ffc4 	movi	r4,2047
  80d5fc:	813f441e 	bne	r16,r4,80d310 <__alt_mem_onchip_mem+0xff805310>
  80d600:	003f1806 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d604:	843ff844 	addi	r16,r16,-31
  80d608:	01400804 	movi	r5,32
  80d60c:	1408d83a 	srl	r4,r2,r16
  80d610:	19405026 	beq	r3,r5,80d754 <__subdf3+0x574>
  80d614:	01401004 	movi	r5,64
  80d618:	28c7c83a 	sub	r3,r5,r3
  80d61c:	10c4983a 	sll	r2,r2,r3
  80d620:	88a2b03a 	or	r17,r17,r2
  80d624:	8822c03a 	cmpne	r17,r17,zero
  80d628:	2462b03a 	or	r17,r4,r17
  80d62c:	0007883a 	mov	r3,zero
  80d630:	0021883a 	mov	r16,zero
  80d634:	003f6d06 	br	80d3ec <__alt_mem_onchip_mem+0xff8053ec>
  80d638:	11fff804 	addi	r7,r2,-32
  80d63c:	01000804 	movi	r4,32
  80d640:	29ced83a 	srl	r7,r5,r7
  80d644:	11004526 	beq	r2,r4,80d75c <__subdf3+0x57c>
  80d648:	01001004 	movi	r4,64
  80d64c:	2089c83a 	sub	r4,r4,r2
  80d650:	2904983a 	sll	r2,r5,r4
  80d654:	118cb03a 	or	r6,r2,r6
  80d658:	300cc03a 	cmpne	r6,r6,zero
  80d65c:	398cb03a 	or	r6,r7,r6
  80d660:	0005883a 	mov	r2,zero
  80d664:	003f3706 	br	80d344 <__alt_mem_onchip_mem+0xff805344>
  80d668:	80002a26 	beq	r16,zero,80d714 <__subdf3+0x534>
  80d66c:	0101ffc4 	movi	r4,2047
  80d670:	49006626 	beq	r9,r4,80d80c <__subdf3+0x62c>
  80d674:	0085c83a 	sub	r2,zero,r2
  80d678:	18c02034 	orhi	r3,r3,128
  80d67c:	01000e04 	movi	r4,56
  80d680:	20807e16 	blt	r4,r2,80d87c <__subdf3+0x69c>
  80d684:	010007c4 	movi	r4,31
  80d688:	2080e716 	blt	r4,r2,80da28 <__subdf3+0x848>
  80d68c:	01000804 	movi	r4,32
  80d690:	2089c83a 	sub	r4,r4,r2
  80d694:	1914983a 	sll	r10,r3,r4
  80d698:	8890d83a 	srl	r8,r17,r2
  80d69c:	8908983a 	sll	r4,r17,r4
  80d6a0:	1884d83a 	srl	r2,r3,r2
  80d6a4:	5222b03a 	or	r17,r10,r8
  80d6a8:	2006c03a 	cmpne	r3,r4,zero
  80d6ac:	88e2b03a 	or	r17,r17,r3
  80d6b0:	3463c83a 	sub	r17,r6,r17
  80d6b4:	2885c83a 	sub	r2,r5,r2
  80d6b8:	344d803a 	cmpltu	r6,r6,r17
  80d6bc:	1187c83a 	sub	r3,r2,r6
  80d6c0:	4821883a 	mov	r16,r9
  80d6c4:	3825883a 	mov	r18,r7
  80d6c8:	003f2306 	br	80d358 <__alt_mem_onchip_mem+0xff805358>
  80d6cc:	24d0b03a 	or	r8,r4,r19
  80d6d0:	40001b1e 	bne	r8,zero,80d740 <__subdf3+0x560>
  80d6d4:	0005883a 	mov	r2,zero
  80d6d8:	0009883a 	mov	r4,zero
  80d6dc:	0021883a 	mov	r16,zero
  80d6e0:	003f4906 	br	80d408 <__alt_mem_onchip_mem+0xff805408>
  80d6e4:	010007c4 	movi	r4,31
  80d6e8:	20803a16 	blt	r4,r2,80d7d4 <__subdf3+0x5f4>
  80d6ec:	01000804 	movi	r4,32
  80d6f0:	2089c83a 	sub	r4,r4,r2
  80d6f4:	2912983a 	sll	r9,r5,r4
  80d6f8:	3090d83a 	srl	r8,r6,r2
  80d6fc:	3108983a 	sll	r4,r6,r4
  80d700:	2884d83a 	srl	r2,r5,r2
  80d704:	4a12b03a 	or	r9,r9,r8
  80d708:	2008c03a 	cmpne	r4,r4,zero
  80d70c:	4912b03a 	or	r9,r9,r4
  80d710:	003f4e06 	br	80d44c <__alt_mem_onchip_mem+0xff80544c>
  80d714:	1c48b03a 	or	r4,r3,r17
  80d718:	20003c26 	beq	r4,zero,80d80c <__subdf3+0x62c>
  80d71c:	0084303a 	nor	r2,zero,r2
  80d720:	1000381e 	bne	r2,zero,80d804 <__subdf3+0x624>
  80d724:	3463c83a 	sub	r17,r6,r17
  80d728:	28c5c83a 	sub	r2,r5,r3
  80d72c:	344d803a 	cmpltu	r6,r6,r17
  80d730:	1187c83a 	sub	r3,r2,r6
  80d734:	4821883a 	mov	r16,r9
  80d738:	3825883a 	mov	r18,r7
  80d73c:	003f0606 	br	80d358 <__alt_mem_onchip_mem+0xff805358>
  80d740:	2023883a 	mov	r17,r4
  80d744:	003f0906 	br	80d36c <__alt_mem_onchip_mem+0xff80536c>
  80d748:	0101ffc4 	movi	r4,2047
  80d74c:	813f3a1e 	bne	r16,r4,80d438 <__alt_mem_onchip_mem+0xff805438>
  80d750:	003ec406 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d754:	0005883a 	mov	r2,zero
  80d758:	003fb106 	br	80d620 <__alt_mem_onchip_mem+0xff805620>
  80d75c:	0005883a 	mov	r2,zero
  80d760:	003fbc06 	br	80d654 <__alt_mem_onchip_mem+0xff805654>
  80d764:	1c44b03a 	or	r2,r3,r17
  80d768:	80008e1e 	bne	r16,zero,80d9a4 <__subdf3+0x7c4>
  80d76c:	1000c826 	beq	r2,zero,80da90 <__subdf3+0x8b0>
  80d770:	2984b03a 	or	r2,r5,r6
  80d774:	103ebb26 	beq	r2,zero,80d264 <__alt_mem_onchip_mem+0xff805264>
  80d778:	8989883a 	add	r4,r17,r6
  80d77c:	1945883a 	add	r2,r3,r5
  80d780:	2447803a 	cmpltu	r3,r4,r17
  80d784:	1887883a 	add	r3,r3,r2
  80d788:	1880202c 	andhi	r2,r3,128
  80d78c:	2023883a 	mov	r17,r4
  80d790:	103f1626 	beq	r2,zero,80d3ec <__alt_mem_onchip_mem+0xff8053ec>
  80d794:	00bfe034 	movhi	r2,65408
  80d798:	10bfffc4 	addi	r2,r2,-1
  80d79c:	5021883a 	mov	r16,r10
  80d7a0:	1886703a 	and	r3,r3,r2
  80d7a4:	003eaf06 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d7a8:	3825883a 	mov	r18,r7
  80d7ac:	003f0f06 	br	80d3ec <__alt_mem_onchip_mem+0xff8053ec>
  80d7b0:	1c44b03a 	or	r2,r3,r17
  80d7b4:	8000251e 	bne	r16,zero,80d84c <__subdf3+0x66c>
  80d7b8:	1000661e 	bne	r2,zero,80d954 <__subdf3+0x774>
  80d7bc:	2990b03a 	or	r8,r5,r6
  80d7c0:	40009626 	beq	r8,zero,80da1c <__subdf3+0x83c>
  80d7c4:	2807883a 	mov	r3,r5
  80d7c8:	3023883a 	mov	r17,r6
  80d7cc:	3825883a 	mov	r18,r7
  80d7d0:	003ea406 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d7d4:	127ff804 	addi	r9,r2,-32
  80d7d8:	01000804 	movi	r4,32
  80d7dc:	2a52d83a 	srl	r9,r5,r9
  80d7e0:	11008c26 	beq	r2,r4,80da14 <__subdf3+0x834>
  80d7e4:	01001004 	movi	r4,64
  80d7e8:	2085c83a 	sub	r2,r4,r2
  80d7ec:	2884983a 	sll	r2,r5,r2
  80d7f0:	118cb03a 	or	r6,r2,r6
  80d7f4:	300cc03a 	cmpne	r6,r6,zero
  80d7f8:	4992b03a 	or	r9,r9,r6
  80d7fc:	0005883a 	mov	r2,zero
  80d800:	003f1206 	br	80d44c <__alt_mem_onchip_mem+0xff80544c>
  80d804:	0101ffc4 	movi	r4,2047
  80d808:	493f9c1e 	bne	r9,r4,80d67c <__alt_mem_onchip_mem+0xff80567c>
  80d80c:	2807883a 	mov	r3,r5
  80d810:	3023883a 	mov	r17,r6
  80d814:	4821883a 	mov	r16,r9
  80d818:	3825883a 	mov	r18,r7
  80d81c:	003e9106 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d820:	80001f1e 	bne	r16,zero,80d8a0 <__subdf3+0x6c0>
  80d824:	1c48b03a 	or	r4,r3,r17
  80d828:	20005a26 	beq	r4,zero,80d994 <__subdf3+0x7b4>
  80d82c:	0084303a 	nor	r2,zero,r2
  80d830:	1000561e 	bne	r2,zero,80d98c <__subdf3+0x7ac>
  80d834:	89a3883a 	add	r17,r17,r6
  80d838:	1945883a 	add	r2,r3,r5
  80d83c:	898d803a 	cmpltu	r6,r17,r6
  80d840:	3087883a 	add	r3,r6,r2
  80d844:	4821883a 	mov	r16,r9
  80d848:	003f0506 	br	80d460 <__alt_mem_onchip_mem+0xff805460>
  80d84c:	10002b1e 	bne	r2,zero,80d8fc <__subdf3+0x71c>
  80d850:	2984b03a 	or	r2,r5,r6
  80d854:	10008026 	beq	r2,zero,80da58 <__subdf3+0x878>
  80d858:	2807883a 	mov	r3,r5
  80d85c:	3023883a 	mov	r17,r6
  80d860:	3825883a 	mov	r18,r7
  80d864:	0401ffc4 	movi	r16,2047
  80d868:	003e7e06 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d86c:	3809883a 	mov	r4,r7
  80d870:	0011883a 	mov	r8,zero
  80d874:	0005883a 	mov	r2,zero
  80d878:	003ee306 	br	80d408 <__alt_mem_onchip_mem+0xff805408>
  80d87c:	1c62b03a 	or	r17,r3,r17
  80d880:	8822c03a 	cmpne	r17,r17,zero
  80d884:	0005883a 	mov	r2,zero
  80d888:	003f8906 	br	80d6b0 <__alt_mem_onchip_mem+0xff8056b0>
  80d88c:	3809883a 	mov	r4,r7
  80d890:	4821883a 	mov	r16,r9
  80d894:	0011883a 	mov	r8,zero
  80d898:	0005883a 	mov	r2,zero
  80d89c:	003eda06 	br	80d408 <__alt_mem_onchip_mem+0xff805408>
  80d8a0:	0101ffc4 	movi	r4,2047
  80d8a4:	49003b26 	beq	r9,r4,80d994 <__subdf3+0x7b4>
  80d8a8:	0085c83a 	sub	r2,zero,r2
  80d8ac:	18c02034 	orhi	r3,r3,128
  80d8b0:	01000e04 	movi	r4,56
  80d8b4:	20806e16 	blt	r4,r2,80da70 <__subdf3+0x890>
  80d8b8:	010007c4 	movi	r4,31
  80d8bc:	20807716 	blt	r4,r2,80da9c <__subdf3+0x8bc>
  80d8c0:	01000804 	movi	r4,32
  80d8c4:	2089c83a 	sub	r4,r4,r2
  80d8c8:	1914983a 	sll	r10,r3,r4
  80d8cc:	8890d83a 	srl	r8,r17,r2
  80d8d0:	8908983a 	sll	r4,r17,r4
  80d8d4:	1884d83a 	srl	r2,r3,r2
  80d8d8:	5222b03a 	or	r17,r10,r8
  80d8dc:	2006c03a 	cmpne	r3,r4,zero
  80d8e0:	88e2b03a 	or	r17,r17,r3
  80d8e4:	89a3883a 	add	r17,r17,r6
  80d8e8:	1145883a 	add	r2,r2,r5
  80d8ec:	898d803a 	cmpltu	r6,r17,r6
  80d8f0:	3087883a 	add	r3,r6,r2
  80d8f4:	4821883a 	mov	r16,r9
  80d8f8:	003ed906 	br	80d460 <__alt_mem_onchip_mem+0xff805460>
  80d8fc:	2984b03a 	or	r2,r5,r6
  80d900:	10004226 	beq	r2,zero,80da0c <__subdf3+0x82c>
  80d904:	1808d0fa 	srli	r4,r3,3
  80d908:	8822d0fa 	srli	r17,r17,3
  80d90c:	1806977a 	slli	r3,r3,29
  80d910:	2080022c 	andhi	r2,r4,8
  80d914:	1c62b03a 	or	r17,r3,r17
  80d918:	10000826 	beq	r2,zero,80d93c <__subdf3+0x75c>
  80d91c:	2812d0fa 	srli	r9,r5,3
  80d920:	4880022c 	andhi	r2,r9,8
  80d924:	1000051e 	bne	r2,zero,80d93c <__subdf3+0x75c>
  80d928:	300cd0fa 	srli	r6,r6,3
  80d92c:	2804977a 	slli	r2,r5,29
  80d930:	4809883a 	mov	r4,r9
  80d934:	3825883a 	mov	r18,r7
  80d938:	11a2b03a 	or	r17,r2,r6
  80d93c:	8806d77a 	srli	r3,r17,29
  80d940:	200890fa 	slli	r4,r4,3
  80d944:	882290fa 	slli	r17,r17,3
  80d948:	0401ffc4 	movi	r16,2047
  80d94c:	1906b03a 	or	r3,r3,r4
  80d950:	003e4406 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d954:	2984b03a 	or	r2,r5,r6
  80d958:	103e4226 	beq	r2,zero,80d264 <__alt_mem_onchip_mem+0xff805264>
  80d95c:	8989c83a 	sub	r4,r17,r6
  80d960:	8911803a 	cmpltu	r8,r17,r4
  80d964:	1945c83a 	sub	r2,r3,r5
  80d968:	1205c83a 	sub	r2,r2,r8
  80d96c:	1200202c 	andhi	r8,r2,128
  80d970:	403e9a26 	beq	r8,zero,80d3dc <__alt_mem_onchip_mem+0xff8053dc>
  80d974:	3463c83a 	sub	r17,r6,r17
  80d978:	28c5c83a 	sub	r2,r5,r3
  80d97c:	344d803a 	cmpltu	r6,r6,r17
  80d980:	1187c83a 	sub	r3,r2,r6
  80d984:	3825883a 	mov	r18,r7
  80d988:	003e3606 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d98c:	0101ffc4 	movi	r4,2047
  80d990:	493fc71e 	bne	r9,r4,80d8b0 <__alt_mem_onchip_mem+0xff8058b0>
  80d994:	2807883a 	mov	r3,r5
  80d998:	3023883a 	mov	r17,r6
  80d99c:	4821883a 	mov	r16,r9
  80d9a0:	003e3006 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80d9a4:	10003626 	beq	r2,zero,80da80 <__subdf3+0x8a0>
  80d9a8:	2984b03a 	or	r2,r5,r6
  80d9ac:	10001726 	beq	r2,zero,80da0c <__subdf3+0x82c>
  80d9b0:	1808d0fa 	srli	r4,r3,3
  80d9b4:	8822d0fa 	srli	r17,r17,3
  80d9b8:	1806977a 	slli	r3,r3,29
  80d9bc:	2080022c 	andhi	r2,r4,8
  80d9c0:	1c62b03a 	or	r17,r3,r17
  80d9c4:	10000726 	beq	r2,zero,80d9e4 <__subdf3+0x804>
  80d9c8:	2812d0fa 	srli	r9,r5,3
  80d9cc:	4880022c 	andhi	r2,r9,8
  80d9d0:	1000041e 	bne	r2,zero,80d9e4 <__subdf3+0x804>
  80d9d4:	300cd0fa 	srli	r6,r6,3
  80d9d8:	2804977a 	slli	r2,r5,29
  80d9dc:	4809883a 	mov	r4,r9
  80d9e0:	11a2b03a 	or	r17,r2,r6
  80d9e4:	8806d77a 	srli	r3,r17,29
  80d9e8:	200890fa 	slli	r4,r4,3
  80d9ec:	882290fa 	slli	r17,r17,3
  80d9f0:	3825883a 	mov	r18,r7
  80d9f4:	1906b03a 	or	r3,r3,r4
  80d9f8:	0401ffc4 	movi	r16,2047
  80d9fc:	003e1906 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80da00:	000b883a 	mov	r5,zero
  80da04:	0005883a 	mov	r2,zero
  80da08:	003e2e06 	br	80d2c4 <__alt_mem_onchip_mem+0xff8052c4>
  80da0c:	0401ffc4 	movi	r16,2047
  80da10:	003e1406 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80da14:	0005883a 	mov	r2,zero
  80da18:	003f7506 	br	80d7f0 <__alt_mem_onchip_mem+0xff8057f0>
  80da1c:	0005883a 	mov	r2,zero
  80da20:	0009883a 	mov	r4,zero
  80da24:	003e7806 	br	80d408 <__alt_mem_onchip_mem+0xff805408>
  80da28:	123ff804 	addi	r8,r2,-32
  80da2c:	01000804 	movi	r4,32
  80da30:	1a10d83a 	srl	r8,r3,r8
  80da34:	11002526 	beq	r2,r4,80dacc <__subdf3+0x8ec>
  80da38:	01001004 	movi	r4,64
  80da3c:	2085c83a 	sub	r2,r4,r2
  80da40:	1884983a 	sll	r2,r3,r2
  80da44:	1444b03a 	or	r2,r2,r17
  80da48:	1004c03a 	cmpne	r2,r2,zero
  80da4c:	40a2b03a 	or	r17,r8,r2
  80da50:	0005883a 	mov	r2,zero
  80da54:	003f1606 	br	80d6b0 <__alt_mem_onchip_mem+0xff8056b0>
  80da58:	02000434 	movhi	r8,16
  80da5c:	0009883a 	mov	r4,zero
  80da60:	423fffc4 	addi	r8,r8,-1
  80da64:	00bfffc4 	movi	r2,-1
  80da68:	0401ffc4 	movi	r16,2047
  80da6c:	003e6606 	br	80d408 <__alt_mem_onchip_mem+0xff805408>
  80da70:	1c62b03a 	or	r17,r3,r17
  80da74:	8822c03a 	cmpne	r17,r17,zero
  80da78:	0005883a 	mov	r2,zero
  80da7c:	003f9906 	br	80d8e4 <__alt_mem_onchip_mem+0xff8058e4>
  80da80:	2807883a 	mov	r3,r5
  80da84:	3023883a 	mov	r17,r6
  80da88:	0401ffc4 	movi	r16,2047
  80da8c:	003df506 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80da90:	2807883a 	mov	r3,r5
  80da94:	3023883a 	mov	r17,r6
  80da98:	003df206 	br	80d264 <__alt_mem_onchip_mem+0xff805264>
  80da9c:	123ff804 	addi	r8,r2,-32
  80daa0:	01000804 	movi	r4,32
  80daa4:	1a10d83a 	srl	r8,r3,r8
  80daa8:	11000a26 	beq	r2,r4,80dad4 <__subdf3+0x8f4>
  80daac:	01001004 	movi	r4,64
  80dab0:	2085c83a 	sub	r2,r4,r2
  80dab4:	1884983a 	sll	r2,r3,r2
  80dab8:	1444b03a 	or	r2,r2,r17
  80dabc:	1004c03a 	cmpne	r2,r2,zero
  80dac0:	40a2b03a 	or	r17,r8,r2
  80dac4:	0005883a 	mov	r2,zero
  80dac8:	003f8606 	br	80d8e4 <__alt_mem_onchip_mem+0xff8058e4>
  80dacc:	0005883a 	mov	r2,zero
  80dad0:	003fdc06 	br	80da44 <__alt_mem_onchip_mem+0xff805a44>
  80dad4:	0005883a 	mov	r2,zero
  80dad8:	003ff706 	br	80dab8 <__alt_mem_onchip_mem+0xff805ab8>

0080dadc <__fixdfsi>:
  80dadc:	280cd53a 	srli	r6,r5,20
  80dae0:	00c00434 	movhi	r3,16
  80dae4:	18ffffc4 	addi	r3,r3,-1
  80dae8:	3181ffcc 	andi	r6,r6,2047
  80daec:	01c0ff84 	movi	r7,1022
  80daf0:	28c6703a 	and	r3,r5,r3
  80daf4:	280ad7fa 	srli	r5,r5,31
  80daf8:	3980120e 	bge	r7,r6,80db44 <__fixdfsi+0x68>
  80dafc:	00810744 	movi	r2,1053
  80db00:	11800c16 	blt	r2,r6,80db34 <__fixdfsi+0x58>
  80db04:	00810cc4 	movi	r2,1075
  80db08:	1185c83a 	sub	r2,r2,r6
  80db0c:	01c007c4 	movi	r7,31
  80db10:	18c00434 	orhi	r3,r3,16
  80db14:	38800d16 	blt	r7,r2,80db4c <__fixdfsi+0x70>
  80db18:	31befb44 	addi	r6,r6,-1043
  80db1c:	2084d83a 	srl	r2,r4,r2
  80db20:	1986983a 	sll	r3,r3,r6
  80db24:	1884b03a 	or	r2,r3,r2
  80db28:	28000726 	beq	r5,zero,80db48 <__fixdfsi+0x6c>
  80db2c:	0085c83a 	sub	r2,zero,r2
  80db30:	f800283a 	ret
  80db34:	00a00034 	movhi	r2,32768
  80db38:	10bfffc4 	addi	r2,r2,-1
  80db3c:	2885883a 	add	r2,r5,r2
  80db40:	f800283a 	ret
  80db44:	0005883a 	mov	r2,zero
  80db48:	f800283a 	ret
  80db4c:	008104c4 	movi	r2,1043
  80db50:	1185c83a 	sub	r2,r2,r6
  80db54:	1884d83a 	srl	r2,r3,r2
  80db58:	003ff306 	br	80db28 <__alt_mem_onchip_mem+0xff805b28>

0080db5c <__floatsidf>:
  80db5c:	defffd04 	addi	sp,sp,-12
  80db60:	dfc00215 	stw	ra,8(sp)
  80db64:	dc400115 	stw	r17,4(sp)
  80db68:	dc000015 	stw	r16,0(sp)
  80db6c:	20002b26 	beq	r4,zero,80dc1c <__floatsidf+0xc0>
  80db70:	2023883a 	mov	r17,r4
  80db74:	2020d7fa 	srli	r16,r4,31
  80db78:	20002d16 	blt	r4,zero,80dc30 <__floatsidf+0xd4>
  80db7c:	8809883a 	mov	r4,r17
  80db80:	080dce00 	call	80dce0 <__clzsi2>
  80db84:	01410784 	movi	r5,1054
  80db88:	288bc83a 	sub	r5,r5,r2
  80db8c:	01010cc4 	movi	r4,1075
  80db90:	2149c83a 	sub	r4,r4,r5
  80db94:	00c007c4 	movi	r3,31
  80db98:	1900160e 	bge	r3,r4,80dbf4 <__floatsidf+0x98>
  80db9c:	00c104c4 	movi	r3,1043
  80dba0:	1947c83a 	sub	r3,r3,r5
  80dba4:	88c6983a 	sll	r3,r17,r3
  80dba8:	00800434 	movhi	r2,16
  80dbac:	10bfffc4 	addi	r2,r2,-1
  80dbb0:	1886703a 	and	r3,r3,r2
  80dbb4:	2941ffcc 	andi	r5,r5,2047
  80dbb8:	800d883a 	mov	r6,r16
  80dbbc:	0005883a 	mov	r2,zero
  80dbc0:	280a953a 	slli	r5,r5,20
  80dbc4:	31803fcc 	andi	r6,r6,255
  80dbc8:	01000434 	movhi	r4,16
  80dbcc:	300c97fa 	slli	r6,r6,31
  80dbd0:	213fffc4 	addi	r4,r4,-1
  80dbd4:	1906703a 	and	r3,r3,r4
  80dbd8:	1946b03a 	or	r3,r3,r5
  80dbdc:	1986b03a 	or	r3,r3,r6
  80dbe0:	dfc00217 	ldw	ra,8(sp)
  80dbe4:	dc400117 	ldw	r17,4(sp)
  80dbe8:	dc000017 	ldw	r16,0(sp)
  80dbec:	dec00304 	addi	sp,sp,12
  80dbf0:	f800283a 	ret
  80dbf4:	00c002c4 	movi	r3,11
  80dbf8:	1887c83a 	sub	r3,r3,r2
  80dbfc:	88c6d83a 	srl	r3,r17,r3
  80dc00:	8904983a 	sll	r2,r17,r4
  80dc04:	01000434 	movhi	r4,16
  80dc08:	213fffc4 	addi	r4,r4,-1
  80dc0c:	2941ffcc 	andi	r5,r5,2047
  80dc10:	1906703a 	and	r3,r3,r4
  80dc14:	800d883a 	mov	r6,r16
  80dc18:	003fe906 	br	80dbc0 <__alt_mem_onchip_mem+0xff805bc0>
  80dc1c:	000d883a 	mov	r6,zero
  80dc20:	000b883a 	mov	r5,zero
  80dc24:	0007883a 	mov	r3,zero
  80dc28:	0005883a 	mov	r2,zero
  80dc2c:	003fe406 	br	80dbc0 <__alt_mem_onchip_mem+0xff805bc0>
  80dc30:	0123c83a 	sub	r17,zero,r4
  80dc34:	003fd106 	br	80db7c <__alt_mem_onchip_mem+0xff805b7c>

0080dc38 <__floatunsidf>:
  80dc38:	defffe04 	addi	sp,sp,-8
  80dc3c:	dc000015 	stw	r16,0(sp)
  80dc40:	dfc00115 	stw	ra,4(sp)
  80dc44:	2021883a 	mov	r16,r4
  80dc48:	20002226 	beq	r4,zero,80dcd4 <__floatunsidf+0x9c>
  80dc4c:	080dce00 	call	80dce0 <__clzsi2>
  80dc50:	01010784 	movi	r4,1054
  80dc54:	2089c83a 	sub	r4,r4,r2
  80dc58:	01810cc4 	movi	r6,1075
  80dc5c:	310dc83a 	sub	r6,r6,r4
  80dc60:	00c007c4 	movi	r3,31
  80dc64:	1980120e 	bge	r3,r6,80dcb0 <__floatunsidf+0x78>
  80dc68:	00c104c4 	movi	r3,1043
  80dc6c:	1907c83a 	sub	r3,r3,r4
  80dc70:	80ca983a 	sll	r5,r16,r3
  80dc74:	00800434 	movhi	r2,16
  80dc78:	10bfffc4 	addi	r2,r2,-1
  80dc7c:	2101ffcc 	andi	r4,r4,2047
  80dc80:	0021883a 	mov	r16,zero
  80dc84:	288a703a 	and	r5,r5,r2
  80dc88:	2008953a 	slli	r4,r4,20
  80dc8c:	00c00434 	movhi	r3,16
  80dc90:	18ffffc4 	addi	r3,r3,-1
  80dc94:	28c6703a 	and	r3,r5,r3
  80dc98:	8005883a 	mov	r2,r16
  80dc9c:	1906b03a 	or	r3,r3,r4
  80dca0:	dfc00117 	ldw	ra,4(sp)
  80dca4:	dc000017 	ldw	r16,0(sp)
  80dca8:	dec00204 	addi	sp,sp,8
  80dcac:	f800283a 	ret
  80dcb0:	00c002c4 	movi	r3,11
  80dcb4:	188bc83a 	sub	r5,r3,r2
  80dcb8:	814ad83a 	srl	r5,r16,r5
  80dcbc:	00c00434 	movhi	r3,16
  80dcc0:	18ffffc4 	addi	r3,r3,-1
  80dcc4:	81a0983a 	sll	r16,r16,r6
  80dcc8:	2101ffcc 	andi	r4,r4,2047
  80dccc:	28ca703a 	and	r5,r5,r3
  80dcd0:	003fed06 	br	80dc88 <__alt_mem_onchip_mem+0xff805c88>
  80dcd4:	0009883a 	mov	r4,zero
  80dcd8:	000b883a 	mov	r5,zero
  80dcdc:	003fea06 	br	80dc88 <__alt_mem_onchip_mem+0xff805c88>

0080dce0 <__clzsi2>:
  80dce0:	00bfffd4 	movui	r2,65535
  80dce4:	11000536 	bltu	r2,r4,80dcfc <__clzsi2+0x1c>
  80dce8:	00803fc4 	movi	r2,255
  80dcec:	11000f36 	bltu	r2,r4,80dd2c <__clzsi2+0x4c>
  80dcf0:	00800804 	movi	r2,32
  80dcf4:	0007883a 	mov	r3,zero
  80dcf8:	00000506 	br	80dd10 <__clzsi2+0x30>
  80dcfc:	00804034 	movhi	r2,256
  80dd00:	10bfffc4 	addi	r2,r2,-1
  80dd04:	11000c2e 	bgeu	r2,r4,80dd38 <__clzsi2+0x58>
  80dd08:	00800204 	movi	r2,8
  80dd0c:	00c00604 	movi	r3,24
  80dd10:	20c8d83a 	srl	r4,r4,r3
  80dd14:	00c02074 	movhi	r3,129
  80dd18:	18c87b04 	addi	r3,r3,8684
  80dd1c:	1909883a 	add	r4,r3,r4
  80dd20:	20c00003 	ldbu	r3,0(r4)
  80dd24:	10c5c83a 	sub	r2,r2,r3
  80dd28:	f800283a 	ret
  80dd2c:	00800604 	movi	r2,24
  80dd30:	00c00204 	movi	r3,8
  80dd34:	003ff606 	br	80dd10 <__alt_mem_onchip_mem+0xff805d10>
  80dd38:	00800404 	movi	r2,16
  80dd3c:	1007883a 	mov	r3,r2
  80dd40:	003ff306 	br	80dd10 <__alt_mem_onchip_mem+0xff805d10>

0080dd44 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80dd44:	defff504 	addi	sp,sp,-44
  80dd48:	df000a15 	stw	fp,40(sp)
  80dd4c:	df000a04 	addi	fp,sp,40
  80dd50:	e13ffc15 	stw	r4,-16(fp)
  80dd54:	e17ffd15 	stw	r5,-12(fp)
  80dd58:	e1bffe15 	stw	r6,-8(fp)
  80dd5c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80dd60:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80dd64:	d0a76517 	ldw	r2,-25196(gp)
  
  if (alt_ticks_per_second ())
  80dd68:	10003c26 	beq	r2,zero,80de5c <alt_alarm_start+0x118>
  {
    if (alarm)
  80dd6c:	e0bffc17 	ldw	r2,-16(fp)
  80dd70:	10003826 	beq	r2,zero,80de54 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80dd74:	e0bffc17 	ldw	r2,-16(fp)
  80dd78:	e0fffe17 	ldw	r3,-8(fp)
  80dd7c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80dd80:	e0bffc17 	ldw	r2,-16(fp)
  80dd84:	e0ffff17 	ldw	r3,-4(fp)
  80dd88:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd8c:	0005303a 	rdctl	r2,status
  80dd90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd94:	e0fff917 	ldw	r3,-28(fp)
  80dd98:	00bfff84 	movi	r2,-2
  80dd9c:	1884703a 	and	r2,r3,r2
  80dda0:	1001703a 	wrctl	status,r2
  
  return context;
  80dda4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80dda8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80ddac:	d0a76617 	ldw	r2,-25192(gp)
      
      current_nticks = alt_nticks();
  80ddb0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80ddb4:	e0fffd17 	ldw	r3,-12(fp)
  80ddb8:	e0bff617 	ldw	r2,-40(fp)
  80ddbc:	1885883a 	add	r2,r3,r2
  80ddc0:	10c00044 	addi	r3,r2,1
  80ddc4:	e0bffc17 	ldw	r2,-16(fp)
  80ddc8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80ddcc:	e0bffc17 	ldw	r2,-16(fp)
  80ddd0:	10c00217 	ldw	r3,8(r2)
  80ddd4:	e0bff617 	ldw	r2,-40(fp)
  80ddd8:	1880042e 	bgeu	r3,r2,80ddec <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80dddc:	e0bffc17 	ldw	r2,-16(fp)
  80dde0:	00c00044 	movi	r3,1
  80dde4:	10c00405 	stb	r3,16(r2)
  80dde8:	00000206 	br	80ddf4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80ddec:	e0bffc17 	ldw	r2,-16(fp)
  80ddf0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ddf4:	e0bffc17 	ldw	r2,-16(fp)
  80ddf8:	d0e01404 	addi	r3,gp,-32688
  80ddfc:	e0fffa15 	stw	r3,-24(fp)
  80de00:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80de04:	e0bffb17 	ldw	r2,-20(fp)
  80de08:	e0fffa17 	ldw	r3,-24(fp)
  80de0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80de10:	e0bffa17 	ldw	r2,-24(fp)
  80de14:	10c00017 	ldw	r3,0(r2)
  80de18:	e0bffb17 	ldw	r2,-20(fp)
  80de1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80de20:	e0bffa17 	ldw	r2,-24(fp)
  80de24:	10800017 	ldw	r2,0(r2)
  80de28:	e0fffb17 	ldw	r3,-20(fp)
  80de2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80de30:	e0bffa17 	ldw	r2,-24(fp)
  80de34:	e0fffb17 	ldw	r3,-20(fp)
  80de38:	10c00015 	stw	r3,0(r2)
  80de3c:	e0bff817 	ldw	r2,-32(fp)
  80de40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de44:	e0bff717 	ldw	r2,-36(fp)
  80de48:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80de4c:	0005883a 	mov	r2,zero
  80de50:	00000306 	br	80de60 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80de54:	00bffa84 	movi	r2,-22
  80de58:	00000106 	br	80de60 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80de5c:	00bfde84 	movi	r2,-134
  }
}
  80de60:	e037883a 	mov	sp,fp
  80de64:	df000017 	ldw	fp,0(sp)
  80de68:	dec00104 	addi	sp,sp,4
  80de6c:	f800283a 	ret

0080de70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80de70:	defffe04 	addi	sp,sp,-8
  80de74:	dfc00115 	stw	ra,4(sp)
  80de78:	df000015 	stw	fp,0(sp)
  80de7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80de80:	d0a01117 	ldw	r2,-32700(gp)
  80de84:	10000326 	beq	r2,zero,80de94 <alt_get_errno+0x24>
  80de88:	d0a01117 	ldw	r2,-32700(gp)
  80de8c:	103ee83a 	callr	r2
  80de90:	00000106 	br	80de98 <alt_get_errno+0x28>
  80de94:	d0a75a04 	addi	r2,gp,-25240
}
  80de98:	e037883a 	mov	sp,fp
  80de9c:	dfc00117 	ldw	ra,4(sp)
  80dea0:	df000017 	ldw	fp,0(sp)
  80dea4:	dec00204 	addi	sp,sp,8
  80dea8:	f800283a 	ret

0080deac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80deac:	defffb04 	addi	sp,sp,-20
  80deb0:	dfc00415 	stw	ra,16(sp)
  80deb4:	df000315 	stw	fp,12(sp)
  80deb8:	df000304 	addi	fp,sp,12
  80debc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80dec0:	e0bfff17 	ldw	r2,-4(fp)
  80dec4:	10000616 	blt	r2,zero,80dee0 <close+0x34>
  80dec8:	e0bfff17 	ldw	r2,-4(fp)
  80decc:	10c00324 	muli	r3,r2,12
  80ded0:	00802074 	movhi	r2,129
  80ded4:	108b9f04 	addi	r2,r2,11900
  80ded8:	1885883a 	add	r2,r3,r2
  80dedc:	00000106 	br	80dee4 <close+0x38>
  80dee0:	0005883a 	mov	r2,zero
  80dee4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80dee8:	e0bffd17 	ldw	r2,-12(fp)
  80deec:	10001926 	beq	r2,zero,80df54 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80def0:	e0bffd17 	ldw	r2,-12(fp)
  80def4:	10800017 	ldw	r2,0(r2)
  80def8:	10800417 	ldw	r2,16(r2)
  80defc:	10000626 	beq	r2,zero,80df18 <close+0x6c>
  80df00:	e0bffd17 	ldw	r2,-12(fp)
  80df04:	10800017 	ldw	r2,0(r2)
  80df08:	10800417 	ldw	r2,16(r2)
  80df0c:	e13ffd17 	ldw	r4,-12(fp)
  80df10:	103ee83a 	callr	r2
  80df14:	00000106 	br	80df1c <close+0x70>
  80df18:	0005883a 	mov	r2,zero
  80df1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80df20:	e13fff17 	ldw	r4,-4(fp)
  80df24:	080e9400 	call	80e940 <alt_release_fd>
    if (rval < 0)
  80df28:	e0bffe17 	ldw	r2,-8(fp)
  80df2c:	1000070e 	bge	r2,zero,80df4c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80df30:	080de700 	call	80de70 <alt_get_errno>
  80df34:	1007883a 	mov	r3,r2
  80df38:	e0bffe17 	ldw	r2,-8(fp)
  80df3c:	0085c83a 	sub	r2,zero,r2
  80df40:	18800015 	stw	r2,0(r3)
      return -1;
  80df44:	00bfffc4 	movi	r2,-1
  80df48:	00000706 	br	80df68 <close+0xbc>
    }
    return 0;
  80df4c:	0005883a 	mov	r2,zero
  80df50:	00000506 	br	80df68 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80df54:	080de700 	call	80de70 <alt_get_errno>
  80df58:	1007883a 	mov	r3,r2
  80df5c:	00801444 	movi	r2,81
  80df60:	18800015 	stw	r2,0(r3)
    return -1;
  80df64:	00bfffc4 	movi	r2,-1
  }
}
  80df68:	e037883a 	mov	sp,fp
  80df6c:	dfc00117 	ldw	ra,4(sp)
  80df70:	df000017 	ldw	fp,0(sp)
  80df74:	dec00204 	addi	sp,sp,8
  80df78:	f800283a 	ret

0080df7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80df7c:	defffc04 	addi	sp,sp,-16
  80df80:	df000315 	stw	fp,12(sp)
  80df84:	df000304 	addi	fp,sp,12
  80df88:	e13ffd15 	stw	r4,-12(fp)
  80df8c:	e17ffe15 	stw	r5,-8(fp)
  80df90:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80df94:	e0bfff17 	ldw	r2,-4(fp)
}
  80df98:	e037883a 	mov	sp,fp
  80df9c:	df000017 	ldw	fp,0(sp)
  80dfa0:	dec00104 	addi	sp,sp,4
  80dfa4:	f800283a 	ret

0080dfa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dfa8:	defffe04 	addi	sp,sp,-8
  80dfac:	dfc00115 	stw	ra,4(sp)
  80dfb0:	df000015 	stw	fp,0(sp)
  80dfb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dfb8:	d0a01117 	ldw	r2,-32700(gp)
  80dfbc:	10000326 	beq	r2,zero,80dfcc <alt_get_errno+0x24>
  80dfc0:	d0a01117 	ldw	r2,-32700(gp)
  80dfc4:	103ee83a 	callr	r2
  80dfc8:	00000106 	br	80dfd0 <alt_get_errno+0x28>
  80dfcc:	d0a75a04 	addi	r2,gp,-25240
}
  80dfd0:	e037883a 	mov	sp,fp
  80dfd4:	dfc00117 	ldw	ra,4(sp)
  80dfd8:	df000017 	ldw	fp,0(sp)
  80dfdc:	dec00204 	addi	sp,sp,8
  80dfe0:	f800283a 	ret

0080dfe4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80dfe4:	defffb04 	addi	sp,sp,-20
  80dfe8:	dfc00415 	stw	ra,16(sp)
  80dfec:	df000315 	stw	fp,12(sp)
  80dff0:	df000304 	addi	fp,sp,12
  80dff4:	e13ffe15 	stw	r4,-8(fp)
  80dff8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dffc:	e0bffe17 	ldw	r2,-8(fp)
  80e000:	10000616 	blt	r2,zero,80e01c <fstat+0x38>
  80e004:	e0bffe17 	ldw	r2,-8(fp)
  80e008:	10c00324 	muli	r3,r2,12
  80e00c:	00802074 	movhi	r2,129
  80e010:	108b9f04 	addi	r2,r2,11900
  80e014:	1885883a 	add	r2,r3,r2
  80e018:	00000106 	br	80e020 <fstat+0x3c>
  80e01c:	0005883a 	mov	r2,zero
  80e020:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80e024:	e0bffd17 	ldw	r2,-12(fp)
  80e028:	10001026 	beq	r2,zero,80e06c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80e02c:	e0bffd17 	ldw	r2,-12(fp)
  80e030:	10800017 	ldw	r2,0(r2)
  80e034:	10800817 	ldw	r2,32(r2)
  80e038:	10000726 	beq	r2,zero,80e058 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80e03c:	e0bffd17 	ldw	r2,-12(fp)
  80e040:	10800017 	ldw	r2,0(r2)
  80e044:	10800817 	ldw	r2,32(r2)
  80e048:	e17fff17 	ldw	r5,-4(fp)
  80e04c:	e13ffd17 	ldw	r4,-12(fp)
  80e050:	103ee83a 	callr	r2
  80e054:	00000a06 	br	80e080 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80e058:	e0bfff17 	ldw	r2,-4(fp)
  80e05c:	00c80004 	movi	r3,8192
  80e060:	10c00115 	stw	r3,4(r2)
      return 0;
  80e064:	0005883a 	mov	r2,zero
  80e068:	00000506 	br	80e080 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e06c:	080dfa80 	call	80dfa8 <alt_get_errno>
  80e070:	1007883a 	mov	r3,r2
  80e074:	00801444 	movi	r2,81
  80e078:	18800015 	stw	r2,0(r3)
    return -1;
  80e07c:	00bfffc4 	movi	r2,-1
  }
}
  80e080:	e037883a 	mov	sp,fp
  80e084:	dfc00117 	ldw	ra,4(sp)
  80e088:	df000017 	ldw	fp,0(sp)
  80e08c:	dec00204 	addi	sp,sp,8
  80e090:	f800283a 	ret

0080e094 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80e094:	defff004 	addi	sp,sp,-64
  80e098:	df000f15 	stw	fp,60(sp)
  80e09c:	df000f04 	addi	fp,sp,60
  80e0a0:	e13ffd15 	stw	r4,-12(fp)
  80e0a4:	e17ffe15 	stw	r5,-8(fp)
  80e0a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80e0ac:	00bffa84 	movi	r2,-22
  80e0b0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e0b4:	e0bffd17 	ldw	r2,-12(fp)
  80e0b8:	10800828 	cmpgeui	r2,r2,32
  80e0bc:	1000501e 	bne	r2,zero,80e200 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0c0:	0005303a 	rdctl	r2,status
  80e0c4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0c8:	e0fff617 	ldw	r3,-40(fp)
  80e0cc:	00bfff84 	movi	r2,-2
  80e0d0:	1884703a 	and	r2,r3,r2
  80e0d4:	1001703a 	wrctl	status,r2
  
  return context;
  80e0d8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80e0dc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80e0e0:	00802074 	movhi	r2,129
  80e0e4:	10980804 	addi	r2,r2,24608
  80e0e8:	e0fffd17 	ldw	r3,-12(fp)
  80e0ec:	180690fa 	slli	r3,r3,3
  80e0f0:	10c5883a 	add	r2,r2,r3
  80e0f4:	e0ffff17 	ldw	r3,-4(fp)
  80e0f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80e0fc:	00802074 	movhi	r2,129
  80e100:	10980804 	addi	r2,r2,24608
  80e104:	e0fffd17 	ldw	r3,-12(fp)
  80e108:	180690fa 	slli	r3,r3,3
  80e10c:	10c5883a 	add	r2,r2,r3
  80e110:	10800104 	addi	r2,r2,4
  80e114:	e0fffe17 	ldw	r3,-8(fp)
  80e118:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80e11c:	e0bfff17 	ldw	r2,-4(fp)
  80e120:	10001926 	beq	r2,zero,80e188 <alt_irq_register+0xf4>
  80e124:	e0bffd17 	ldw	r2,-12(fp)
  80e128:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e12c:	0005303a 	rdctl	r2,status
  80e130:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e134:	e0fff717 	ldw	r3,-36(fp)
  80e138:	00bfff84 	movi	r2,-2
  80e13c:	1884703a 	and	r2,r3,r2
  80e140:	1001703a 	wrctl	status,r2
  
  return context;
  80e144:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e148:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80e14c:	00c00044 	movi	r3,1
  80e150:	e0bff217 	ldw	r2,-56(fp)
  80e154:	1884983a 	sll	r2,r3,r2
  80e158:	1007883a 	mov	r3,r2
  80e15c:	d0a76117 	ldw	r2,-25212(gp)
  80e160:	1884b03a 	or	r2,r3,r2
  80e164:	d0a76115 	stw	r2,-25212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e168:	d0a76117 	ldw	r2,-25212(gp)
  80e16c:	100170fa 	wrctl	ienable,r2
  80e170:	e0bff817 	ldw	r2,-32(fp)
  80e174:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e178:	e0bff917 	ldw	r2,-28(fp)
  80e17c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e180:	0005883a 	mov	r2,zero
  80e184:	00001906 	br	80e1ec <alt_irq_register+0x158>
  80e188:	e0bffd17 	ldw	r2,-12(fp)
  80e18c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e190:	0005303a 	rdctl	r2,status
  80e194:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e198:	e0fffa17 	ldw	r3,-24(fp)
  80e19c:	00bfff84 	movi	r2,-2
  80e1a0:	1884703a 	and	r2,r3,r2
  80e1a4:	1001703a 	wrctl	status,r2
  
  return context;
  80e1a8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e1ac:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80e1b0:	00c00044 	movi	r3,1
  80e1b4:	e0bff417 	ldw	r2,-48(fp)
  80e1b8:	1884983a 	sll	r2,r3,r2
  80e1bc:	0084303a 	nor	r2,zero,r2
  80e1c0:	1007883a 	mov	r3,r2
  80e1c4:	d0a76117 	ldw	r2,-25212(gp)
  80e1c8:	1884703a 	and	r2,r3,r2
  80e1cc:	d0a76115 	stw	r2,-25212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e1d0:	d0a76117 	ldw	r2,-25212(gp)
  80e1d4:	100170fa 	wrctl	ienable,r2
  80e1d8:	e0bffb17 	ldw	r2,-20(fp)
  80e1dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e1e0:	e0bffc17 	ldw	r2,-16(fp)
  80e1e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e1e8:	0005883a 	mov	r2,zero
  80e1ec:	e0bff115 	stw	r2,-60(fp)
  80e1f0:	e0bff317 	ldw	r2,-52(fp)
  80e1f4:	e0bff515 	stw	r2,-44(fp)
  80e1f8:	e0bff517 	ldw	r2,-44(fp)
  80e1fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80e200:	e0bff117 	ldw	r2,-60(fp)
}
  80e204:	e037883a 	mov	sp,fp
  80e208:	df000017 	ldw	fp,0(sp)
  80e20c:	dec00104 	addi	sp,sp,4
  80e210:	f800283a 	ret

0080e214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e214:	defffe04 	addi	sp,sp,-8
  80e218:	dfc00115 	stw	ra,4(sp)
  80e21c:	df000015 	stw	fp,0(sp)
  80e220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e224:	d0a01117 	ldw	r2,-32700(gp)
  80e228:	10000326 	beq	r2,zero,80e238 <alt_get_errno+0x24>
  80e22c:	d0a01117 	ldw	r2,-32700(gp)
  80e230:	103ee83a 	callr	r2
  80e234:	00000106 	br	80e23c <alt_get_errno+0x28>
  80e238:	d0a75a04 	addi	r2,gp,-25240
}
  80e23c:	e037883a 	mov	sp,fp
  80e240:	dfc00117 	ldw	ra,4(sp)
  80e244:	df000017 	ldw	fp,0(sp)
  80e248:	dec00204 	addi	sp,sp,8
  80e24c:	f800283a 	ret

0080e250 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e250:	deffed04 	addi	sp,sp,-76
  80e254:	dfc01215 	stw	ra,72(sp)
  80e258:	df001115 	stw	fp,68(sp)
  80e25c:	df001104 	addi	fp,sp,68
  80e260:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e264:	e0bfff17 	ldw	r2,-4(fp)
  80e268:	10000616 	blt	r2,zero,80e284 <isatty+0x34>
  80e26c:	e0bfff17 	ldw	r2,-4(fp)
  80e270:	10c00324 	muli	r3,r2,12
  80e274:	00802074 	movhi	r2,129
  80e278:	108b9f04 	addi	r2,r2,11900
  80e27c:	1885883a 	add	r2,r3,r2
  80e280:	00000106 	br	80e288 <isatty+0x38>
  80e284:	0005883a 	mov	r2,zero
  80e288:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80e28c:	e0bfef17 	ldw	r2,-68(fp)
  80e290:	10000e26 	beq	r2,zero,80e2cc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e294:	e0bfef17 	ldw	r2,-68(fp)
  80e298:	10800017 	ldw	r2,0(r2)
  80e29c:	10800817 	ldw	r2,32(r2)
  80e2a0:	1000021e 	bne	r2,zero,80e2ac <isatty+0x5c>
    {
      return 1;
  80e2a4:	00800044 	movi	r2,1
  80e2a8:	00000d06 	br	80e2e0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e2ac:	e0bff004 	addi	r2,fp,-64
  80e2b0:	100b883a 	mov	r5,r2
  80e2b4:	e13fff17 	ldw	r4,-4(fp)
  80e2b8:	080dfe40 	call	80dfe4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e2bc:	e0bff117 	ldw	r2,-60(fp)
  80e2c0:	10880020 	cmpeqi	r2,r2,8192
  80e2c4:	10803fcc 	andi	r2,r2,255
  80e2c8:	00000506 	br	80e2e0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e2cc:	080e2140 	call	80e214 <alt_get_errno>
  80e2d0:	1007883a 	mov	r3,r2
  80e2d4:	00801444 	movi	r2,81
  80e2d8:	18800015 	stw	r2,0(r3)
    return 0;
  80e2dc:	0005883a 	mov	r2,zero
  }
}
  80e2e0:	e037883a 	mov	sp,fp
  80e2e4:	dfc00117 	ldw	ra,4(sp)
  80e2e8:	df000017 	ldw	fp,0(sp)
  80e2ec:	dec00204 	addi	sp,sp,8
  80e2f0:	f800283a 	ret

0080e2f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80e2f4:	defffc04 	addi	sp,sp,-16
  80e2f8:	df000315 	stw	fp,12(sp)
  80e2fc:	df000304 	addi	fp,sp,12
  80e300:	e13ffd15 	stw	r4,-12(fp)
  80e304:	e17ffe15 	stw	r5,-8(fp)
  80e308:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80e30c:	e0fffe17 	ldw	r3,-8(fp)
  80e310:	e0bffd17 	ldw	r2,-12(fp)
  80e314:	18800c26 	beq	r3,r2,80e348 <alt_load_section+0x54>
  {
    while( to != end )
  80e318:	00000806 	br	80e33c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80e31c:	e0bffe17 	ldw	r2,-8(fp)
  80e320:	10c00104 	addi	r3,r2,4
  80e324:	e0fffe15 	stw	r3,-8(fp)
  80e328:	e0fffd17 	ldw	r3,-12(fp)
  80e32c:	19000104 	addi	r4,r3,4
  80e330:	e13ffd15 	stw	r4,-12(fp)
  80e334:	18c00017 	ldw	r3,0(r3)
  80e338:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80e33c:	e0fffe17 	ldw	r3,-8(fp)
  80e340:	e0bfff17 	ldw	r2,-4(fp)
  80e344:	18bff51e 	bne	r3,r2,80e31c <__alt_mem_onchip_mem+0xff80631c>
    {
      *to++ = *from++;
    }
  }
}
  80e348:	0001883a 	nop
  80e34c:	e037883a 	mov	sp,fp
  80e350:	df000017 	ldw	fp,0(sp)
  80e354:	dec00104 	addi	sp,sp,4
  80e358:	f800283a 	ret

0080e35c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80e35c:	defffe04 	addi	sp,sp,-8
  80e360:	dfc00115 	stw	ra,4(sp)
  80e364:	df000015 	stw	fp,0(sp)
  80e368:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80e36c:	01802074 	movhi	r6,129
  80e370:	3190a804 	addi	r6,r6,17056
  80e374:	01402074 	movhi	r5,129
  80e378:	29496c04 	addi	r5,r5,9648
  80e37c:	01002074 	movhi	r4,129
  80e380:	2110a804 	addi	r4,r4,17056
  80e384:	080e2f40 	call	80e2f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80e388:	01802034 	movhi	r6,128
  80e38c:	31809104 	addi	r6,r6,580
  80e390:	01402034 	movhi	r5,128
  80e394:	29400804 	addi	r5,r5,32
  80e398:	01002034 	movhi	r4,128
  80e39c:	21000804 	addi	r4,r4,32
  80e3a0:	080e2f40 	call	80e2f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80e3a4:	01802074 	movhi	r6,129
  80e3a8:	31896c04 	addi	r6,r6,9648
  80e3ac:	01402074 	movhi	r5,129
  80e3b0:	2947f904 	addi	r5,r5,8164
  80e3b4:	01002074 	movhi	r4,129
  80e3b8:	2107f904 	addi	r4,r4,8164
  80e3bc:	080e2f40 	call	80e2f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80e3c0:	08111400 	call	811140 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80e3c4:	08115640 	call	811564 <alt_icache_flush_all>
}
  80e3c8:	0001883a 	nop
  80e3cc:	e037883a 	mov	sp,fp
  80e3d0:	dfc00117 	ldw	ra,4(sp)
  80e3d4:	df000017 	ldw	fp,0(sp)
  80e3d8:	dec00204 	addi	sp,sp,8
  80e3dc:	f800283a 	ret

0080e3e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e3e0:	defffe04 	addi	sp,sp,-8
  80e3e4:	dfc00115 	stw	ra,4(sp)
  80e3e8:	df000015 	stw	fp,0(sp)
  80e3ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e3f0:	d0a01117 	ldw	r2,-32700(gp)
  80e3f4:	10000326 	beq	r2,zero,80e404 <alt_get_errno+0x24>
  80e3f8:	d0a01117 	ldw	r2,-32700(gp)
  80e3fc:	103ee83a 	callr	r2
  80e400:	00000106 	br	80e408 <alt_get_errno+0x28>
  80e404:	d0a75a04 	addi	r2,gp,-25240
}
  80e408:	e037883a 	mov	sp,fp
  80e40c:	dfc00117 	ldw	ra,4(sp)
  80e410:	df000017 	ldw	fp,0(sp)
  80e414:	dec00204 	addi	sp,sp,8
  80e418:	f800283a 	ret

0080e41c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e41c:	defff904 	addi	sp,sp,-28
  80e420:	dfc00615 	stw	ra,24(sp)
  80e424:	df000515 	stw	fp,20(sp)
  80e428:	df000504 	addi	fp,sp,20
  80e42c:	e13ffd15 	stw	r4,-12(fp)
  80e430:	e17ffe15 	stw	r5,-8(fp)
  80e434:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e438:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e43c:	e0bffd17 	ldw	r2,-12(fp)
  80e440:	10000616 	blt	r2,zero,80e45c <lseek+0x40>
  80e444:	e0bffd17 	ldw	r2,-12(fp)
  80e448:	10c00324 	muli	r3,r2,12
  80e44c:	00802074 	movhi	r2,129
  80e450:	108b9f04 	addi	r2,r2,11900
  80e454:	1885883a 	add	r2,r3,r2
  80e458:	00000106 	br	80e460 <lseek+0x44>
  80e45c:	0005883a 	mov	r2,zero
  80e460:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80e464:	e0bffc17 	ldw	r2,-16(fp)
  80e468:	10001026 	beq	r2,zero,80e4ac <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e46c:	e0bffc17 	ldw	r2,-16(fp)
  80e470:	10800017 	ldw	r2,0(r2)
  80e474:	10800717 	ldw	r2,28(r2)
  80e478:	10000926 	beq	r2,zero,80e4a0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e47c:	e0bffc17 	ldw	r2,-16(fp)
  80e480:	10800017 	ldw	r2,0(r2)
  80e484:	10800717 	ldw	r2,28(r2)
  80e488:	e1bfff17 	ldw	r6,-4(fp)
  80e48c:	e17ffe17 	ldw	r5,-8(fp)
  80e490:	e13ffc17 	ldw	r4,-16(fp)
  80e494:	103ee83a 	callr	r2
  80e498:	e0bffb15 	stw	r2,-20(fp)
  80e49c:	00000506 	br	80e4b4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e4a0:	00bfde84 	movi	r2,-134
  80e4a4:	e0bffb15 	stw	r2,-20(fp)
  80e4a8:	00000206 	br	80e4b4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e4ac:	00bfebc4 	movi	r2,-81
  80e4b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80e4b4:	e0bffb17 	ldw	r2,-20(fp)
  80e4b8:	1000070e 	bge	r2,zero,80e4d8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80e4bc:	080e3e00 	call	80e3e0 <alt_get_errno>
  80e4c0:	1007883a 	mov	r3,r2
  80e4c4:	e0bffb17 	ldw	r2,-20(fp)
  80e4c8:	0085c83a 	sub	r2,zero,r2
  80e4cc:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e4d0:	00bfffc4 	movi	r2,-1
  80e4d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80e4d8:	e0bffb17 	ldw	r2,-20(fp)
}
  80e4dc:	e037883a 	mov	sp,fp
  80e4e0:	dfc00117 	ldw	ra,4(sp)
  80e4e4:	df000017 	ldw	fp,0(sp)
  80e4e8:	dec00204 	addi	sp,sp,8
  80e4ec:	f800283a 	ret

0080e4f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e4f0:	defffd04 	addi	sp,sp,-12
  80e4f4:	dfc00215 	stw	ra,8(sp)
  80e4f8:	df000115 	stw	fp,4(sp)
  80e4fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e500:	0009883a 	mov	r4,zero
  80e504:	080ed600 	call	80ed60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80e508:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e50c:	080ed980 	call	80ed98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e510:	01802074 	movhi	r6,129
  80e514:	3188be04 	addi	r6,r6,8952
  80e518:	01402074 	movhi	r5,129
  80e51c:	2948be04 	addi	r5,r5,8952
  80e520:	01002074 	movhi	r4,129
  80e524:	2108be04 	addi	r4,r4,8952
  80e528:	08118fc0 	call	8118fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e52c:	08112680 	call	811268 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e530:	01002074 	movhi	r4,129
  80e534:	2104b204 	addi	r4,r4,4808
  80e538:	0811c500 	call	811c50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e53c:	d0a76217 	ldw	r2,-25208(gp)
  80e540:	d0e76317 	ldw	r3,-25204(gp)
  80e544:	d1276417 	ldw	r4,-25200(gp)
  80e548:	200d883a 	mov	r6,r4
  80e54c:	180b883a 	mov	r5,r3
  80e550:	1009883a 	mov	r4,r2
  80e554:	08003140 	call	800314 <main>
  80e558:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80e55c:	01000044 	movi	r4,1
  80e560:	080deac0 	call	80deac <close>
  exit (result);
  80e564:	e13fff17 	ldw	r4,-4(fp)
  80e568:	0811c640 	call	811c64 <exit>

0080e56c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80e56c:	defffe04 	addi	sp,sp,-8
  80e570:	df000115 	stw	fp,4(sp)
  80e574:	df000104 	addi	fp,sp,4
  80e578:	e13fff15 	stw	r4,-4(fp)
}
  80e57c:	0001883a 	nop
  80e580:	e037883a 	mov	sp,fp
  80e584:	df000017 	ldw	fp,0(sp)
  80e588:	dec00104 	addi	sp,sp,4
  80e58c:	f800283a 	ret

0080e590 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e590:	defffe04 	addi	sp,sp,-8
  80e594:	df000115 	stw	fp,4(sp)
  80e598:	df000104 	addi	fp,sp,4
  80e59c:	e13fff15 	stw	r4,-4(fp)
}
  80e5a0:	0001883a 	nop
  80e5a4:	e037883a 	mov	sp,fp
  80e5a8:	df000017 	ldw	fp,0(sp)
  80e5ac:	dec00104 	addi	sp,sp,4
  80e5b0:	f800283a 	ret

0080e5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e5b4:	defffe04 	addi	sp,sp,-8
  80e5b8:	dfc00115 	stw	ra,4(sp)
  80e5bc:	df000015 	stw	fp,0(sp)
  80e5c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e5c4:	d0a01117 	ldw	r2,-32700(gp)
  80e5c8:	10000326 	beq	r2,zero,80e5d8 <alt_get_errno+0x24>
  80e5cc:	d0a01117 	ldw	r2,-32700(gp)
  80e5d0:	103ee83a 	callr	r2
  80e5d4:	00000106 	br	80e5dc <alt_get_errno+0x28>
  80e5d8:	d0a75a04 	addi	r2,gp,-25240
}
  80e5dc:	e037883a 	mov	sp,fp
  80e5e0:	dfc00117 	ldw	ra,4(sp)
  80e5e4:	df000017 	ldw	fp,0(sp)
  80e5e8:	dec00204 	addi	sp,sp,8
  80e5ec:	f800283a 	ret

0080e5f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80e5f0:	defffd04 	addi	sp,sp,-12
  80e5f4:	df000215 	stw	fp,8(sp)
  80e5f8:	df000204 	addi	fp,sp,8
  80e5fc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80e600:	e0bfff17 	ldw	r2,-4(fp)
  80e604:	10800217 	ldw	r2,8(r2)
  80e608:	10d00034 	orhi	r3,r2,16384
  80e60c:	e0bfff17 	ldw	r2,-4(fp)
  80e610:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e614:	e03ffe15 	stw	zero,-8(fp)
  80e618:	00001d06 	br	80e690 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e61c:	00802074 	movhi	r2,129
  80e620:	108b9f04 	addi	r2,r2,11900
  80e624:	e0fffe17 	ldw	r3,-8(fp)
  80e628:	18c00324 	muli	r3,r3,12
  80e62c:	10c5883a 	add	r2,r2,r3
  80e630:	10c00017 	ldw	r3,0(r2)
  80e634:	e0bfff17 	ldw	r2,-4(fp)
  80e638:	10800017 	ldw	r2,0(r2)
  80e63c:	1880111e 	bne	r3,r2,80e684 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e640:	00802074 	movhi	r2,129
  80e644:	108b9f04 	addi	r2,r2,11900
  80e648:	e0fffe17 	ldw	r3,-8(fp)
  80e64c:	18c00324 	muli	r3,r3,12
  80e650:	10c5883a 	add	r2,r2,r3
  80e654:	10800204 	addi	r2,r2,8
  80e658:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e65c:	1000090e 	bge	r2,zero,80e684 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80e660:	e0bffe17 	ldw	r2,-8(fp)
  80e664:	10c00324 	muli	r3,r2,12
  80e668:	00802074 	movhi	r2,129
  80e66c:	108b9f04 	addi	r2,r2,11900
  80e670:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e674:	e0bfff17 	ldw	r2,-4(fp)
  80e678:	18800226 	beq	r3,r2,80e684 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80e67c:	00bffcc4 	movi	r2,-13
  80e680:	00000806 	br	80e6a4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e684:	e0bffe17 	ldw	r2,-8(fp)
  80e688:	10800044 	addi	r2,r2,1
  80e68c:	e0bffe15 	stw	r2,-8(fp)
  80e690:	d0a01017 	ldw	r2,-32704(gp)
  80e694:	1007883a 	mov	r3,r2
  80e698:	e0bffe17 	ldw	r2,-8(fp)
  80e69c:	18bfdf2e 	bgeu	r3,r2,80e61c <__alt_mem_onchip_mem+0xff80661c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80e6a0:	0005883a 	mov	r2,zero
}
  80e6a4:	e037883a 	mov	sp,fp
  80e6a8:	df000017 	ldw	fp,0(sp)
  80e6ac:	dec00104 	addi	sp,sp,4
  80e6b0:	f800283a 	ret

0080e6b4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80e6b4:	defff604 	addi	sp,sp,-40
  80e6b8:	dfc00915 	stw	ra,36(sp)
  80e6bc:	df000815 	stw	fp,32(sp)
  80e6c0:	df000804 	addi	fp,sp,32
  80e6c4:	e13ffd15 	stw	r4,-12(fp)
  80e6c8:	e17ffe15 	stw	r5,-8(fp)
  80e6cc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80e6d0:	00bfffc4 	movi	r2,-1
  80e6d4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80e6d8:	00bffb44 	movi	r2,-19
  80e6dc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80e6e0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80e6e4:	d1600e04 	addi	r5,gp,-32712
  80e6e8:	e13ffd17 	ldw	r4,-12(fp)
  80e6ec:	08113280 	call	811328 <alt_find_dev>
  80e6f0:	e0bff815 	stw	r2,-32(fp)
  80e6f4:	e0bff817 	ldw	r2,-32(fp)
  80e6f8:	1000051e 	bne	r2,zero,80e710 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80e6fc:	e13ffd17 	ldw	r4,-12(fp)
  80e700:	08113b80 	call	8113b8 <alt_find_file>
  80e704:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80e708:	00800044 	movi	r2,1
  80e70c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80e710:	e0bff817 	ldw	r2,-32(fp)
  80e714:	10002926 	beq	r2,zero,80e7bc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80e718:	e13ff817 	ldw	r4,-32(fp)
  80e71c:	08114c00 	call	8114c0 <alt_get_fd>
  80e720:	e0bff915 	stw	r2,-28(fp)
  80e724:	e0bff917 	ldw	r2,-28(fp)
  80e728:	1000030e 	bge	r2,zero,80e738 <open+0x84>
    {
      status = index;
  80e72c:	e0bff917 	ldw	r2,-28(fp)
  80e730:	e0bffa15 	stw	r2,-24(fp)
  80e734:	00002306 	br	80e7c4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80e738:	e0bff917 	ldw	r2,-28(fp)
  80e73c:	10c00324 	muli	r3,r2,12
  80e740:	00802074 	movhi	r2,129
  80e744:	108b9f04 	addi	r2,r2,11900
  80e748:	1885883a 	add	r2,r3,r2
  80e74c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80e750:	e0fffe17 	ldw	r3,-8(fp)
  80e754:	00900034 	movhi	r2,16384
  80e758:	10bfffc4 	addi	r2,r2,-1
  80e75c:	1886703a 	and	r3,r3,r2
  80e760:	e0bffc17 	ldw	r2,-16(fp)
  80e764:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80e768:	e0bffb17 	ldw	r2,-20(fp)
  80e76c:	1000051e 	bne	r2,zero,80e784 <open+0xd0>
  80e770:	e13ffc17 	ldw	r4,-16(fp)
  80e774:	080e5f00 	call	80e5f0 <alt_file_locked>
  80e778:	e0bffa15 	stw	r2,-24(fp)
  80e77c:	e0bffa17 	ldw	r2,-24(fp)
  80e780:	10001016 	blt	r2,zero,80e7c4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80e784:	e0bff817 	ldw	r2,-32(fp)
  80e788:	10800317 	ldw	r2,12(r2)
  80e78c:	10000826 	beq	r2,zero,80e7b0 <open+0xfc>
  80e790:	e0bff817 	ldw	r2,-32(fp)
  80e794:	10800317 	ldw	r2,12(r2)
  80e798:	e1ffff17 	ldw	r7,-4(fp)
  80e79c:	e1bffe17 	ldw	r6,-8(fp)
  80e7a0:	e17ffd17 	ldw	r5,-12(fp)
  80e7a4:	e13ffc17 	ldw	r4,-16(fp)
  80e7a8:	103ee83a 	callr	r2
  80e7ac:	00000106 	br	80e7b4 <open+0x100>
  80e7b0:	0005883a 	mov	r2,zero
  80e7b4:	e0bffa15 	stw	r2,-24(fp)
  80e7b8:	00000206 	br	80e7c4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80e7bc:	00bffb44 	movi	r2,-19
  80e7c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80e7c4:	e0bffa17 	ldw	r2,-24(fp)
  80e7c8:	1000090e 	bge	r2,zero,80e7f0 <open+0x13c>
  {
    alt_release_fd (index);  
  80e7cc:	e13ff917 	ldw	r4,-28(fp)
  80e7d0:	080e9400 	call	80e940 <alt_release_fd>
    ALT_ERRNO = -status;
  80e7d4:	080e5b40 	call	80e5b4 <alt_get_errno>
  80e7d8:	1007883a 	mov	r3,r2
  80e7dc:	e0bffa17 	ldw	r2,-24(fp)
  80e7e0:	0085c83a 	sub	r2,zero,r2
  80e7e4:	18800015 	stw	r2,0(r3)
    return -1;
  80e7e8:	00bfffc4 	movi	r2,-1
  80e7ec:	00000106 	br	80e7f4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80e7f0:	e0bff917 	ldw	r2,-28(fp)
}
  80e7f4:	e037883a 	mov	sp,fp
  80e7f8:	dfc00117 	ldw	ra,4(sp)
  80e7fc:	df000017 	ldw	fp,0(sp)
  80e800:	dec00204 	addi	sp,sp,8
  80e804:	f800283a 	ret

0080e808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e808:	defffe04 	addi	sp,sp,-8
  80e80c:	dfc00115 	stw	ra,4(sp)
  80e810:	df000015 	stw	fp,0(sp)
  80e814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e818:	d0a01117 	ldw	r2,-32700(gp)
  80e81c:	10000326 	beq	r2,zero,80e82c <alt_get_errno+0x24>
  80e820:	d0a01117 	ldw	r2,-32700(gp)
  80e824:	103ee83a 	callr	r2
  80e828:	00000106 	br	80e830 <alt_get_errno+0x28>
  80e82c:	d0a75a04 	addi	r2,gp,-25240
}
  80e830:	e037883a 	mov	sp,fp
  80e834:	dfc00117 	ldw	ra,4(sp)
  80e838:	df000017 	ldw	fp,0(sp)
  80e83c:	dec00204 	addi	sp,sp,8
  80e840:	f800283a 	ret

0080e844 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e844:	defff904 	addi	sp,sp,-28
  80e848:	dfc00615 	stw	ra,24(sp)
  80e84c:	df000515 	stw	fp,20(sp)
  80e850:	df000504 	addi	fp,sp,20
  80e854:	e13ffd15 	stw	r4,-12(fp)
  80e858:	e17ffe15 	stw	r5,-8(fp)
  80e85c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e860:	e0bffd17 	ldw	r2,-12(fp)
  80e864:	10000616 	blt	r2,zero,80e880 <read+0x3c>
  80e868:	e0bffd17 	ldw	r2,-12(fp)
  80e86c:	10c00324 	muli	r3,r2,12
  80e870:	00802074 	movhi	r2,129
  80e874:	108b9f04 	addi	r2,r2,11900
  80e878:	1885883a 	add	r2,r3,r2
  80e87c:	00000106 	br	80e884 <read+0x40>
  80e880:	0005883a 	mov	r2,zero
  80e884:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e888:	e0bffb17 	ldw	r2,-20(fp)
  80e88c:	10002226 	beq	r2,zero,80e918 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e890:	e0bffb17 	ldw	r2,-20(fp)
  80e894:	10800217 	ldw	r2,8(r2)
  80e898:	108000cc 	andi	r2,r2,3
  80e89c:	10800060 	cmpeqi	r2,r2,1
  80e8a0:	1000181e 	bne	r2,zero,80e904 <read+0xc0>
        (fd->dev->read))
  80e8a4:	e0bffb17 	ldw	r2,-20(fp)
  80e8a8:	10800017 	ldw	r2,0(r2)
  80e8ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e8b0:	10001426 	beq	r2,zero,80e904 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e8b4:	e0bffb17 	ldw	r2,-20(fp)
  80e8b8:	10800017 	ldw	r2,0(r2)
  80e8bc:	10800517 	ldw	r2,20(r2)
  80e8c0:	e0ffff17 	ldw	r3,-4(fp)
  80e8c4:	180d883a 	mov	r6,r3
  80e8c8:	e17ffe17 	ldw	r5,-8(fp)
  80e8cc:	e13ffb17 	ldw	r4,-20(fp)
  80e8d0:	103ee83a 	callr	r2
  80e8d4:	e0bffc15 	stw	r2,-16(fp)
  80e8d8:	e0bffc17 	ldw	r2,-16(fp)
  80e8dc:	1000070e 	bge	r2,zero,80e8fc <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80e8e0:	080e8080 	call	80e808 <alt_get_errno>
  80e8e4:	1007883a 	mov	r3,r2
  80e8e8:	e0bffc17 	ldw	r2,-16(fp)
  80e8ec:	0085c83a 	sub	r2,zero,r2
  80e8f0:	18800015 	stw	r2,0(r3)
          return -1;
  80e8f4:	00bfffc4 	movi	r2,-1
  80e8f8:	00000c06 	br	80e92c <read+0xe8>
        }
        return rval;
  80e8fc:	e0bffc17 	ldw	r2,-16(fp)
  80e900:	00000a06 	br	80e92c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e904:	080e8080 	call	80e808 <alt_get_errno>
  80e908:	1007883a 	mov	r3,r2
  80e90c:	00800344 	movi	r2,13
  80e910:	18800015 	stw	r2,0(r3)
  80e914:	00000406 	br	80e928 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e918:	080e8080 	call	80e808 <alt_get_errno>
  80e91c:	1007883a 	mov	r3,r2
  80e920:	00801444 	movi	r2,81
  80e924:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e928:	00bfffc4 	movi	r2,-1
}
  80e92c:	e037883a 	mov	sp,fp
  80e930:	dfc00117 	ldw	ra,4(sp)
  80e934:	df000017 	ldw	fp,0(sp)
  80e938:	dec00204 	addi	sp,sp,8
  80e93c:	f800283a 	ret

0080e940 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e940:	defffe04 	addi	sp,sp,-8
  80e944:	df000115 	stw	fp,4(sp)
  80e948:	df000104 	addi	fp,sp,4
  80e94c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e950:	e0bfff17 	ldw	r2,-4(fp)
  80e954:	108000d0 	cmplti	r2,r2,3
  80e958:	10000d1e 	bne	r2,zero,80e990 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e95c:	00802074 	movhi	r2,129
  80e960:	108b9f04 	addi	r2,r2,11900
  80e964:	e0ffff17 	ldw	r3,-4(fp)
  80e968:	18c00324 	muli	r3,r3,12
  80e96c:	10c5883a 	add	r2,r2,r3
  80e970:	10800204 	addi	r2,r2,8
  80e974:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e978:	00802074 	movhi	r2,129
  80e97c:	108b9f04 	addi	r2,r2,11900
  80e980:	e0ffff17 	ldw	r3,-4(fp)
  80e984:	18c00324 	muli	r3,r3,12
  80e988:	10c5883a 	add	r2,r2,r3
  80e98c:	10000015 	stw	zero,0(r2)
  }
}
  80e990:	0001883a 	nop
  80e994:	e037883a 	mov	sp,fp
  80e998:	df000017 	ldw	fp,0(sp)
  80e99c:	dec00104 	addi	sp,sp,4
  80e9a0:	f800283a 	ret

0080e9a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e9a4:	defff904 	addi	sp,sp,-28
  80e9a8:	df000615 	stw	fp,24(sp)
  80e9ac:	df000604 	addi	fp,sp,24
  80e9b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e9b4:	0005303a 	rdctl	r2,status
  80e9b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e9bc:	e0fffe17 	ldw	r3,-8(fp)
  80e9c0:	00bfff84 	movi	r2,-2
  80e9c4:	1884703a 	and	r2,r3,r2
  80e9c8:	1001703a 	wrctl	status,r2
  
  return context;
  80e9cc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e9d0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e9d4:	d0a01317 	ldw	r2,-32692(gp)
  80e9d8:	10c000c4 	addi	r3,r2,3
  80e9dc:	00bfff04 	movi	r2,-4
  80e9e0:	1884703a 	and	r2,r3,r2
  80e9e4:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e9e8:	d0e01317 	ldw	r3,-32692(gp)
  80e9ec:	e0bfff17 	ldw	r2,-4(fp)
  80e9f0:	1887883a 	add	r3,r3,r2
  80e9f4:	00804034 	movhi	r2,256
  80e9f8:	10800004 	addi	r2,r2,0
  80e9fc:	10c0062e 	bgeu	r2,r3,80ea18 <sbrk+0x74>
  80ea00:	e0bffb17 	ldw	r2,-20(fp)
  80ea04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea08:	e0bffa17 	ldw	r2,-24(fp)
  80ea0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80ea10:	00bfffc4 	movi	r2,-1
  80ea14:	00000b06 	br	80ea44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80ea18:	d0a01317 	ldw	r2,-32692(gp)
  80ea1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80ea20:	d0e01317 	ldw	r3,-32692(gp)
  80ea24:	e0bfff17 	ldw	r2,-4(fp)
  80ea28:	1885883a 	add	r2,r3,r2
  80ea2c:	d0a01315 	stw	r2,-32692(gp)
  80ea30:	e0bffb17 	ldw	r2,-20(fp)
  80ea34:	e0bffc15 	stw	r2,-16(fp)
  80ea38:	e0bffc17 	ldw	r2,-16(fp)
  80ea3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ea40:	e0bffd17 	ldw	r2,-12(fp)
} 
  80ea44:	e037883a 	mov	sp,fp
  80ea48:	df000017 	ldw	fp,0(sp)
  80ea4c:	dec00104 	addi	sp,sp,4
  80ea50:	f800283a 	ret

0080ea54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80ea54:	defffa04 	addi	sp,sp,-24
  80ea58:	df000515 	stw	fp,20(sp)
  80ea5c:	df000504 	addi	fp,sp,20
  80ea60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea64:	0005303a 	rdctl	r2,status
  80ea68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea6c:	e0fffc17 	ldw	r3,-16(fp)
  80ea70:	00bfff84 	movi	r2,-2
  80ea74:	1884703a 	and	r2,r3,r2
  80ea78:	1001703a 	wrctl	status,r2
  
  return context;
  80ea7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80ea80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80ea84:	e0bfff17 	ldw	r2,-4(fp)
  80ea88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80ea8c:	e0bffd17 	ldw	r2,-12(fp)
  80ea90:	10800017 	ldw	r2,0(r2)
  80ea94:	e0fffd17 	ldw	r3,-12(fp)
  80ea98:	18c00117 	ldw	r3,4(r3)
  80ea9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80eaa0:	e0bffd17 	ldw	r2,-12(fp)
  80eaa4:	10800117 	ldw	r2,4(r2)
  80eaa8:	e0fffd17 	ldw	r3,-12(fp)
  80eaac:	18c00017 	ldw	r3,0(r3)
  80eab0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80eab4:	e0bffd17 	ldw	r2,-12(fp)
  80eab8:	e0fffd17 	ldw	r3,-12(fp)
  80eabc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80eac0:	e0bffd17 	ldw	r2,-12(fp)
  80eac4:	e0fffd17 	ldw	r3,-12(fp)
  80eac8:	10c00015 	stw	r3,0(r2)
  80eacc:	e0bffb17 	ldw	r2,-20(fp)
  80ead0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ead4:	e0bffe17 	ldw	r2,-8(fp)
  80ead8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80eadc:	0001883a 	nop
  80eae0:	e037883a 	mov	sp,fp
  80eae4:	df000017 	ldw	fp,0(sp)
  80eae8:	dec00104 	addi	sp,sp,4
  80eaec:	f800283a 	ret

0080eaf0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80eaf0:	defffb04 	addi	sp,sp,-20
  80eaf4:	dfc00415 	stw	ra,16(sp)
  80eaf8:	df000315 	stw	fp,12(sp)
  80eafc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80eb00:	d0a01417 	ldw	r2,-32688(gp)
  80eb04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80eb08:	d0a76617 	ldw	r2,-25192(gp)
  80eb0c:	10800044 	addi	r2,r2,1
  80eb10:	d0a76615 	stw	r2,-25192(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80eb14:	00002e06 	br	80ebd0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80eb18:	e0bffd17 	ldw	r2,-12(fp)
  80eb1c:	10800017 	ldw	r2,0(r2)
  80eb20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80eb24:	e0bffd17 	ldw	r2,-12(fp)
  80eb28:	10800403 	ldbu	r2,16(r2)
  80eb2c:	10803fcc 	andi	r2,r2,255
  80eb30:	10000426 	beq	r2,zero,80eb44 <alt_tick+0x54>
  80eb34:	d0a76617 	ldw	r2,-25192(gp)
  80eb38:	1000021e 	bne	r2,zero,80eb44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80eb3c:	e0bffd17 	ldw	r2,-12(fp)
  80eb40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80eb44:	e0bffd17 	ldw	r2,-12(fp)
  80eb48:	10800217 	ldw	r2,8(r2)
  80eb4c:	d0e76617 	ldw	r3,-25192(gp)
  80eb50:	18801d36 	bltu	r3,r2,80ebc8 <alt_tick+0xd8>
  80eb54:	e0bffd17 	ldw	r2,-12(fp)
  80eb58:	10800403 	ldbu	r2,16(r2)
  80eb5c:	10803fcc 	andi	r2,r2,255
  80eb60:	1000191e 	bne	r2,zero,80ebc8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80eb64:	e0bffd17 	ldw	r2,-12(fp)
  80eb68:	10800317 	ldw	r2,12(r2)
  80eb6c:	e0fffd17 	ldw	r3,-12(fp)
  80eb70:	18c00517 	ldw	r3,20(r3)
  80eb74:	1809883a 	mov	r4,r3
  80eb78:	103ee83a 	callr	r2
  80eb7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80eb80:	e0bfff17 	ldw	r2,-4(fp)
  80eb84:	1000031e 	bne	r2,zero,80eb94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80eb88:	e13ffd17 	ldw	r4,-12(fp)
  80eb8c:	080ea540 	call	80ea54 <alt_alarm_stop>
  80eb90:	00000d06 	br	80ebc8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80eb94:	e0bffd17 	ldw	r2,-12(fp)
  80eb98:	10c00217 	ldw	r3,8(r2)
  80eb9c:	e0bfff17 	ldw	r2,-4(fp)
  80eba0:	1887883a 	add	r3,r3,r2
  80eba4:	e0bffd17 	ldw	r2,-12(fp)
  80eba8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80ebac:	e0bffd17 	ldw	r2,-12(fp)
  80ebb0:	10c00217 	ldw	r3,8(r2)
  80ebb4:	d0a76617 	ldw	r2,-25192(gp)
  80ebb8:	1880032e 	bgeu	r3,r2,80ebc8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80ebbc:	e0bffd17 	ldw	r2,-12(fp)
  80ebc0:	00c00044 	movi	r3,1
  80ebc4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80ebc8:	e0bffe17 	ldw	r2,-8(fp)
  80ebcc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ebd0:	e0fffd17 	ldw	r3,-12(fp)
  80ebd4:	d0a01404 	addi	r2,gp,-32688
  80ebd8:	18bfcf1e 	bne	r3,r2,80eb18 <__alt_mem_onchip_mem+0xff806b18>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80ebdc:	0001883a 	nop
}
  80ebe0:	0001883a 	nop
  80ebe4:	e037883a 	mov	sp,fp
  80ebe8:	dfc00117 	ldw	ra,4(sp)
  80ebec:	df000017 	ldw	fp,0(sp)
  80ebf0:	dec00204 	addi	sp,sp,8
  80ebf4:	f800283a 	ret

0080ebf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ebf8:	defffe04 	addi	sp,sp,-8
  80ebfc:	dfc00115 	stw	ra,4(sp)
  80ec00:	df000015 	stw	fp,0(sp)
  80ec04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ec08:	d0a01117 	ldw	r2,-32700(gp)
  80ec0c:	10000326 	beq	r2,zero,80ec1c <alt_get_errno+0x24>
  80ec10:	d0a01117 	ldw	r2,-32700(gp)
  80ec14:	103ee83a 	callr	r2
  80ec18:	00000106 	br	80ec20 <alt_get_errno+0x28>
  80ec1c:	d0a75a04 	addi	r2,gp,-25240
}
  80ec20:	e037883a 	mov	sp,fp
  80ec24:	dfc00117 	ldw	ra,4(sp)
  80ec28:	df000017 	ldw	fp,0(sp)
  80ec2c:	dec00204 	addi	sp,sp,8
  80ec30:	f800283a 	ret

0080ec34 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80ec34:	defff904 	addi	sp,sp,-28
  80ec38:	dfc00615 	stw	ra,24(sp)
  80ec3c:	df000515 	stw	fp,20(sp)
  80ec40:	df000504 	addi	fp,sp,20
  80ec44:	e13ffd15 	stw	r4,-12(fp)
  80ec48:	e17ffe15 	stw	r5,-8(fp)
  80ec4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ec50:	e0bffd17 	ldw	r2,-12(fp)
  80ec54:	10000616 	blt	r2,zero,80ec70 <write+0x3c>
  80ec58:	e0bffd17 	ldw	r2,-12(fp)
  80ec5c:	10c00324 	muli	r3,r2,12
  80ec60:	00802074 	movhi	r2,129
  80ec64:	108b9f04 	addi	r2,r2,11900
  80ec68:	1885883a 	add	r2,r3,r2
  80ec6c:	00000106 	br	80ec74 <write+0x40>
  80ec70:	0005883a 	mov	r2,zero
  80ec74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ec78:	e0bffb17 	ldw	r2,-20(fp)
  80ec7c:	10002126 	beq	r2,zero,80ed04 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ec80:	e0bffb17 	ldw	r2,-20(fp)
  80ec84:	10800217 	ldw	r2,8(r2)
  80ec88:	108000cc 	andi	r2,r2,3
  80ec8c:	10001826 	beq	r2,zero,80ecf0 <write+0xbc>
  80ec90:	e0bffb17 	ldw	r2,-20(fp)
  80ec94:	10800017 	ldw	r2,0(r2)
  80ec98:	10800617 	ldw	r2,24(r2)
  80ec9c:	10001426 	beq	r2,zero,80ecf0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80eca0:	e0bffb17 	ldw	r2,-20(fp)
  80eca4:	10800017 	ldw	r2,0(r2)
  80eca8:	10800617 	ldw	r2,24(r2)
  80ecac:	e0ffff17 	ldw	r3,-4(fp)
  80ecb0:	180d883a 	mov	r6,r3
  80ecb4:	e17ffe17 	ldw	r5,-8(fp)
  80ecb8:	e13ffb17 	ldw	r4,-20(fp)
  80ecbc:	103ee83a 	callr	r2
  80ecc0:	e0bffc15 	stw	r2,-16(fp)
  80ecc4:	e0bffc17 	ldw	r2,-16(fp)
  80ecc8:	1000070e 	bge	r2,zero,80ece8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80eccc:	080ebf80 	call	80ebf8 <alt_get_errno>
  80ecd0:	1007883a 	mov	r3,r2
  80ecd4:	e0bffc17 	ldw	r2,-16(fp)
  80ecd8:	0085c83a 	sub	r2,zero,r2
  80ecdc:	18800015 	stw	r2,0(r3)
        return -1;
  80ece0:	00bfffc4 	movi	r2,-1
  80ece4:	00000c06 	br	80ed18 <write+0xe4>
      }
      return rval;
  80ece8:	e0bffc17 	ldw	r2,-16(fp)
  80ecec:	00000a06 	br	80ed18 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ecf0:	080ebf80 	call	80ebf8 <alt_get_errno>
  80ecf4:	1007883a 	mov	r3,r2
  80ecf8:	00800344 	movi	r2,13
  80ecfc:	18800015 	stw	r2,0(r3)
  80ed00:	00000406 	br	80ed14 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ed04:	080ebf80 	call	80ebf8 <alt_get_errno>
  80ed08:	1007883a 	mov	r3,r2
  80ed0c:	00801444 	movi	r2,81
  80ed10:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ed14:	00bfffc4 	movi	r2,-1
}
  80ed18:	e037883a 	mov	sp,fp
  80ed1c:	dfc00117 	ldw	ra,4(sp)
  80ed20:	df000017 	ldw	fp,0(sp)
  80ed24:	dec00204 	addi	sp,sp,8
  80ed28:	f800283a 	ret

0080ed2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80ed2c:	defffd04 	addi	sp,sp,-12
  80ed30:	dfc00215 	stw	ra,8(sp)
  80ed34:	df000115 	stw	fp,4(sp)
  80ed38:	df000104 	addi	fp,sp,4
  80ed3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80ed40:	d1600e04 	addi	r5,gp,-32712
  80ed44:	e13fff17 	ldw	r4,-4(fp)
  80ed48:	08111c40 	call	8111c4 <alt_dev_llist_insert>
}
  80ed4c:	e037883a 	mov	sp,fp
  80ed50:	dfc00117 	ldw	ra,4(sp)
  80ed54:	df000017 	ldw	fp,0(sp)
  80ed58:	dec00204 	addi	sp,sp,8
  80ed5c:	f800283a 	ret

0080ed60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80ed60:	defffd04 	addi	sp,sp,-12
  80ed64:	dfc00215 	stw	ra,8(sp)
  80ed68:	df000115 	stw	fp,4(sp)
  80ed6c:	df000104 	addi	fp,sp,4
  80ed70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80ed74:	08119a80 	call	8119a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80ed78:	00800044 	movi	r2,1
  80ed7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80ed80:	0001883a 	nop
  80ed84:	e037883a 	mov	sp,fp
  80ed88:	dfc00117 	ldw	ra,4(sp)
  80ed8c:	df000017 	ldw	fp,0(sp)
  80ed90:	dec00204 	addi	sp,sp,8
  80ed94:	f800283a 	ret

0080ed98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80ed98:	defffe04 	addi	sp,sp,-8
  80ed9c:	dfc00115 	stw	ra,4(sp)
  80eda0:	df000015 	stw	fp,0(sp)
  80eda4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80eda8:	01c0fa04 	movi	r7,1000
  80edac:	01800084 	movi	r6,2
  80edb0:	000b883a 	mov	r5,zero
  80edb4:	01004074 	movhi	r4,257
  80edb8:	21040804 	addi	r4,r4,4128
  80edbc:	08107ec0 	call	8107ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80edc0:	01800044 	movi	r6,1
  80edc4:	000b883a 	mov	r5,zero
  80edc8:	01002074 	movhi	r4,129
  80edcc:	210c0904 	addi	r4,r4,12324
  80edd0:	080ef940 	call	80ef94 <altera_avalon_jtag_uart_init>
  80edd4:	01002074 	movhi	r4,129
  80edd8:	210bff04 	addi	r4,r4,12284
  80eddc:	080ed2c0 	call	80ed2c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80ede0:	01002074 	movhi	r4,129
  80ede4:	21102104 	addi	r4,r4,16516
  80ede8:	08105e00 	call	8105e0 <altera_avalon_lcd_16207_init>
  80edec:	01002074 	movhi	r4,129
  80edf0:	21101704 	addi	r4,r4,16476
  80edf4:	080ed2c0 	call	80ed2c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80edf8:	000d883a 	mov	r6,zero
  80edfc:	000b883a 	mov	r5,zero
  80ee00:	01002074 	movhi	r4,129
  80ee04:	21106904 	addi	r4,r4,16804
  80ee08:	08109780 	call	810978 <altera_avalon_uart_init>
  80ee0c:	01002074 	movhi	r4,129
  80ee10:	21105f04 	addi	r4,r4,16764
  80ee14:	080ed2c0 	call	80ed2c <alt_dev_reg>
}
  80ee18:	0001883a 	nop
  80ee1c:	e037883a 	mov	sp,fp
  80ee20:	dfc00117 	ldw	ra,4(sp)
  80ee24:	df000017 	ldw	fp,0(sp)
  80ee28:	dec00204 	addi	sp,sp,8
  80ee2c:	f800283a 	ret

0080ee30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ee30:	defffa04 	addi	sp,sp,-24
  80ee34:	dfc00515 	stw	ra,20(sp)
  80ee38:	df000415 	stw	fp,16(sp)
  80ee3c:	df000404 	addi	fp,sp,16
  80ee40:	e13ffd15 	stw	r4,-12(fp)
  80ee44:	e17ffe15 	stw	r5,-8(fp)
  80ee48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ee4c:	e0bffd17 	ldw	r2,-12(fp)
  80ee50:	10800017 	ldw	r2,0(r2)
  80ee54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ee58:	e0bffc17 	ldw	r2,-16(fp)
  80ee5c:	10c00a04 	addi	r3,r2,40
  80ee60:	e0bffd17 	ldw	r2,-12(fp)
  80ee64:	10800217 	ldw	r2,8(r2)
  80ee68:	100f883a 	mov	r7,r2
  80ee6c:	e1bfff17 	ldw	r6,-4(fp)
  80ee70:	e17ffe17 	ldw	r5,-8(fp)
  80ee74:	1809883a 	mov	r4,r3
  80ee78:	080f4580 	call	80f458 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ee7c:	e037883a 	mov	sp,fp
  80ee80:	dfc00117 	ldw	ra,4(sp)
  80ee84:	df000017 	ldw	fp,0(sp)
  80ee88:	dec00204 	addi	sp,sp,8
  80ee8c:	f800283a 	ret

0080ee90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ee90:	defffa04 	addi	sp,sp,-24
  80ee94:	dfc00515 	stw	ra,20(sp)
  80ee98:	df000415 	stw	fp,16(sp)
  80ee9c:	df000404 	addi	fp,sp,16
  80eea0:	e13ffd15 	stw	r4,-12(fp)
  80eea4:	e17ffe15 	stw	r5,-8(fp)
  80eea8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80eeac:	e0bffd17 	ldw	r2,-12(fp)
  80eeb0:	10800017 	ldw	r2,0(r2)
  80eeb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80eeb8:	e0bffc17 	ldw	r2,-16(fp)
  80eebc:	10c00a04 	addi	r3,r2,40
  80eec0:	e0bffd17 	ldw	r2,-12(fp)
  80eec4:	10800217 	ldw	r2,8(r2)
  80eec8:	100f883a 	mov	r7,r2
  80eecc:	e1bfff17 	ldw	r6,-4(fp)
  80eed0:	e17ffe17 	ldw	r5,-8(fp)
  80eed4:	1809883a 	mov	r4,r3
  80eed8:	080f6740 	call	80f674 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80eedc:	e037883a 	mov	sp,fp
  80eee0:	dfc00117 	ldw	ra,4(sp)
  80eee4:	df000017 	ldw	fp,0(sp)
  80eee8:	dec00204 	addi	sp,sp,8
  80eeec:	f800283a 	ret

0080eef0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80eef0:	defffc04 	addi	sp,sp,-16
  80eef4:	dfc00315 	stw	ra,12(sp)
  80eef8:	df000215 	stw	fp,8(sp)
  80eefc:	df000204 	addi	fp,sp,8
  80ef00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ef04:	e0bfff17 	ldw	r2,-4(fp)
  80ef08:	10800017 	ldw	r2,0(r2)
  80ef0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80ef10:	e0bffe17 	ldw	r2,-8(fp)
  80ef14:	10c00a04 	addi	r3,r2,40
  80ef18:	e0bfff17 	ldw	r2,-4(fp)
  80ef1c:	10800217 	ldw	r2,8(r2)
  80ef20:	100b883a 	mov	r5,r2
  80ef24:	1809883a 	mov	r4,r3
  80ef28:	080f3000 	call	80f300 <altera_avalon_jtag_uart_close>
}
  80ef2c:	e037883a 	mov	sp,fp
  80ef30:	dfc00117 	ldw	ra,4(sp)
  80ef34:	df000017 	ldw	fp,0(sp)
  80ef38:	dec00204 	addi	sp,sp,8
  80ef3c:	f800283a 	ret

0080ef40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80ef40:	defffa04 	addi	sp,sp,-24
  80ef44:	dfc00515 	stw	ra,20(sp)
  80ef48:	df000415 	stw	fp,16(sp)
  80ef4c:	df000404 	addi	fp,sp,16
  80ef50:	e13ffd15 	stw	r4,-12(fp)
  80ef54:	e17ffe15 	stw	r5,-8(fp)
  80ef58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ef5c:	e0bffd17 	ldw	r2,-12(fp)
  80ef60:	10800017 	ldw	r2,0(r2)
  80ef64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ef68:	e0bffc17 	ldw	r2,-16(fp)
  80ef6c:	10800a04 	addi	r2,r2,40
  80ef70:	e1bfff17 	ldw	r6,-4(fp)
  80ef74:	e17ffe17 	ldw	r5,-8(fp)
  80ef78:	1009883a 	mov	r4,r2
  80ef7c:	080f3680 	call	80f368 <altera_avalon_jtag_uart_ioctl>
}
  80ef80:	e037883a 	mov	sp,fp
  80ef84:	dfc00117 	ldw	ra,4(sp)
  80ef88:	df000017 	ldw	fp,0(sp)
  80ef8c:	dec00204 	addi	sp,sp,8
  80ef90:	f800283a 	ret

0080ef94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ef94:	defffa04 	addi	sp,sp,-24
  80ef98:	dfc00515 	stw	ra,20(sp)
  80ef9c:	df000415 	stw	fp,16(sp)
  80efa0:	df000404 	addi	fp,sp,16
  80efa4:	e13ffd15 	stw	r4,-12(fp)
  80efa8:	e17ffe15 	stw	r5,-8(fp)
  80efac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80efb0:	e0bffd17 	ldw	r2,-12(fp)
  80efb4:	00c00044 	movi	r3,1
  80efb8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80efbc:	e0bffd17 	ldw	r2,-12(fp)
  80efc0:	10800017 	ldw	r2,0(r2)
  80efc4:	10800104 	addi	r2,r2,4
  80efc8:	1007883a 	mov	r3,r2
  80efcc:	e0bffd17 	ldw	r2,-12(fp)
  80efd0:	10800817 	ldw	r2,32(r2)
  80efd4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80efd8:	e0bffe17 	ldw	r2,-8(fp)
  80efdc:	e0ffff17 	ldw	r3,-4(fp)
  80efe0:	d8000015 	stw	zero,0(sp)
  80efe4:	e1fffd17 	ldw	r7,-12(fp)
  80efe8:	01802074 	movhi	r6,129
  80efec:	31bc1504 	addi	r6,r6,-4012
  80eff0:	180b883a 	mov	r5,r3
  80eff4:	1009883a 	mov	r4,r2
  80eff8:	08115980 	call	811598 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80effc:	e0bffd17 	ldw	r2,-12(fp)
  80f000:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80f004:	e0bffd17 	ldw	r2,-12(fp)
  80f008:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f00c:	d0e76517 	ldw	r3,-25196(gp)
  80f010:	e1fffd17 	ldw	r7,-12(fp)
  80f014:	01802074 	movhi	r6,129
  80f018:	31bc9804 	addi	r6,r6,-3488
  80f01c:	180b883a 	mov	r5,r3
  80f020:	1009883a 	mov	r4,r2
  80f024:	080dd440 	call	80dd44 <alt_alarm_start>
  80f028:	1000040e 	bge	r2,zero,80f03c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80f02c:	e0fffd17 	ldw	r3,-12(fp)
  80f030:	00a00034 	movhi	r2,32768
  80f034:	10bfffc4 	addi	r2,r2,-1
  80f038:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80f03c:	0001883a 	nop
  80f040:	e037883a 	mov	sp,fp
  80f044:	dfc00117 	ldw	ra,4(sp)
  80f048:	df000017 	ldw	fp,0(sp)
  80f04c:	dec00204 	addi	sp,sp,8
  80f050:	f800283a 	ret

0080f054 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80f054:	defff804 	addi	sp,sp,-32
  80f058:	df000715 	stw	fp,28(sp)
  80f05c:	df000704 	addi	fp,sp,28
  80f060:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80f064:	e0bfff17 	ldw	r2,-4(fp)
  80f068:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80f06c:	e0bffb17 	ldw	r2,-20(fp)
  80f070:	10800017 	ldw	r2,0(r2)
  80f074:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f078:	e0bffc17 	ldw	r2,-16(fp)
  80f07c:	10800104 	addi	r2,r2,4
  80f080:	10800037 	ldwio	r2,0(r2)
  80f084:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80f088:	e0bffd17 	ldw	r2,-12(fp)
  80f08c:	1080c00c 	andi	r2,r2,768
  80f090:	10006d26 	beq	r2,zero,80f248 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80f094:	e0bffd17 	ldw	r2,-12(fp)
  80f098:	1080400c 	andi	r2,r2,256
  80f09c:	10003526 	beq	r2,zero,80f174 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80f0a0:	00800074 	movhi	r2,1
  80f0a4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f0a8:	e0bffb17 	ldw	r2,-20(fp)
  80f0ac:	10800a17 	ldw	r2,40(r2)
  80f0b0:	10800044 	addi	r2,r2,1
  80f0b4:	1081ffcc 	andi	r2,r2,2047
  80f0b8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80f0bc:	e0bffb17 	ldw	r2,-20(fp)
  80f0c0:	10c00b17 	ldw	r3,44(r2)
  80f0c4:	e0bffe17 	ldw	r2,-8(fp)
  80f0c8:	18801526 	beq	r3,r2,80f120 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80f0cc:	e0bffc17 	ldw	r2,-16(fp)
  80f0d0:	10800037 	ldwio	r2,0(r2)
  80f0d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80f0d8:	e0bff917 	ldw	r2,-28(fp)
  80f0dc:	10a0000c 	andi	r2,r2,32768
  80f0e0:	10001126 	beq	r2,zero,80f128 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80f0e4:	e0bffb17 	ldw	r2,-20(fp)
  80f0e8:	10800a17 	ldw	r2,40(r2)
  80f0ec:	e0fff917 	ldw	r3,-28(fp)
  80f0f0:	1809883a 	mov	r4,r3
  80f0f4:	e0fffb17 	ldw	r3,-20(fp)
  80f0f8:	1885883a 	add	r2,r3,r2
  80f0fc:	10800e04 	addi	r2,r2,56
  80f100:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f104:	e0bffb17 	ldw	r2,-20(fp)
  80f108:	10800a17 	ldw	r2,40(r2)
  80f10c:	10800044 	addi	r2,r2,1
  80f110:	10c1ffcc 	andi	r3,r2,2047
  80f114:	e0bffb17 	ldw	r2,-20(fp)
  80f118:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80f11c:	003fe206 	br	80f0a8 <__alt_mem_onchip_mem+0xff8070a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80f120:	0001883a 	nop
  80f124:	00000106 	br	80f12c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80f128:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80f12c:	e0bff917 	ldw	r2,-28(fp)
  80f130:	10bfffec 	andhi	r2,r2,65535
  80f134:	10000f26 	beq	r2,zero,80f174 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f138:	e0bffb17 	ldw	r2,-20(fp)
  80f13c:	10c00817 	ldw	r3,32(r2)
  80f140:	00bfff84 	movi	r2,-2
  80f144:	1886703a 	and	r3,r3,r2
  80f148:	e0bffb17 	ldw	r2,-20(fp)
  80f14c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80f150:	e0bffc17 	ldw	r2,-16(fp)
  80f154:	10800104 	addi	r2,r2,4
  80f158:	1007883a 	mov	r3,r2
  80f15c:	e0bffb17 	ldw	r2,-20(fp)
  80f160:	10800817 	ldw	r2,32(r2)
  80f164:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f168:	e0bffc17 	ldw	r2,-16(fp)
  80f16c:	10800104 	addi	r2,r2,4
  80f170:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80f174:	e0bffd17 	ldw	r2,-12(fp)
  80f178:	1080800c 	andi	r2,r2,512
  80f17c:	103fbe26 	beq	r2,zero,80f078 <__alt_mem_onchip_mem+0xff807078>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80f180:	e0bffd17 	ldw	r2,-12(fp)
  80f184:	1004d43a 	srli	r2,r2,16
  80f188:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f18c:	00001406 	br	80f1e0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80f190:	e0bffc17 	ldw	r2,-16(fp)
  80f194:	e0fffb17 	ldw	r3,-20(fp)
  80f198:	18c00d17 	ldw	r3,52(r3)
  80f19c:	e13ffb17 	ldw	r4,-20(fp)
  80f1a0:	20c7883a 	add	r3,r4,r3
  80f1a4:	18c20e04 	addi	r3,r3,2104
  80f1a8:	18c00003 	ldbu	r3,0(r3)
  80f1ac:	18c03fcc 	andi	r3,r3,255
  80f1b0:	18c0201c 	xori	r3,r3,128
  80f1b4:	18ffe004 	addi	r3,r3,-128
  80f1b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f1bc:	e0bffb17 	ldw	r2,-20(fp)
  80f1c0:	10800d17 	ldw	r2,52(r2)
  80f1c4:	10800044 	addi	r2,r2,1
  80f1c8:	10c1ffcc 	andi	r3,r2,2047
  80f1cc:	e0bffb17 	ldw	r2,-20(fp)
  80f1d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80f1d4:	e0bffa17 	ldw	r2,-24(fp)
  80f1d8:	10bfffc4 	addi	r2,r2,-1
  80f1dc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f1e0:	e0bffa17 	ldw	r2,-24(fp)
  80f1e4:	10000526 	beq	r2,zero,80f1fc <altera_avalon_jtag_uart_irq+0x1a8>
  80f1e8:	e0bffb17 	ldw	r2,-20(fp)
  80f1ec:	10c00d17 	ldw	r3,52(r2)
  80f1f0:	e0bffb17 	ldw	r2,-20(fp)
  80f1f4:	10800c17 	ldw	r2,48(r2)
  80f1f8:	18bfe51e 	bne	r3,r2,80f190 <__alt_mem_onchip_mem+0xff807190>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80f1fc:	e0bffa17 	ldw	r2,-24(fp)
  80f200:	103f9d26 	beq	r2,zero,80f078 <__alt_mem_onchip_mem+0xff807078>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f204:	e0bffb17 	ldw	r2,-20(fp)
  80f208:	10c00817 	ldw	r3,32(r2)
  80f20c:	00bfff44 	movi	r2,-3
  80f210:	1886703a 	and	r3,r3,r2
  80f214:	e0bffb17 	ldw	r2,-20(fp)
  80f218:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f21c:	e0bffb17 	ldw	r2,-20(fp)
  80f220:	10800017 	ldw	r2,0(r2)
  80f224:	10800104 	addi	r2,r2,4
  80f228:	1007883a 	mov	r3,r2
  80f22c:	e0bffb17 	ldw	r2,-20(fp)
  80f230:	10800817 	ldw	r2,32(r2)
  80f234:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f238:	e0bffc17 	ldw	r2,-16(fp)
  80f23c:	10800104 	addi	r2,r2,4
  80f240:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80f244:	003f8c06 	br	80f078 <__alt_mem_onchip_mem+0xff807078>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80f248:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80f24c:	0001883a 	nop
  80f250:	e037883a 	mov	sp,fp
  80f254:	df000017 	ldw	fp,0(sp)
  80f258:	dec00104 	addi	sp,sp,4
  80f25c:	f800283a 	ret

0080f260 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80f260:	defff804 	addi	sp,sp,-32
  80f264:	df000715 	stw	fp,28(sp)
  80f268:	df000704 	addi	fp,sp,28
  80f26c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80f270:	e0bffb17 	ldw	r2,-20(fp)
  80f274:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80f278:	e0bff917 	ldw	r2,-28(fp)
  80f27c:	10800017 	ldw	r2,0(r2)
  80f280:	10800104 	addi	r2,r2,4
  80f284:	10800037 	ldwio	r2,0(r2)
  80f288:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80f28c:	e0bffa17 	ldw	r2,-24(fp)
  80f290:	1081000c 	andi	r2,r2,1024
  80f294:	10000b26 	beq	r2,zero,80f2c4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80f298:	e0bff917 	ldw	r2,-28(fp)
  80f29c:	10800017 	ldw	r2,0(r2)
  80f2a0:	10800104 	addi	r2,r2,4
  80f2a4:	1007883a 	mov	r3,r2
  80f2a8:	e0bff917 	ldw	r2,-28(fp)
  80f2ac:	10800817 	ldw	r2,32(r2)
  80f2b0:	10810014 	ori	r2,r2,1024
  80f2b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80f2b8:	e0bff917 	ldw	r2,-28(fp)
  80f2bc:	10000915 	stw	zero,36(r2)
  80f2c0:	00000a06 	br	80f2ec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80f2c4:	e0bff917 	ldw	r2,-28(fp)
  80f2c8:	10c00917 	ldw	r3,36(r2)
  80f2cc:	00a00034 	movhi	r2,32768
  80f2d0:	10bfff04 	addi	r2,r2,-4
  80f2d4:	10c00536 	bltu	r2,r3,80f2ec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80f2d8:	e0bff917 	ldw	r2,-28(fp)
  80f2dc:	10800917 	ldw	r2,36(r2)
  80f2e0:	10c00044 	addi	r3,r2,1
  80f2e4:	e0bff917 	ldw	r2,-28(fp)
  80f2e8:	10c00915 	stw	r3,36(r2)
  80f2ec:	d0a76517 	ldw	r2,-25196(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80f2f0:	e037883a 	mov	sp,fp
  80f2f4:	df000017 	ldw	fp,0(sp)
  80f2f8:	dec00104 	addi	sp,sp,4
  80f2fc:	f800283a 	ret

0080f300 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f300:	defffd04 	addi	sp,sp,-12
  80f304:	df000215 	stw	fp,8(sp)
  80f308:	df000204 	addi	fp,sp,8
  80f30c:	e13ffe15 	stw	r4,-8(fp)
  80f310:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f314:	00000506 	br	80f32c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80f318:	e0bfff17 	ldw	r2,-4(fp)
  80f31c:	1090000c 	andi	r2,r2,16384
  80f320:	10000226 	beq	r2,zero,80f32c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80f324:	00bffd44 	movi	r2,-11
  80f328:	00000b06 	br	80f358 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f32c:	e0bffe17 	ldw	r2,-8(fp)
  80f330:	10c00d17 	ldw	r3,52(r2)
  80f334:	e0bffe17 	ldw	r2,-8(fp)
  80f338:	10800c17 	ldw	r2,48(r2)
  80f33c:	18800526 	beq	r3,r2,80f354 <altera_avalon_jtag_uart_close+0x54>
  80f340:	e0bffe17 	ldw	r2,-8(fp)
  80f344:	10c00917 	ldw	r3,36(r2)
  80f348:	e0bffe17 	ldw	r2,-8(fp)
  80f34c:	10800117 	ldw	r2,4(r2)
  80f350:	18bff136 	bltu	r3,r2,80f318 <__alt_mem_onchip_mem+0xff807318>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f354:	0005883a 	mov	r2,zero
}
  80f358:	e037883a 	mov	sp,fp
  80f35c:	df000017 	ldw	fp,0(sp)
  80f360:	dec00104 	addi	sp,sp,4
  80f364:	f800283a 	ret

0080f368 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80f368:	defffa04 	addi	sp,sp,-24
  80f36c:	df000515 	stw	fp,20(sp)
  80f370:	df000504 	addi	fp,sp,20
  80f374:	e13ffd15 	stw	r4,-12(fp)
  80f378:	e17ffe15 	stw	r5,-8(fp)
  80f37c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80f380:	00bff9c4 	movi	r2,-25
  80f384:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80f388:	e0bffe17 	ldw	r2,-8(fp)
  80f38c:	10da8060 	cmpeqi	r3,r2,27137
  80f390:	1800031e 	bne	r3,zero,80f3a0 <altera_avalon_jtag_uart_ioctl+0x38>
  80f394:	109a80a0 	cmpeqi	r2,r2,27138
  80f398:	1000181e 	bne	r2,zero,80f3fc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80f39c:	00002906 	br	80f444 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80f3a0:	e0bffd17 	ldw	r2,-12(fp)
  80f3a4:	10c00117 	ldw	r3,4(r2)
  80f3a8:	00a00034 	movhi	r2,32768
  80f3ac:	10bfffc4 	addi	r2,r2,-1
  80f3b0:	18802126 	beq	r3,r2,80f438 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80f3b4:	e0bfff17 	ldw	r2,-4(fp)
  80f3b8:	10800017 	ldw	r2,0(r2)
  80f3bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80f3c0:	e0bffc17 	ldw	r2,-16(fp)
  80f3c4:	10800090 	cmplti	r2,r2,2
  80f3c8:	1000061e 	bne	r2,zero,80f3e4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f3cc:	e0fffc17 	ldw	r3,-16(fp)
  80f3d0:	00a00034 	movhi	r2,32768
  80f3d4:	10bfffc4 	addi	r2,r2,-1
  80f3d8:	18800226 	beq	r3,r2,80f3e4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f3dc:	e0bffc17 	ldw	r2,-16(fp)
  80f3e0:	00000206 	br	80f3ec <altera_avalon_jtag_uart_ioctl+0x84>
  80f3e4:	00a00034 	movhi	r2,32768
  80f3e8:	10bfff84 	addi	r2,r2,-2
  80f3ec:	e0fffd17 	ldw	r3,-12(fp)
  80f3f0:	18800115 	stw	r2,4(r3)
      rc = 0;
  80f3f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f3f8:	00000f06 	br	80f438 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80f3fc:	e0bffd17 	ldw	r2,-12(fp)
  80f400:	10c00117 	ldw	r3,4(r2)
  80f404:	00a00034 	movhi	r2,32768
  80f408:	10bfffc4 	addi	r2,r2,-1
  80f40c:	18800c26 	beq	r3,r2,80f440 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80f410:	e0bffd17 	ldw	r2,-12(fp)
  80f414:	10c00917 	ldw	r3,36(r2)
  80f418:	e0bffd17 	ldw	r2,-12(fp)
  80f41c:	10800117 	ldw	r2,4(r2)
  80f420:	1885803a 	cmpltu	r2,r3,r2
  80f424:	10c03fcc 	andi	r3,r2,255
  80f428:	e0bfff17 	ldw	r2,-4(fp)
  80f42c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80f430:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f434:	00000206 	br	80f440 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80f438:	0001883a 	nop
  80f43c:	00000106 	br	80f444 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80f440:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80f444:	e0bffb17 	ldw	r2,-20(fp)
}
  80f448:	e037883a 	mov	sp,fp
  80f44c:	df000017 	ldw	fp,0(sp)
  80f450:	dec00104 	addi	sp,sp,4
  80f454:	f800283a 	ret

0080f458 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80f458:	defff304 	addi	sp,sp,-52
  80f45c:	dfc00c15 	stw	ra,48(sp)
  80f460:	df000b15 	stw	fp,44(sp)
  80f464:	df000b04 	addi	fp,sp,44
  80f468:	e13ffc15 	stw	r4,-16(fp)
  80f46c:	e17ffd15 	stw	r5,-12(fp)
  80f470:	e1bffe15 	stw	r6,-8(fp)
  80f474:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80f478:	e0bffd17 	ldw	r2,-12(fp)
  80f47c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f480:	00004706 	br	80f5a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80f484:	e0bffc17 	ldw	r2,-16(fp)
  80f488:	10800a17 	ldw	r2,40(r2)
  80f48c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80f490:	e0bffc17 	ldw	r2,-16(fp)
  80f494:	10800b17 	ldw	r2,44(r2)
  80f498:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80f49c:	e0fff717 	ldw	r3,-36(fp)
  80f4a0:	e0bff817 	ldw	r2,-32(fp)
  80f4a4:	18800536 	bltu	r3,r2,80f4bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80f4a8:	e0fff717 	ldw	r3,-36(fp)
  80f4ac:	e0bff817 	ldw	r2,-32(fp)
  80f4b0:	1885c83a 	sub	r2,r3,r2
  80f4b4:	e0bff615 	stw	r2,-40(fp)
  80f4b8:	00000406 	br	80f4cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80f4bc:	00c20004 	movi	r3,2048
  80f4c0:	e0bff817 	ldw	r2,-32(fp)
  80f4c4:	1885c83a 	sub	r2,r3,r2
  80f4c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f4cc:	e0bff617 	ldw	r2,-40(fp)
  80f4d0:	10001e26 	beq	r2,zero,80f54c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80f4d4:	e0fffe17 	ldw	r3,-8(fp)
  80f4d8:	e0bff617 	ldw	r2,-40(fp)
  80f4dc:	1880022e 	bgeu	r3,r2,80f4e8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80f4e0:	e0bffe17 	ldw	r2,-8(fp)
  80f4e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80f4e8:	e0bffc17 	ldw	r2,-16(fp)
  80f4ec:	10c00e04 	addi	r3,r2,56
  80f4f0:	e0bff817 	ldw	r2,-32(fp)
  80f4f4:	1885883a 	add	r2,r3,r2
  80f4f8:	e1bff617 	ldw	r6,-40(fp)
  80f4fc:	100b883a 	mov	r5,r2
  80f500:	e13ff517 	ldw	r4,-44(fp)
  80f504:	08070d00 	call	8070d0 <memcpy>
      ptr   += n;
  80f508:	e0fff517 	ldw	r3,-44(fp)
  80f50c:	e0bff617 	ldw	r2,-40(fp)
  80f510:	1885883a 	add	r2,r3,r2
  80f514:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80f518:	e0fffe17 	ldw	r3,-8(fp)
  80f51c:	e0bff617 	ldw	r2,-40(fp)
  80f520:	1885c83a 	sub	r2,r3,r2
  80f524:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f528:	e0fff817 	ldw	r3,-32(fp)
  80f52c:	e0bff617 	ldw	r2,-40(fp)
  80f530:	1885883a 	add	r2,r3,r2
  80f534:	10c1ffcc 	andi	r3,r2,2047
  80f538:	e0bffc17 	ldw	r2,-16(fp)
  80f53c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f540:	e0bffe17 	ldw	r2,-8(fp)
  80f544:	00bfcf16 	blt	zero,r2,80f484 <__alt_mem_onchip_mem+0xff807484>
  80f548:	00000106 	br	80f550 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80f54c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80f550:	e0fff517 	ldw	r3,-44(fp)
  80f554:	e0bffd17 	ldw	r2,-12(fp)
  80f558:	1880141e 	bne	r3,r2,80f5ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f55c:	e0bfff17 	ldw	r2,-4(fp)
  80f560:	1090000c 	andi	r2,r2,16384
  80f564:	1000131e 	bne	r2,zero,80f5b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f568:	0001883a 	nop
  80f56c:	e0bffc17 	ldw	r2,-16(fp)
  80f570:	10c00a17 	ldw	r3,40(r2)
  80f574:	e0bff717 	ldw	r2,-36(fp)
  80f578:	1880051e 	bne	r3,r2,80f590 <altera_avalon_jtag_uart_read+0x138>
  80f57c:	e0bffc17 	ldw	r2,-16(fp)
  80f580:	10c00917 	ldw	r3,36(r2)
  80f584:	e0bffc17 	ldw	r2,-16(fp)
  80f588:	10800117 	ldw	r2,4(r2)
  80f58c:	18bff736 	bltu	r3,r2,80f56c <__alt_mem_onchip_mem+0xff80756c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f590:	e0bffc17 	ldw	r2,-16(fp)
  80f594:	10c00a17 	ldw	r3,40(r2)
  80f598:	e0bff717 	ldw	r2,-36(fp)
  80f59c:	18800726 	beq	r3,r2,80f5bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f5a0:	e0bffe17 	ldw	r2,-8(fp)
  80f5a4:	00bfb716 	blt	zero,r2,80f484 <__alt_mem_onchip_mem+0xff807484>
  80f5a8:	00000506 	br	80f5c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80f5ac:	0001883a 	nop
  80f5b0:	00000306 	br	80f5c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80f5b4:	0001883a 	nop
  80f5b8:	00000106 	br	80f5c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80f5bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f5c0:	e0fff517 	ldw	r3,-44(fp)
  80f5c4:	e0bffd17 	ldw	r2,-12(fp)
  80f5c8:	18801826 	beq	r3,r2,80f62c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f5cc:	0005303a 	rdctl	r2,status
  80f5d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f5d4:	e0fffb17 	ldw	r3,-20(fp)
  80f5d8:	00bfff84 	movi	r2,-2
  80f5dc:	1884703a 	and	r2,r3,r2
  80f5e0:	1001703a 	wrctl	status,r2
  
  return context;
  80f5e4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f5e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f5ec:	e0bffc17 	ldw	r2,-16(fp)
  80f5f0:	10800817 	ldw	r2,32(r2)
  80f5f4:	10c00054 	ori	r3,r2,1
  80f5f8:	e0bffc17 	ldw	r2,-16(fp)
  80f5fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f600:	e0bffc17 	ldw	r2,-16(fp)
  80f604:	10800017 	ldw	r2,0(r2)
  80f608:	10800104 	addi	r2,r2,4
  80f60c:	1007883a 	mov	r3,r2
  80f610:	e0bffc17 	ldw	r2,-16(fp)
  80f614:	10800817 	ldw	r2,32(r2)
  80f618:	18800035 	stwio	r2,0(r3)
  80f61c:	e0bffa17 	ldw	r2,-24(fp)
  80f620:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f624:	e0bff917 	ldw	r2,-28(fp)
  80f628:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f62c:	e0fff517 	ldw	r3,-44(fp)
  80f630:	e0bffd17 	ldw	r2,-12(fp)
  80f634:	18800426 	beq	r3,r2,80f648 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80f638:	e0fff517 	ldw	r3,-44(fp)
  80f63c:	e0bffd17 	ldw	r2,-12(fp)
  80f640:	1885c83a 	sub	r2,r3,r2
  80f644:	00000606 	br	80f660 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80f648:	e0bfff17 	ldw	r2,-4(fp)
  80f64c:	1090000c 	andi	r2,r2,16384
  80f650:	10000226 	beq	r2,zero,80f65c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f654:	00bffd44 	movi	r2,-11
  80f658:	00000106 	br	80f660 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80f65c:	00bffec4 	movi	r2,-5
}
  80f660:	e037883a 	mov	sp,fp
  80f664:	dfc00117 	ldw	ra,4(sp)
  80f668:	df000017 	ldw	fp,0(sp)
  80f66c:	dec00204 	addi	sp,sp,8
  80f670:	f800283a 	ret

0080f674 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f674:	defff304 	addi	sp,sp,-52
  80f678:	dfc00c15 	stw	ra,48(sp)
  80f67c:	df000b15 	stw	fp,44(sp)
  80f680:	df000b04 	addi	fp,sp,44
  80f684:	e13ffc15 	stw	r4,-16(fp)
  80f688:	e17ffd15 	stw	r5,-12(fp)
  80f68c:	e1bffe15 	stw	r6,-8(fp)
  80f690:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f694:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f698:	e0bffd17 	ldw	r2,-12(fp)
  80f69c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f6a0:	00003706 	br	80f780 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f6a4:	e0bffc17 	ldw	r2,-16(fp)
  80f6a8:	10800c17 	ldw	r2,48(r2)
  80f6ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80f6b0:	e0bffc17 	ldw	r2,-16(fp)
  80f6b4:	10800d17 	ldw	r2,52(r2)
  80f6b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80f6bc:	e0fff917 	ldw	r3,-28(fp)
  80f6c0:	e0bff517 	ldw	r2,-44(fp)
  80f6c4:	1880062e 	bgeu	r3,r2,80f6e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f6c8:	e0fff517 	ldw	r3,-44(fp)
  80f6cc:	e0bff917 	ldw	r2,-28(fp)
  80f6d0:	1885c83a 	sub	r2,r3,r2
  80f6d4:	10bfffc4 	addi	r2,r2,-1
  80f6d8:	e0bff615 	stw	r2,-40(fp)
  80f6dc:	00000b06 	br	80f70c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80f6e0:	e0bff517 	ldw	r2,-44(fp)
  80f6e4:	10000526 	beq	r2,zero,80f6fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f6e8:	00c20004 	movi	r3,2048
  80f6ec:	e0bff917 	ldw	r2,-28(fp)
  80f6f0:	1885c83a 	sub	r2,r3,r2
  80f6f4:	e0bff615 	stw	r2,-40(fp)
  80f6f8:	00000406 	br	80f70c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f6fc:	00c1ffc4 	movi	r3,2047
  80f700:	e0bff917 	ldw	r2,-28(fp)
  80f704:	1885c83a 	sub	r2,r3,r2
  80f708:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f70c:	e0bff617 	ldw	r2,-40(fp)
  80f710:	10001e26 	beq	r2,zero,80f78c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80f714:	e0fffe17 	ldw	r3,-8(fp)
  80f718:	e0bff617 	ldw	r2,-40(fp)
  80f71c:	1880022e 	bgeu	r3,r2,80f728 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80f720:	e0bffe17 	ldw	r2,-8(fp)
  80f724:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f728:	e0bffc17 	ldw	r2,-16(fp)
  80f72c:	10c20e04 	addi	r3,r2,2104
  80f730:	e0bff917 	ldw	r2,-28(fp)
  80f734:	1885883a 	add	r2,r3,r2
  80f738:	e1bff617 	ldw	r6,-40(fp)
  80f73c:	e17ffd17 	ldw	r5,-12(fp)
  80f740:	1009883a 	mov	r4,r2
  80f744:	08070d00 	call	8070d0 <memcpy>
      ptr   += n;
  80f748:	e0fffd17 	ldw	r3,-12(fp)
  80f74c:	e0bff617 	ldw	r2,-40(fp)
  80f750:	1885883a 	add	r2,r3,r2
  80f754:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80f758:	e0fffe17 	ldw	r3,-8(fp)
  80f75c:	e0bff617 	ldw	r2,-40(fp)
  80f760:	1885c83a 	sub	r2,r3,r2
  80f764:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f768:	e0fff917 	ldw	r3,-28(fp)
  80f76c:	e0bff617 	ldw	r2,-40(fp)
  80f770:	1885883a 	add	r2,r3,r2
  80f774:	10c1ffcc 	andi	r3,r2,2047
  80f778:	e0bffc17 	ldw	r2,-16(fp)
  80f77c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f780:	e0bffe17 	ldw	r2,-8(fp)
  80f784:	00bfc716 	blt	zero,r2,80f6a4 <__alt_mem_onchip_mem+0xff8076a4>
  80f788:	00000106 	br	80f790 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80f78c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f790:	0005303a 	rdctl	r2,status
  80f794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f798:	e0fffb17 	ldw	r3,-20(fp)
  80f79c:	00bfff84 	movi	r2,-2
  80f7a0:	1884703a 	and	r2,r3,r2
  80f7a4:	1001703a 	wrctl	status,r2
  
  return context;
  80f7a8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f7ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f7b0:	e0bffc17 	ldw	r2,-16(fp)
  80f7b4:	10800817 	ldw	r2,32(r2)
  80f7b8:	10c00094 	ori	r3,r2,2
  80f7bc:	e0bffc17 	ldw	r2,-16(fp)
  80f7c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f7c4:	e0bffc17 	ldw	r2,-16(fp)
  80f7c8:	10800017 	ldw	r2,0(r2)
  80f7cc:	10800104 	addi	r2,r2,4
  80f7d0:	1007883a 	mov	r3,r2
  80f7d4:	e0bffc17 	ldw	r2,-16(fp)
  80f7d8:	10800817 	ldw	r2,32(r2)
  80f7dc:	18800035 	stwio	r2,0(r3)
  80f7e0:	e0bffa17 	ldw	r2,-24(fp)
  80f7e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f7e8:	e0bff817 	ldw	r2,-32(fp)
  80f7ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f7f0:	e0bffe17 	ldw	r2,-8(fp)
  80f7f4:	0080100e 	bge	zero,r2,80f838 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80f7f8:	e0bfff17 	ldw	r2,-4(fp)
  80f7fc:	1090000c 	andi	r2,r2,16384
  80f800:	1000101e 	bne	r2,zero,80f844 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f804:	0001883a 	nop
  80f808:	e0bffc17 	ldw	r2,-16(fp)
  80f80c:	10c00d17 	ldw	r3,52(r2)
  80f810:	e0bff517 	ldw	r2,-44(fp)
  80f814:	1880051e 	bne	r3,r2,80f82c <altera_avalon_jtag_uart_write+0x1b8>
  80f818:	e0bffc17 	ldw	r2,-16(fp)
  80f81c:	10c00917 	ldw	r3,36(r2)
  80f820:	e0bffc17 	ldw	r2,-16(fp)
  80f824:	10800117 	ldw	r2,4(r2)
  80f828:	18bff736 	bltu	r3,r2,80f808 <__alt_mem_onchip_mem+0xff807808>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80f82c:	e0bffc17 	ldw	r2,-16(fp)
  80f830:	10800917 	ldw	r2,36(r2)
  80f834:	1000051e 	bne	r2,zero,80f84c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80f838:	e0bffe17 	ldw	r2,-8(fp)
  80f83c:	00bfd016 	blt	zero,r2,80f780 <__alt_mem_onchip_mem+0xff807780>
  80f840:	00000306 	br	80f850 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80f844:	0001883a 	nop
  80f848:	00000106 	br	80f850 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80f84c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f850:	e0fffd17 	ldw	r3,-12(fp)
  80f854:	e0bff717 	ldw	r2,-36(fp)
  80f858:	18800426 	beq	r3,r2,80f86c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80f85c:	e0fffd17 	ldw	r3,-12(fp)
  80f860:	e0bff717 	ldw	r2,-36(fp)
  80f864:	1885c83a 	sub	r2,r3,r2
  80f868:	00000606 	br	80f884 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80f86c:	e0bfff17 	ldw	r2,-4(fp)
  80f870:	1090000c 	andi	r2,r2,16384
  80f874:	10000226 	beq	r2,zero,80f880 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80f878:	00bffd44 	movi	r2,-11
  80f87c:	00000106 	br	80f884 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80f880:	00bffec4 	movi	r2,-5
}
  80f884:	e037883a 	mov	sp,fp
  80f888:	dfc00117 	ldw	ra,4(sp)
  80f88c:	df000017 	ldw	fp,0(sp)
  80f890:	dec00204 	addi	sp,sp,8
  80f894:	f800283a 	ret

0080f898 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80f898:	defffa04 	addi	sp,sp,-24
  80f89c:	dfc00515 	stw	ra,20(sp)
  80f8a0:	df000415 	stw	fp,16(sp)
  80f8a4:	df000404 	addi	fp,sp,16
  80f8a8:	e13ffe15 	stw	r4,-8(fp)
  80f8ac:	2805883a 	mov	r2,r5
  80f8b0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f8b4:	e0bffe17 	ldw	r2,-8(fp)
  80f8b8:	10800017 	ldw	r2,0(r2)
  80f8bc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f8c0:	008003f4 	movhi	r2,15
  80f8c4:	10909004 	addi	r2,r2,16960
  80f8c8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f8cc:	e0bffe17 	ldw	r2,-8(fp)
  80f8d0:	10800803 	ldbu	r2,32(r2)
  80f8d4:	10803fcc 	andi	r2,r2,255
  80f8d8:	1080201c 	xori	r2,r2,128
  80f8dc:	10bfe004 	addi	r2,r2,-128
  80f8e0:	1000151e 	bne	r2,zero,80f938 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f8e4:	00000906 	br	80f90c <lcd_write_command+0x74>
    if (--i == 0)
  80f8e8:	e0bffc17 	ldw	r2,-16(fp)
  80f8ec:	10bfffc4 	addi	r2,r2,-1
  80f8f0:	e0bffc15 	stw	r2,-16(fp)
  80f8f4:	e0bffc17 	ldw	r2,-16(fp)
  80f8f8:	1000041e 	bne	r2,zero,80f90c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80f8fc:	e0bffe17 	ldw	r2,-8(fp)
  80f900:	00c00044 	movi	r3,1
  80f904:	10c00805 	stb	r3,32(r2)
      return;
  80f908:	00000c06 	br	80f93c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f90c:	e0bffd17 	ldw	r2,-12(fp)
  80f910:	10800104 	addi	r2,r2,4
  80f914:	10800037 	ldwio	r2,0(r2)
  80f918:	1080200c 	andi	r2,r2,128
  80f91c:	103ff21e 	bne	r2,zero,80f8e8 <__alt_mem_onchip_mem+0xff8078e8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f920:	01001904 	movi	r4,100
  80f924:	08119780 	call	811978 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80f928:	e0bffd17 	ldw	r2,-12(fp)
  80f92c:	e0ffff03 	ldbu	r3,-4(fp)
  80f930:	10c00035 	stwio	r3,0(r2)
  80f934:	00000106 	br	80f93c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80f938:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80f93c:	e037883a 	mov	sp,fp
  80f940:	dfc00117 	ldw	ra,4(sp)
  80f944:	df000017 	ldw	fp,0(sp)
  80f948:	dec00204 	addi	sp,sp,8
  80f94c:	f800283a 	ret

0080f950 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80f950:	defffa04 	addi	sp,sp,-24
  80f954:	dfc00515 	stw	ra,20(sp)
  80f958:	df000415 	stw	fp,16(sp)
  80f95c:	df000404 	addi	fp,sp,16
  80f960:	e13ffe15 	stw	r4,-8(fp)
  80f964:	2805883a 	mov	r2,r5
  80f968:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f96c:	e0bffe17 	ldw	r2,-8(fp)
  80f970:	10800017 	ldw	r2,0(r2)
  80f974:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f978:	008003f4 	movhi	r2,15
  80f97c:	10909004 	addi	r2,r2,16960
  80f980:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f984:	e0bffe17 	ldw	r2,-8(fp)
  80f988:	10800803 	ldbu	r2,32(r2)
  80f98c:	10803fcc 	andi	r2,r2,255
  80f990:	1080201c 	xori	r2,r2,128
  80f994:	10bfe004 	addi	r2,r2,-128
  80f998:	10001d1e 	bne	r2,zero,80fa10 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f99c:	00000906 	br	80f9c4 <lcd_write_data+0x74>
    if (--i == 0)
  80f9a0:	e0bffc17 	ldw	r2,-16(fp)
  80f9a4:	10bfffc4 	addi	r2,r2,-1
  80f9a8:	e0bffc15 	stw	r2,-16(fp)
  80f9ac:	e0bffc17 	ldw	r2,-16(fp)
  80f9b0:	1000041e 	bne	r2,zero,80f9c4 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80f9b4:	e0bffe17 	ldw	r2,-8(fp)
  80f9b8:	00c00044 	movi	r3,1
  80f9bc:	10c00805 	stb	r3,32(r2)
      return;
  80f9c0:	00001406 	br	80fa14 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f9c4:	e0bffd17 	ldw	r2,-12(fp)
  80f9c8:	10800104 	addi	r2,r2,4
  80f9cc:	10800037 	ldwio	r2,0(r2)
  80f9d0:	1080200c 	andi	r2,r2,128
  80f9d4:	103ff21e 	bne	r2,zero,80f9a0 <__alt_mem_onchip_mem+0xff8079a0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f9d8:	01001904 	movi	r4,100
  80f9dc:	08119780 	call	811978 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80f9e0:	e0bffd17 	ldw	r2,-12(fp)
  80f9e4:	10800204 	addi	r2,r2,8
  80f9e8:	1007883a 	mov	r3,r2
  80f9ec:	e0bfff03 	ldbu	r2,-4(fp)
  80f9f0:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80f9f4:	e0bffe17 	ldw	r2,-8(fp)
  80f9f8:	108008c3 	ldbu	r2,35(r2)
  80f9fc:	10800044 	addi	r2,r2,1
  80fa00:	1007883a 	mov	r3,r2
  80fa04:	e0bffe17 	ldw	r2,-8(fp)
  80fa08:	10c008c5 	stb	r3,35(r2)
  80fa0c:	00000106 	br	80fa14 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80fa10:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80fa14:	e037883a 	mov	sp,fp
  80fa18:	dfc00117 	ldw	ra,4(sp)
  80fa1c:	df000017 	ldw	fp,0(sp)
  80fa20:	dec00204 	addi	sp,sp,8
  80fa24:	f800283a 	ret

0080fa28 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80fa28:	defffc04 	addi	sp,sp,-16
  80fa2c:	dfc00315 	stw	ra,12(sp)
  80fa30:	df000215 	stw	fp,8(sp)
  80fa34:	df000204 	addi	fp,sp,8
  80fa38:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80fa3c:	01400044 	movi	r5,1
  80fa40:	e13fff17 	ldw	r4,-4(fp)
  80fa44:	080f8980 	call	80f898 <lcd_write_command>

  sp->x = 0;
  80fa48:	e0bfff17 	ldw	r2,-4(fp)
  80fa4c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80fa50:	e0bfff17 	ldw	r2,-4(fp)
  80fa54:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80fa58:	e0bfff17 	ldw	r2,-4(fp)
  80fa5c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fa60:	e03ffe15 	stw	zero,-8(fp)
  80fa64:	00001b06 	br	80fad4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80fa68:	e0bffe17 	ldw	r2,-8(fp)
  80fa6c:	108018e4 	muli	r2,r2,99
  80fa70:	10801004 	addi	r2,r2,64
  80fa74:	e0ffff17 	ldw	r3,-4(fp)
  80fa78:	1885883a 	add	r2,r3,r2
  80fa7c:	01801444 	movi	r6,81
  80fa80:	01400804 	movi	r5,32
  80fa84:	1009883a 	mov	r4,r2
  80fa88:	08022740 	call	802274 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80fa8c:	e0bffe17 	ldw	r2,-8(fp)
  80fa90:	108018e4 	muli	r2,r2,99
  80fa94:	10800c04 	addi	r2,r2,48
  80fa98:	e0ffff17 	ldw	r3,-4(fp)
  80fa9c:	1885883a 	add	r2,r3,r2
  80faa0:	01800404 	movi	r6,16
  80faa4:	01400804 	movi	r5,32
  80faa8:	1009883a 	mov	r4,r2
  80faac:	08022740 	call	802274 <memset>
    sp->line[y].width = 0;
  80fab0:	e0ffff17 	ldw	r3,-4(fp)
  80fab4:	e0bffe17 	ldw	r2,-8(fp)
  80fab8:	108018e4 	muli	r2,r2,99
  80fabc:	1885883a 	add	r2,r3,r2
  80fac0:	10802444 	addi	r2,r2,145
  80fac4:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fac8:	e0bffe17 	ldw	r2,-8(fp)
  80facc:	10800044 	addi	r2,r2,1
  80fad0:	e0bffe15 	stw	r2,-8(fp)
  80fad4:	e0bffe17 	ldw	r2,-8(fp)
  80fad8:	10800090 	cmplti	r2,r2,2
  80fadc:	103fe21e 	bne	r2,zero,80fa68 <__alt_mem_onchip_mem+0xff807a68>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80fae0:	0001883a 	nop
  80fae4:	e037883a 	mov	sp,fp
  80fae8:	dfc00117 	ldw	ra,4(sp)
  80faec:	df000017 	ldw	fp,0(sp)
  80faf0:	dec00204 	addi	sp,sp,8
  80faf4:	f800283a 	ret

0080faf8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80faf8:	defff704 	addi	sp,sp,-36
  80fafc:	dfc00815 	stw	ra,32(sp)
  80fb00:	df000715 	stw	fp,28(sp)
  80fb04:	df000704 	addi	fp,sp,28
  80fb08:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80fb0c:	e0bfff17 	ldw	r2,-4(fp)
  80fb10:	10800943 	ldbu	r2,37(r2)
  80fb14:	10803fcc 	andi	r2,r2,255
  80fb18:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fb1c:	e03ff915 	stw	zero,-28(fp)
  80fb20:	00006706 	br	80fcc0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80fb24:	e0ffff17 	ldw	r3,-4(fp)
  80fb28:	e0bff917 	ldw	r2,-28(fp)
  80fb2c:	108018e4 	muli	r2,r2,99
  80fb30:	1885883a 	add	r2,r3,r2
  80fb34:	10802444 	addi	r2,r2,145
  80fb38:	10800003 	ldbu	r2,0(r2)
  80fb3c:	10803fcc 	andi	r2,r2,255
  80fb40:	1080201c 	xori	r2,r2,128
  80fb44:	10bfe004 	addi	r2,r2,-128
  80fb48:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80fb4c:	e0ffff17 	ldw	r3,-4(fp)
  80fb50:	e0bff917 	ldw	r2,-28(fp)
  80fb54:	108018e4 	muli	r2,r2,99
  80fb58:	1885883a 	add	r2,r3,r2
  80fb5c:	10802484 	addi	r2,r2,146
  80fb60:	10800003 	ldbu	r2,0(r2)
  80fb64:	10c03fcc 	andi	r3,r2,255
  80fb68:	e0bffc17 	ldw	r2,-16(fp)
  80fb6c:	1885383a 	mul	r2,r3,r2
  80fb70:	1005d23a 	srai	r2,r2,8
  80fb74:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80fb78:	e0fffb17 	ldw	r3,-20(fp)
  80fb7c:	e0bffd17 	ldw	r2,-12(fp)
  80fb80:	18800116 	blt	r3,r2,80fb88 <lcd_repaint_screen+0x90>
      offset = 0;
  80fb84:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80fb88:	e03ffa15 	stw	zero,-24(fp)
  80fb8c:	00004606 	br	80fca8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80fb90:	e0fffa17 	ldw	r3,-24(fp)
  80fb94:	e0bffb17 	ldw	r2,-20(fp)
  80fb98:	1885883a 	add	r2,r3,r2
  80fb9c:	e17ffd17 	ldw	r5,-12(fp)
  80fba0:	1009883a 	mov	r4,r2
  80fba4:	0800b280 	call	800b28 <__modsi3>
  80fba8:	1009883a 	mov	r4,r2
  80fbac:	e0ffff17 	ldw	r3,-4(fp)
  80fbb0:	e0bff917 	ldw	r2,-28(fp)
  80fbb4:	108018e4 	muli	r2,r2,99
  80fbb8:	1885883a 	add	r2,r3,r2
  80fbbc:	1105883a 	add	r2,r2,r4
  80fbc0:	10801004 	addi	r2,r2,64
  80fbc4:	10800003 	ldbu	r2,0(r2)
  80fbc8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80fbcc:	e0ffff17 	ldw	r3,-4(fp)
  80fbd0:	e0bff917 	ldw	r2,-28(fp)
  80fbd4:	108018e4 	muli	r2,r2,99
  80fbd8:	1887883a 	add	r3,r3,r2
  80fbdc:	e0bffa17 	ldw	r2,-24(fp)
  80fbe0:	1885883a 	add	r2,r3,r2
  80fbe4:	10800c04 	addi	r2,r2,48
  80fbe8:	10800003 	ldbu	r2,0(r2)
  80fbec:	10c03fcc 	andi	r3,r2,255
  80fbf0:	18c0201c 	xori	r3,r3,128
  80fbf4:	18ffe004 	addi	r3,r3,-128
  80fbf8:	e0bffe07 	ldb	r2,-8(fp)
  80fbfc:	18802726 	beq	r3,r2,80fc9c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80fc00:	e0fff917 	ldw	r3,-28(fp)
  80fc04:	d0a01604 	addi	r2,gp,-32680
  80fc08:	1885883a 	add	r2,r3,r2
  80fc0c:	10800003 	ldbu	r2,0(r2)
  80fc10:	1007883a 	mov	r3,r2
  80fc14:	e0bffa17 	ldw	r2,-24(fp)
  80fc18:	1885883a 	add	r2,r3,r2
  80fc1c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80fc20:	e0fffe43 	ldbu	r3,-7(fp)
  80fc24:	e0bfff17 	ldw	r2,-4(fp)
  80fc28:	108008c3 	ldbu	r2,35(r2)
  80fc2c:	10803fcc 	andi	r2,r2,255
  80fc30:	1080201c 	xori	r2,r2,128
  80fc34:	10bfe004 	addi	r2,r2,-128
  80fc38:	18800a26 	beq	r3,r2,80fc64 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80fc3c:	e0fffe43 	ldbu	r3,-7(fp)
  80fc40:	00bfe004 	movi	r2,-128
  80fc44:	1884b03a 	or	r2,r3,r2
  80fc48:	10803fcc 	andi	r2,r2,255
  80fc4c:	100b883a 	mov	r5,r2
  80fc50:	e13fff17 	ldw	r4,-4(fp)
  80fc54:	080f8980 	call	80f898 <lcd_write_command>
          sp->address = address;
  80fc58:	e0fffe43 	ldbu	r3,-7(fp)
  80fc5c:	e0bfff17 	ldw	r2,-4(fp)
  80fc60:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80fc64:	e0bffe03 	ldbu	r2,-8(fp)
  80fc68:	10803fcc 	andi	r2,r2,255
  80fc6c:	100b883a 	mov	r5,r2
  80fc70:	e13fff17 	ldw	r4,-4(fp)
  80fc74:	080f9500 	call	80f950 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80fc78:	e0ffff17 	ldw	r3,-4(fp)
  80fc7c:	e0bff917 	ldw	r2,-28(fp)
  80fc80:	108018e4 	muli	r2,r2,99
  80fc84:	1887883a 	add	r3,r3,r2
  80fc88:	e0bffa17 	ldw	r2,-24(fp)
  80fc8c:	1885883a 	add	r2,r3,r2
  80fc90:	10800c04 	addi	r2,r2,48
  80fc94:	e0fffe03 	ldbu	r3,-8(fp)
  80fc98:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80fc9c:	e0bffa17 	ldw	r2,-24(fp)
  80fca0:	10800044 	addi	r2,r2,1
  80fca4:	e0bffa15 	stw	r2,-24(fp)
  80fca8:	e0bffa17 	ldw	r2,-24(fp)
  80fcac:	10800410 	cmplti	r2,r2,16
  80fcb0:	103fb71e 	bne	r2,zero,80fb90 <__alt_mem_onchip_mem+0xff807b90>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fcb4:	e0bff917 	ldw	r2,-28(fp)
  80fcb8:	10800044 	addi	r2,r2,1
  80fcbc:	e0bff915 	stw	r2,-28(fp)
  80fcc0:	e0bff917 	ldw	r2,-28(fp)
  80fcc4:	10800090 	cmplti	r2,r2,2
  80fcc8:	103f961e 	bne	r2,zero,80fb24 <__alt_mem_onchip_mem+0xff807b24>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80fccc:	0001883a 	nop
  80fcd0:	e037883a 	mov	sp,fp
  80fcd4:	dfc00117 	ldw	ra,4(sp)
  80fcd8:	df000017 	ldw	fp,0(sp)
  80fcdc:	dec00204 	addi	sp,sp,8
  80fce0:	f800283a 	ret

0080fce4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80fce4:	defffc04 	addi	sp,sp,-16
  80fce8:	dfc00315 	stw	ra,12(sp)
  80fcec:	df000215 	stw	fp,8(sp)
  80fcf0:	df000204 	addi	fp,sp,8
  80fcf4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fcf8:	e03ffe15 	stw	zero,-8(fp)
  80fcfc:	00001d06 	br	80fd74 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80fd00:	e0bffe17 	ldw	r2,-8(fp)
  80fd04:	00800f16 	blt	zero,r2,80fd44 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80fd08:	e0bffe17 	ldw	r2,-8(fp)
  80fd0c:	108018e4 	muli	r2,r2,99
  80fd10:	10801004 	addi	r2,r2,64
  80fd14:	e0ffff17 	ldw	r3,-4(fp)
  80fd18:	1889883a 	add	r4,r3,r2
  80fd1c:	e0bffe17 	ldw	r2,-8(fp)
  80fd20:	10800044 	addi	r2,r2,1
  80fd24:	108018e4 	muli	r2,r2,99
  80fd28:	10801004 	addi	r2,r2,64
  80fd2c:	e0ffff17 	ldw	r3,-4(fp)
  80fd30:	1885883a 	add	r2,r3,r2
  80fd34:	01801404 	movi	r6,80
  80fd38:	100b883a 	mov	r5,r2
  80fd3c:	08070d00 	call	8070d0 <memcpy>
  80fd40:	00000906 	br	80fd68 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80fd44:	e0bffe17 	ldw	r2,-8(fp)
  80fd48:	108018e4 	muli	r2,r2,99
  80fd4c:	10801004 	addi	r2,r2,64
  80fd50:	e0ffff17 	ldw	r3,-4(fp)
  80fd54:	1885883a 	add	r2,r3,r2
  80fd58:	01801404 	movi	r6,80
  80fd5c:	01400804 	movi	r5,32
  80fd60:	1009883a 	mov	r4,r2
  80fd64:	08022740 	call	802274 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fd68:	e0bffe17 	ldw	r2,-8(fp)
  80fd6c:	10800044 	addi	r2,r2,1
  80fd70:	e0bffe15 	stw	r2,-8(fp)
  80fd74:	e0bffe17 	ldw	r2,-8(fp)
  80fd78:	10800090 	cmplti	r2,r2,2
  80fd7c:	103fe01e 	bne	r2,zero,80fd00 <__alt_mem_onchip_mem+0xff807d00>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80fd80:	e0bfff17 	ldw	r2,-4(fp)
  80fd84:	10800883 	ldbu	r2,34(r2)
  80fd88:	10bfffc4 	addi	r2,r2,-1
  80fd8c:	1007883a 	mov	r3,r2
  80fd90:	e0bfff17 	ldw	r2,-4(fp)
  80fd94:	10c00885 	stb	r3,34(r2)
}
  80fd98:	0001883a 	nop
  80fd9c:	e037883a 	mov	sp,fp
  80fda0:	dfc00117 	ldw	ra,4(sp)
  80fda4:	df000017 	ldw	fp,0(sp)
  80fda8:	dec00204 	addi	sp,sp,8
  80fdac:	f800283a 	ret

0080fdb0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80fdb0:	defff904 	addi	sp,sp,-28
  80fdb4:	dfc00615 	stw	ra,24(sp)
  80fdb8:	df000515 	stw	fp,20(sp)
  80fdbc:	df000504 	addi	fp,sp,20
  80fdc0:	e13ffe15 	stw	r4,-8(fp)
  80fdc4:	2805883a 	mov	r2,r5
  80fdc8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80fdcc:	e03ffb15 	stw	zero,-20(fp)
  80fdd0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80fdd4:	e0bffe17 	ldw	r2,-8(fp)
  80fdd8:	10800a03 	ldbu	r2,40(r2)
  80fddc:	10803fcc 	andi	r2,r2,255
  80fde0:	1080201c 	xori	r2,r2,128
  80fde4:	10bfe004 	addi	r2,r2,-128
  80fde8:	108016d8 	cmpnei	r2,r2,91
  80fdec:	1000411e 	bne	r2,zero,80fef4 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80fdf0:	e0bffe17 	ldw	r2,-8(fp)
  80fdf4:	10800a04 	addi	r2,r2,40
  80fdf8:	10800044 	addi	r2,r2,1
  80fdfc:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80fe00:	00000c06 	br	80fe34 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80fe04:	e0bffb17 	ldw	r2,-20(fp)
  80fe08:	10c002a4 	muli	r3,r2,10
  80fe0c:	e0bffd17 	ldw	r2,-12(fp)
  80fe10:	11000044 	addi	r4,r2,1
  80fe14:	e13ffd15 	stw	r4,-12(fp)
  80fe18:	10800003 	ldbu	r2,0(r2)
  80fe1c:	10803fcc 	andi	r2,r2,255
  80fe20:	1080201c 	xori	r2,r2,128
  80fe24:	10bfe004 	addi	r2,r2,-128
  80fe28:	10bff404 	addi	r2,r2,-48
  80fe2c:	1885883a 	add	r2,r3,r2
  80fe30:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80fe34:	d0e01717 	ldw	r3,-32676(gp)
  80fe38:	e0bffd17 	ldw	r2,-12(fp)
  80fe3c:	10800003 	ldbu	r2,0(r2)
  80fe40:	10803fcc 	andi	r2,r2,255
  80fe44:	1080201c 	xori	r2,r2,128
  80fe48:	10bfe004 	addi	r2,r2,-128
  80fe4c:	10800044 	addi	r2,r2,1
  80fe50:	1885883a 	add	r2,r3,r2
  80fe54:	10800003 	ldbu	r2,0(r2)
  80fe58:	10803fcc 	andi	r2,r2,255
  80fe5c:	1080010c 	andi	r2,r2,4
  80fe60:	103fe81e 	bne	r2,zero,80fe04 <__alt_mem_onchip_mem+0xff807e04>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80fe64:	e0bffd17 	ldw	r2,-12(fp)
  80fe68:	10800003 	ldbu	r2,0(r2)
  80fe6c:	10803fcc 	andi	r2,r2,255
  80fe70:	1080201c 	xori	r2,r2,128
  80fe74:	10bfe004 	addi	r2,r2,-128
  80fe78:	10800ed8 	cmpnei	r2,r2,59
  80fe7c:	10001f1e 	bne	r2,zero,80fefc <lcd_handle_escape+0x14c>
    {
      ptr++;
  80fe80:	e0bffd17 	ldw	r2,-12(fp)
  80fe84:	10800044 	addi	r2,r2,1
  80fe88:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80fe8c:	00000c06 	br	80fec0 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80fe90:	e0bffc17 	ldw	r2,-16(fp)
  80fe94:	10c002a4 	muli	r3,r2,10
  80fe98:	e0bffd17 	ldw	r2,-12(fp)
  80fe9c:	11000044 	addi	r4,r2,1
  80fea0:	e13ffd15 	stw	r4,-12(fp)
  80fea4:	10800003 	ldbu	r2,0(r2)
  80fea8:	10803fcc 	andi	r2,r2,255
  80feac:	1080201c 	xori	r2,r2,128
  80feb0:	10bfe004 	addi	r2,r2,-128
  80feb4:	10bff404 	addi	r2,r2,-48
  80feb8:	1885883a 	add	r2,r3,r2
  80febc:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80fec0:	d0e01717 	ldw	r3,-32676(gp)
  80fec4:	e0bffd17 	ldw	r2,-12(fp)
  80fec8:	10800003 	ldbu	r2,0(r2)
  80fecc:	10803fcc 	andi	r2,r2,255
  80fed0:	1080201c 	xori	r2,r2,128
  80fed4:	10bfe004 	addi	r2,r2,-128
  80fed8:	10800044 	addi	r2,r2,1
  80fedc:	1885883a 	add	r2,r3,r2
  80fee0:	10800003 	ldbu	r2,0(r2)
  80fee4:	10803fcc 	andi	r2,r2,255
  80fee8:	1080010c 	andi	r2,r2,4
  80feec:	103fe81e 	bne	r2,zero,80fe90 <__alt_mem_onchip_mem+0xff807e90>
  80fef0:	00000206 	br	80fefc <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80fef4:	00bfffc4 	movi	r2,-1
  80fef8:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80fefc:	e0bfff07 	ldb	r2,-4(fp)
  80ff00:	10c012a0 	cmpeqi	r3,r2,74
  80ff04:	1800291e 	bne	r3,zero,80ffac <lcd_handle_escape+0x1fc>
  80ff08:	10c012c8 	cmpgei	r3,r2,75
  80ff0c:	1800031e 	bne	r3,zero,80ff1c <lcd_handle_escape+0x16c>
  80ff10:	10801220 	cmpeqi	r2,r2,72
  80ff14:	1000061e 	bne	r2,zero,80ff30 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80ff18:	00004a06 	br	810044 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80ff1c:	10c012e0 	cmpeqi	r3,r2,75
  80ff20:	1800281e 	bne	r3,zero,80ffc4 <lcd_handle_escape+0x214>
  80ff24:	108019a0 	cmpeqi	r2,r2,102
  80ff28:	1000011e 	bne	r2,zero,80ff30 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80ff2c:	00004506 	br	810044 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80ff30:	e0bffc17 	ldw	r2,-16(fp)
  80ff34:	0080050e 	bge	zero,r2,80ff4c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80ff38:	e0bffc17 	ldw	r2,-16(fp)
  80ff3c:	10bfffc4 	addi	r2,r2,-1
  80ff40:	1007883a 	mov	r3,r2
  80ff44:	e0bffe17 	ldw	r2,-8(fp)
  80ff48:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80ff4c:	e0bffb17 	ldw	r2,-20(fp)
  80ff50:	0080370e 	bge	zero,r2,810030 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80ff54:	e0bffb17 	ldw	r2,-20(fp)
  80ff58:	10bfffc4 	addi	r2,r2,-1
  80ff5c:	1007883a 	mov	r3,r2
  80ff60:	e0bffe17 	ldw	r2,-8(fp)
  80ff64:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80ff68:	e0bffe17 	ldw	r2,-8(fp)
  80ff6c:	10800883 	ldbu	r2,34(r2)
  80ff70:	10803fcc 	andi	r2,r2,255
  80ff74:	10800170 	cmpltui	r2,r2,5
  80ff78:	1000061e 	bne	r2,zero,80ff94 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80ff7c:	e0bffe17 	ldw	r2,-8(fp)
  80ff80:	00c00104 	movi	r3,4
  80ff84:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80ff88:	00000206 	br	80ff94 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80ff8c:	e13ffe17 	ldw	r4,-8(fp)
  80ff90:	080fce40 	call	80fce4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80ff94:	e0bffe17 	ldw	r2,-8(fp)
  80ff98:	10800883 	ldbu	r2,34(r2)
  80ff9c:	10803fcc 	andi	r2,r2,255
  80ffa0:	108000e8 	cmpgeui	r2,r2,3
  80ffa4:	103ff91e 	bne	r2,zero,80ff8c <__alt_mem_onchip_mem+0xff807f8c>
        lcd_scroll_up(sp);
    }
    break;
  80ffa8:	00002106 	br	810030 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80ffac:	e0bffb17 	ldw	r2,-20(fp)
  80ffb0:	10800098 	cmpnei	r2,r2,2
  80ffb4:	1000201e 	bne	r2,zero,810038 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80ffb8:	e13ffe17 	ldw	r4,-8(fp)
  80ffbc:	080fa280 	call	80fa28 <lcd_clear_screen>
    break;
  80ffc0:	00001d06 	br	810038 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80ffc4:	e0bffb17 	ldw	r2,-20(fp)
  80ffc8:	00801d16 	blt	zero,r2,810040 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80ffcc:	e0bffe17 	ldw	r2,-8(fp)
  80ffd0:	10800843 	ldbu	r2,33(r2)
  80ffd4:	10803fcc 	andi	r2,r2,255
  80ffd8:	10801428 	cmpgeui	r2,r2,80
  80ffdc:	1000181e 	bne	r2,zero,810040 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80ffe0:	e0bffe17 	ldw	r2,-8(fp)
  80ffe4:	10800883 	ldbu	r2,34(r2)
  80ffe8:	10803fcc 	andi	r2,r2,255
  80ffec:	108018e4 	muli	r2,r2,99
  80fff0:	10801004 	addi	r2,r2,64
  80fff4:	e0fffe17 	ldw	r3,-8(fp)
  80fff8:	1887883a 	add	r3,r3,r2
  80fffc:	e0bffe17 	ldw	r2,-8(fp)
  810000:	10800843 	ldbu	r2,33(r2)
  810004:	10803fcc 	andi	r2,r2,255
  810008:	1889883a 	add	r4,r3,r2
  81000c:	e0bffe17 	ldw	r2,-8(fp)
  810010:	10800843 	ldbu	r2,33(r2)
  810014:	10803fcc 	andi	r2,r2,255
  810018:	00c01404 	movi	r3,80
  81001c:	1885c83a 	sub	r2,r3,r2
  810020:	100d883a 	mov	r6,r2
  810024:	01400804 	movi	r5,32
  810028:	08022740 	call	802274 <memset>
    }
    break;
  81002c:	00000406 	br	810040 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  810030:	0001883a 	nop
  810034:	00000306 	br	810044 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  810038:	0001883a 	nop
  81003c:	00000106 	br	810044 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  810040:	0001883a 	nop
  }
}
  810044:	0001883a 	nop
  810048:	e037883a 	mov	sp,fp
  81004c:	dfc00117 	ldw	ra,4(sp)
  810050:	df000017 	ldw	fp,0(sp)
  810054:	dec00204 	addi	sp,sp,8
  810058:	f800283a 	ret

0081005c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  81005c:	defff304 	addi	sp,sp,-52
  810060:	dfc00c15 	stw	ra,48(sp)
  810064:	df000b15 	stw	fp,44(sp)
  810068:	df000b04 	addi	fp,sp,44
  81006c:	e13ffc15 	stw	r4,-16(fp)
  810070:	e17ffd15 	stw	r5,-12(fp)
  810074:	e1bffe15 	stw	r6,-8(fp)
  810078:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  81007c:	e0bffe17 	ldw	r2,-8(fp)
  810080:	e0fffd17 	ldw	r3,-12(fp)
  810084:	1885883a 	add	r2,r3,r2
  810088:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  81008c:	e0bffc17 	ldw	r2,-16(fp)
  810090:	00c00044 	movi	r3,1
  810094:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  810098:	00009906 	br	810300 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  81009c:	e0bffd17 	ldw	r2,-12(fp)
  8100a0:	10800003 	ldbu	r2,0(r2)
  8100a4:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8100a8:	e0bffc17 	ldw	r2,-16(fp)
  8100ac:	10800903 	ldbu	r2,36(r2)
  8100b0:	10803fcc 	andi	r2,r2,255
  8100b4:	1080201c 	xori	r2,r2,128
  8100b8:	10bfe004 	addi	r2,r2,-128
  8100bc:	10003716 	blt	r2,zero,81019c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8100c0:	e0bffc17 	ldw	r2,-16(fp)
  8100c4:	10800903 	ldbu	r2,36(r2)
  8100c8:	10803fcc 	andi	r2,r2,255
  8100cc:	1080201c 	xori	r2,r2,128
  8100d0:	10bfe004 	addi	r2,r2,-128
  8100d4:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8100d8:	e0bffa17 	ldw	r2,-24(fp)
  8100dc:	1000031e 	bne	r2,zero,8100ec <altera_avalon_lcd_16207_write+0x90>
  8100e0:	e0bff907 	ldb	r2,-28(fp)
  8100e4:	108016d8 	cmpnei	r2,r2,91
  8100e8:	10000d1e 	bne	r2,zero,810120 <altera_avalon_lcd_16207_write+0xc4>
  8100ec:	e0bffa17 	ldw	r2,-24(fp)
  8100f0:	10001826 	beq	r2,zero,810154 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8100f4:	d0e01717 	ldw	r3,-32676(gp)
  8100f8:	e0bff907 	ldb	r2,-28(fp)
  8100fc:	10800044 	addi	r2,r2,1
  810100:	1885883a 	add	r2,r3,r2
  810104:	10800003 	ldbu	r2,0(r2)
  810108:	10803fcc 	andi	r2,r2,255
  81010c:	1080010c 	andi	r2,r2,4
  810110:	1000101e 	bne	r2,zero,810154 <altera_avalon_lcd_16207_write+0xf8>
  810114:	e0bff907 	ldb	r2,-28(fp)
  810118:	10800ee0 	cmpeqi	r2,r2,59
  81011c:	10000d1e 	bne	r2,zero,810154 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  810120:	e0fffc17 	ldw	r3,-16(fp)
  810124:	e0bffa17 	ldw	r2,-24(fp)
  810128:	1885883a 	add	r2,r3,r2
  81012c:	10800a04 	addi	r2,r2,40
  810130:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  810134:	e0bff907 	ldb	r2,-28(fp)
  810138:	100b883a 	mov	r5,r2
  81013c:	e13ffc17 	ldw	r4,-16(fp)
  810140:	080fdb00 	call	80fdb0 <lcd_handle_escape>

        sp->esccount = -1;
  810144:	e0bffc17 	ldw	r2,-16(fp)
  810148:	00ffffc4 	movi	r3,-1
  81014c:	10c00905 	stb	r3,36(r2)
  810150:	00006806 	br	8102f4 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  810154:	e0bffc17 	ldw	r2,-16(fp)
  810158:	10800903 	ldbu	r2,36(r2)
  81015c:	10803fcc 	andi	r2,r2,255
  810160:	108001e8 	cmpgeui	r2,r2,7
  810164:	1000631e 	bne	r2,zero,8102f4 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  810168:	e0fffc17 	ldw	r3,-16(fp)
  81016c:	e0bffa17 	ldw	r2,-24(fp)
  810170:	1885883a 	add	r2,r3,r2
  810174:	10800a04 	addi	r2,r2,40
  810178:	e0fff903 	ldbu	r3,-28(fp)
  81017c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  810180:	e0bffc17 	ldw	r2,-16(fp)
  810184:	10800903 	ldbu	r2,36(r2)
  810188:	10800044 	addi	r2,r2,1
  81018c:	1007883a 	mov	r3,r2
  810190:	e0bffc17 	ldw	r2,-16(fp)
  810194:	10c00905 	stb	r3,36(r2)
  810198:	00005606 	br	8102f4 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  81019c:	e0bff907 	ldb	r2,-28(fp)
  8101a0:	108006d8 	cmpnei	r2,r2,27
  8101a4:	1000031e 	bne	r2,zero,8101b4 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  8101a8:	e0bffc17 	ldw	r2,-16(fp)
  8101ac:	10000905 	stb	zero,36(r2)
  8101b0:	00005006 	br	8102f4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8101b4:	e0bff907 	ldb	r2,-28(fp)
  8101b8:	10800358 	cmpnei	r2,r2,13
  8101bc:	1000031e 	bne	r2,zero,8101cc <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8101c0:	e0bffc17 	ldw	r2,-16(fp)
  8101c4:	10000845 	stb	zero,33(r2)
  8101c8:	00004a06 	br	8102f4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8101cc:	e0bff907 	ldb	r2,-28(fp)
  8101d0:	10800298 	cmpnei	r2,r2,10
  8101d4:	1000101e 	bne	r2,zero,810218 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8101d8:	e0bffc17 	ldw	r2,-16(fp)
  8101dc:	10000845 	stb	zero,33(r2)
      sp->y++;
  8101e0:	e0bffc17 	ldw	r2,-16(fp)
  8101e4:	10800883 	ldbu	r2,34(r2)
  8101e8:	10800044 	addi	r2,r2,1
  8101ec:	1007883a 	mov	r3,r2
  8101f0:	e0bffc17 	ldw	r2,-16(fp)
  8101f4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8101f8:	e0bffc17 	ldw	r2,-16(fp)
  8101fc:	10800883 	ldbu	r2,34(r2)
  810200:	10803fcc 	andi	r2,r2,255
  810204:	108000f0 	cmpltui	r2,r2,3
  810208:	10003a1e 	bne	r2,zero,8102f4 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  81020c:	e13ffc17 	ldw	r4,-16(fp)
  810210:	080fce40 	call	80fce4 <lcd_scroll_up>
  810214:	00003706 	br	8102f4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  810218:	e0bff907 	ldb	r2,-28(fp)
  81021c:	10800218 	cmpnei	r2,r2,8
  810220:	10000b1e 	bne	r2,zero,810250 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  810224:	e0bffc17 	ldw	r2,-16(fp)
  810228:	10800843 	ldbu	r2,33(r2)
  81022c:	10803fcc 	andi	r2,r2,255
  810230:	10003026 	beq	r2,zero,8102f4 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  810234:	e0bffc17 	ldw	r2,-16(fp)
  810238:	10800843 	ldbu	r2,33(r2)
  81023c:	10bfffc4 	addi	r2,r2,-1
  810240:	1007883a 	mov	r3,r2
  810244:	e0bffc17 	ldw	r2,-16(fp)
  810248:	10c00845 	stb	r3,33(r2)
  81024c:	00002906 	br	8102f4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  810250:	d0e01717 	ldw	r3,-32676(gp)
  810254:	e0bff907 	ldb	r2,-28(fp)
  810258:	10800044 	addi	r2,r2,1
  81025c:	1885883a 	add	r2,r3,r2
  810260:	10800003 	ldbu	r2,0(r2)
  810264:	10803fcc 	andi	r2,r2,255
  810268:	1080201c 	xori	r2,r2,128
  81026c:	10bfe004 	addi	r2,r2,-128
  810270:	108025cc 	andi	r2,r2,151
  810274:	10001f26 	beq	r2,zero,8102f4 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  810278:	e0bffc17 	ldw	r2,-16(fp)
  81027c:	10800883 	ldbu	r2,34(r2)
  810280:	10803fcc 	andi	r2,r2,255
  810284:	108000b0 	cmpltui	r2,r2,2
  810288:	1000021e 	bne	r2,zero,810294 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  81028c:	e13ffc17 	ldw	r4,-16(fp)
  810290:	080fce40 	call	80fce4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810294:	e0bffc17 	ldw	r2,-16(fp)
  810298:	10800843 	ldbu	r2,33(r2)
  81029c:	10803fcc 	andi	r2,r2,255
  8102a0:	10801428 	cmpgeui	r2,r2,80
  8102a4:	10000d1e 	bne	r2,zero,8102dc <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  8102a8:	e0bffc17 	ldw	r2,-16(fp)
  8102ac:	10800883 	ldbu	r2,34(r2)
  8102b0:	10c03fcc 	andi	r3,r2,255
  8102b4:	e0bffc17 	ldw	r2,-16(fp)
  8102b8:	10800843 	ldbu	r2,33(r2)
  8102bc:	10803fcc 	andi	r2,r2,255
  8102c0:	e13ffc17 	ldw	r4,-16(fp)
  8102c4:	18c018e4 	muli	r3,r3,99
  8102c8:	20c7883a 	add	r3,r4,r3
  8102cc:	1885883a 	add	r2,r3,r2
  8102d0:	10801004 	addi	r2,r2,64
  8102d4:	e0fff903 	ldbu	r3,-28(fp)
  8102d8:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8102dc:	e0bffc17 	ldw	r2,-16(fp)
  8102e0:	10800843 	ldbu	r2,33(r2)
  8102e4:	10800044 	addi	r2,r2,1
  8102e8:	1007883a 	mov	r3,r2
  8102ec:	e0bffc17 	ldw	r2,-16(fp)
  8102f0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8102f4:	e0bffd17 	ldw	r2,-12(fp)
  8102f8:	10800044 	addi	r2,r2,1
  8102fc:	e0bffd15 	stw	r2,-12(fp)
  810300:	e0fffd17 	ldw	r3,-12(fp)
  810304:	e0bff817 	ldw	r2,-32(fp)
  810308:	18bf6436 	bltu	r3,r2,81009c <__alt_mem_onchip_mem+0xff80809c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  81030c:	00800404 	movi	r2,16
  810310:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810314:	e03ff515 	stw	zero,-44(fp)
  810318:	00003706 	br	8103f8 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81031c:	00801404 	movi	r2,80
  810320:	e0bff715 	stw	r2,-36(fp)
  810324:	00001106 	br	81036c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  810328:	e0bff717 	ldw	r2,-36(fp)
  81032c:	10bfffc4 	addi	r2,r2,-1
  810330:	e13ffc17 	ldw	r4,-16(fp)
  810334:	e0fff517 	ldw	r3,-44(fp)
  810338:	18c018e4 	muli	r3,r3,99
  81033c:	20c7883a 	add	r3,r4,r3
  810340:	1885883a 	add	r2,r3,r2
  810344:	10801004 	addi	r2,r2,64
  810348:	10800003 	ldbu	r2,0(r2)
  81034c:	10803fcc 	andi	r2,r2,255
  810350:	1080201c 	xori	r2,r2,128
  810354:	10bfe004 	addi	r2,r2,-128
  810358:	10800820 	cmpeqi	r2,r2,32
  81035c:	10000626 	beq	r2,zero,810378 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810360:	e0bff717 	ldw	r2,-36(fp)
  810364:	10bfffc4 	addi	r2,r2,-1
  810368:	e0bff715 	stw	r2,-36(fp)
  81036c:	e0bff717 	ldw	r2,-36(fp)
  810370:	00bfed16 	blt	zero,r2,810328 <__alt_mem_onchip_mem+0xff808328>
  810374:	00000106 	br	81037c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  810378:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81037c:	e0bff717 	ldw	r2,-36(fp)
  810380:	10800448 	cmpgei	r2,r2,17
  810384:	1000031e 	bne	r2,zero,810394 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  810388:	00800404 	movi	r2,16
  81038c:	e0bff715 	stw	r2,-36(fp)
  810390:	00000306 	br	8103a0 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  810394:	e0bff717 	ldw	r2,-36(fp)
  810398:	10800044 	addi	r2,r2,1
  81039c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8103a0:	e0bff717 	ldw	r2,-36(fp)
  8103a4:	1009883a 	mov	r4,r2
  8103a8:	e0fffc17 	ldw	r3,-16(fp)
  8103ac:	e0bff517 	ldw	r2,-44(fp)
  8103b0:	108018e4 	muli	r2,r2,99
  8103b4:	1885883a 	add	r2,r3,r2
  8103b8:	10802444 	addi	r2,r2,145
  8103bc:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8103c0:	e0fff617 	ldw	r3,-40(fp)
  8103c4:	e0bff717 	ldw	r2,-36(fp)
  8103c8:	1880020e 	bge	r3,r2,8103d4 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8103cc:	e0bff717 	ldw	r2,-36(fp)
  8103d0:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8103d4:	e0fffc17 	ldw	r3,-16(fp)
  8103d8:	e0bff517 	ldw	r2,-44(fp)
  8103dc:	108018e4 	muli	r2,r2,99
  8103e0:	1885883a 	add	r2,r3,r2
  8103e4:	10802484 	addi	r2,r2,146
  8103e8:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8103ec:	e0bff517 	ldw	r2,-44(fp)
  8103f0:	10800044 	addi	r2,r2,1
  8103f4:	e0bff515 	stw	r2,-44(fp)
  8103f8:	e0bff517 	ldw	r2,-44(fp)
  8103fc:	10800090 	cmplti	r2,r2,2
  810400:	103fc61e 	bne	r2,zero,81031c <__alt_mem_onchip_mem+0xff80831c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  810404:	e0bff617 	ldw	r2,-40(fp)
  810408:	10800448 	cmpgei	r2,r2,17
  81040c:	1000031e 	bne	r2,zero,81041c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  810410:	e0bffc17 	ldw	r2,-16(fp)
  810414:	10000985 	stb	zero,38(r2)
  810418:	00002e06 	br	8104d4 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  81041c:	e0bff617 	ldw	r2,-40(fp)
  810420:	1085883a 	add	r2,r2,r2
  810424:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  810428:	e0bff617 	ldw	r2,-40(fp)
  81042c:	1007883a 	mov	r3,r2
  810430:	e0bffc17 	ldw	r2,-16(fp)
  810434:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810438:	e03ff515 	stw	zero,-44(fp)
  81043c:	00002206 	br	8104c8 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  810440:	e0fffc17 	ldw	r3,-16(fp)
  810444:	e0bff517 	ldw	r2,-44(fp)
  810448:	108018e4 	muli	r2,r2,99
  81044c:	1885883a 	add	r2,r3,r2
  810450:	10802444 	addi	r2,r2,145
  810454:	10800003 	ldbu	r2,0(r2)
  810458:	10803fcc 	andi	r2,r2,255
  81045c:	1080201c 	xori	r2,r2,128
  810460:	10bfe004 	addi	r2,r2,-128
  810464:	10800450 	cmplti	r2,r2,17
  810468:	1000141e 	bne	r2,zero,8104bc <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81046c:	e0fffc17 	ldw	r3,-16(fp)
  810470:	e0bff517 	ldw	r2,-44(fp)
  810474:	108018e4 	muli	r2,r2,99
  810478:	1885883a 	add	r2,r3,r2
  81047c:	10802444 	addi	r2,r2,145
  810480:	10800003 	ldbu	r2,0(r2)
  810484:	10803fcc 	andi	r2,r2,255
  810488:	1080201c 	xori	r2,r2,128
  81048c:	10bfe004 	addi	r2,r2,-128
  810490:	1004923a 	slli	r2,r2,8
  810494:	e17ff617 	ldw	r5,-40(fp)
  810498:	1009883a 	mov	r4,r2
  81049c:	0800aa40 	call	800aa4 <__divsi3>
  8104a0:	1009883a 	mov	r4,r2
  8104a4:	e0fffc17 	ldw	r3,-16(fp)
  8104a8:	e0bff517 	ldw	r2,-44(fp)
  8104ac:	108018e4 	muli	r2,r2,99
  8104b0:	1885883a 	add	r2,r3,r2
  8104b4:	10802484 	addi	r2,r2,146
  8104b8:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8104bc:	e0bff517 	ldw	r2,-44(fp)
  8104c0:	10800044 	addi	r2,r2,1
  8104c4:	e0bff515 	stw	r2,-44(fp)
  8104c8:	e0bff517 	ldw	r2,-44(fp)
  8104cc:	10800090 	cmplti	r2,r2,2
  8104d0:	103fdb1e 	bne	r2,zero,810440 <__alt_mem_onchip_mem+0xff808440>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8104d4:	e0bffc17 	ldw	r2,-16(fp)
  8104d8:	10800943 	ldbu	r2,37(r2)
  8104dc:	10803fcc 	andi	r2,r2,255
  8104e0:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8104e4:	e13ffc17 	ldw	r4,-16(fp)
  8104e8:	080faf80 	call	80faf8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8104ec:	e0bffc17 	ldw	r2,-16(fp)
  8104f0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8104f4:	e0bffc17 	ldw	r2,-16(fp)
  8104f8:	10800943 	ldbu	r2,37(r2)
  8104fc:	10c03fcc 	andi	r3,r2,255
  810500:	e0bffb17 	ldw	r2,-20(fp)
  810504:	18800426 	beq	r3,r2,810518 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  810508:	e0bffc17 	ldw	r2,-16(fp)
  81050c:	00c00044 	movi	r3,1
  810510:	10c009c5 	stb	r3,39(r2)
  }
  810514:	003fef06 	br	8104d4 <__alt_mem_onchip_mem+0xff8084d4>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  810518:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  81051c:	e0bffe17 	ldw	r2,-8(fp)
}
  810520:	e037883a 	mov	sp,fp
  810524:	dfc00117 	ldw	ra,4(sp)
  810528:	df000017 	ldw	fp,0(sp)
  81052c:	dec00204 	addi	sp,sp,8
  810530:	f800283a 	ret

00810534 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  810534:	defffc04 	addi	sp,sp,-16
  810538:	dfc00315 	stw	ra,12(sp)
  81053c:	df000215 	stw	fp,8(sp)
  810540:	df000204 	addi	fp,sp,8
  810544:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  810548:	e0bfff17 	ldw	r2,-4(fp)
  81054c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  810550:	e0bffe17 	ldw	r2,-8(fp)
  810554:	10800943 	ldbu	r2,37(r2)
  810558:	10803fcc 	andi	r2,r2,255
  81055c:	10c00044 	addi	r3,r2,1
  810560:	e0bffe17 	ldw	r2,-8(fp)
  810564:	10800983 	ldbu	r2,38(r2)
  810568:	10803fcc 	andi	r2,r2,255
  81056c:	18800316 	blt	r3,r2,81057c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  810570:	e0bffe17 	ldw	r2,-8(fp)
  810574:	10000945 	stb	zero,37(r2)
  810578:	00000606 	br	810594 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81057c:	e0bffe17 	ldw	r2,-8(fp)
  810580:	10800943 	ldbu	r2,37(r2)
  810584:	10800044 	addi	r2,r2,1
  810588:	1007883a 	mov	r3,r2
  81058c:	e0bffe17 	ldw	r2,-8(fp)
  810590:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  810594:	e0bffe17 	ldw	r2,-8(fp)
  810598:	10800983 	ldbu	r2,38(r2)
  81059c:	10803fcc 	andi	r2,r2,255
  8105a0:	10000826 	beq	r2,zero,8105c4 <alt_lcd_16207_timeout+0x90>
  8105a4:	e0bffe17 	ldw	r2,-8(fp)
  8105a8:	108009c3 	ldbu	r2,39(r2)
  8105ac:	10803fcc 	andi	r2,r2,255
  8105b0:	1080201c 	xori	r2,r2,128
  8105b4:	10bfe004 	addi	r2,r2,-128
  8105b8:	1000021e 	bne	r2,zero,8105c4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8105bc:	e13ffe17 	ldw	r4,-8(fp)
  8105c0:	080faf80 	call	80faf8 <lcd_repaint_screen>

  return sp->period;
  8105c4:	e0bffe17 	ldw	r2,-8(fp)
  8105c8:	10800717 	ldw	r2,28(r2)
}
  8105cc:	e037883a 	mov	sp,fp
  8105d0:	dfc00117 	ldw	ra,4(sp)
  8105d4:	df000017 	ldw	fp,0(sp)
  8105d8:	dec00204 	addi	sp,sp,8
  8105dc:	f800283a 	ret

008105e0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8105e0:	defffc04 	addi	sp,sp,-16
  8105e4:	dfc00315 	stw	ra,12(sp)
  8105e8:	df000215 	stw	fp,8(sp)
  8105ec:	df000204 	addi	fp,sp,8
  8105f0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8105f4:	e0bfff17 	ldw	r2,-4(fp)
  8105f8:	10800017 	ldw	r2,0(r2)
  8105fc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  810600:	e0bfff17 	ldw	r2,-4(fp)
  810604:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  810608:	010ea604 	movi	r4,15000
  81060c:	08119780 	call	811978 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810610:	e0bffe17 	ldw	r2,-8(fp)
  810614:	00c00c04 	movi	r3,48
  810618:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81061c:	01040104 	movi	r4,4100
  810620:	08119780 	call	811978 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810624:	e0bffe17 	ldw	r2,-8(fp)
  810628:	00c00c04 	movi	r3,48
  81062c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  810630:	0100fa04 	movi	r4,1000
  810634:	08119780 	call	811978 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810638:	e0bffe17 	ldw	r2,-8(fp)
  81063c:	00c00c04 	movi	r3,48
  810640:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  810644:	01400e04 	movi	r5,56
  810648:	e13fff17 	ldw	r4,-4(fp)
  81064c:	080f8980 	call	80f898 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  810650:	01400204 	movi	r5,8
  810654:	e13fff17 	ldw	r4,-4(fp)
  810658:	080f8980 	call	80f898 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81065c:	e13fff17 	ldw	r4,-4(fp)
  810660:	080fa280 	call	80fa28 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  810664:	01400184 	movi	r5,6
  810668:	e13fff17 	ldw	r4,-4(fp)
  81066c:	080f8980 	call	80f898 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  810670:	01400304 	movi	r5,12
  810674:	e13fff17 	ldw	r4,-4(fp)
  810678:	080f8980 	call	80f898 <lcd_write_command>

  sp->esccount = -1;
  81067c:	e0bfff17 	ldw	r2,-4(fp)
  810680:	00ffffc4 	movi	r3,-1
  810684:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  810688:	e0bfff17 	ldw	r2,-4(fp)
  81068c:	10800a04 	addi	r2,r2,40
  810690:	01800204 	movi	r6,8
  810694:	000b883a 	mov	r5,zero
  810698:	1009883a 	mov	r4,r2
  81069c:	08022740 	call	802274 <memset>

  sp->scrollpos = 0;
  8106a0:	e0bfff17 	ldw	r2,-4(fp)
  8106a4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8106a8:	e0bfff17 	ldw	r2,-4(fp)
  8106ac:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8106b0:	e0bfff17 	ldw	r2,-4(fp)
  8106b4:	100009c5 	stb	zero,39(r2)
  8106b8:	d0a76517 	ldw	r2,-25196(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8106bc:	01400284 	movi	r5,10
  8106c0:	1009883a 	mov	r4,r2
  8106c4:	0800b9c0 	call	800b9c <__udivsi3>
  8106c8:	1007883a 	mov	r3,r2
  8106cc:	e0bfff17 	ldw	r2,-4(fp)
  8106d0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8106d4:	e0bfff17 	ldw	r2,-4(fp)
  8106d8:	10c00104 	addi	r3,r2,4
  8106dc:	e0bfff17 	ldw	r2,-4(fp)
  8106e0:	10800717 	ldw	r2,28(r2)
  8106e4:	e1ffff17 	ldw	r7,-4(fp)
  8106e8:	01802074 	movhi	r6,129
  8106ec:	31814d04 	addi	r6,r6,1332
  8106f0:	100b883a 	mov	r5,r2
  8106f4:	1809883a 	mov	r4,r3
  8106f8:	080dd440 	call	80dd44 <alt_alarm_start>
}
  8106fc:	0001883a 	nop
  810700:	e037883a 	mov	sp,fp
  810704:	dfc00117 	ldw	ra,4(sp)
  810708:	df000017 	ldw	fp,0(sp)
  81070c:	dec00204 	addi	sp,sp,8
  810710:	f800283a 	ret

00810714 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810714:	defffa04 	addi	sp,sp,-24
  810718:	dfc00515 	stw	ra,20(sp)
  81071c:	df000415 	stw	fp,16(sp)
  810720:	df000404 	addi	fp,sp,16
  810724:	e13ffd15 	stw	r4,-12(fp)
  810728:	e17ffe15 	stw	r5,-8(fp)
  81072c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  810730:	e0bffd17 	ldw	r2,-12(fp)
  810734:	10800017 	ldw	r2,0(r2)
  810738:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81073c:	e0bffc17 	ldw	r2,-16(fp)
  810740:	10c00a04 	addi	r3,r2,40
  810744:	e0bffd17 	ldw	r2,-12(fp)
  810748:	10800217 	ldw	r2,8(r2)
  81074c:	100f883a 	mov	r7,r2
  810750:	e1bfff17 	ldw	r6,-4(fp)
  810754:	e17ffe17 	ldw	r5,-8(fp)
  810758:	1809883a 	mov	r4,r3
  81075c:	081005c0 	call	81005c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  810760:	e037883a 	mov	sp,fp
  810764:	dfc00117 	ldw	ra,4(sp)
  810768:	df000017 	ldw	fp,0(sp)
  81076c:	dec00204 	addi	sp,sp,8
  810770:	f800283a 	ret

00810774 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  810774:	defffa04 	addi	sp,sp,-24
  810778:	dfc00515 	stw	ra,20(sp)
  81077c:	df000415 	stw	fp,16(sp)
  810780:	df000404 	addi	fp,sp,16
  810784:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  810788:	0007883a 	mov	r3,zero
  81078c:	e0bfff17 	ldw	r2,-4(fp)
  810790:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  810794:	e0bfff17 	ldw	r2,-4(fp)
  810798:	10800104 	addi	r2,r2,4
  81079c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107a0:	0005303a 	rdctl	r2,status
  8107a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107a8:	e0fffd17 	ldw	r3,-12(fp)
  8107ac:	00bfff84 	movi	r2,-2
  8107b0:	1884703a 	and	r2,r3,r2
  8107b4:	1001703a 	wrctl	status,r2
  
  return context;
  8107b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8107bc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8107c0:	080eaf00 	call	80eaf0 <alt_tick>
  8107c4:	e0bffc17 	ldw	r2,-16(fp)
  8107c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107cc:	e0bffe17 	ldw	r2,-8(fp)
  8107d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8107d4:	0001883a 	nop
  8107d8:	e037883a 	mov	sp,fp
  8107dc:	dfc00117 	ldw	ra,4(sp)
  8107e0:	df000017 	ldw	fp,0(sp)
  8107e4:	dec00204 	addi	sp,sp,8
  8107e8:	f800283a 	ret

008107ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8107ec:	defff804 	addi	sp,sp,-32
  8107f0:	dfc00715 	stw	ra,28(sp)
  8107f4:	df000615 	stw	fp,24(sp)
  8107f8:	df000604 	addi	fp,sp,24
  8107fc:	e13ffc15 	stw	r4,-16(fp)
  810800:	e17ffd15 	stw	r5,-12(fp)
  810804:	e1bffe15 	stw	r6,-8(fp)
  810808:	e1ffff15 	stw	r7,-4(fp)
  81080c:	e0bfff17 	ldw	r2,-4(fp)
  810810:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  810814:	d0a76517 	ldw	r2,-25196(gp)
  810818:	1000021e 	bne	r2,zero,810824 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  81081c:	e0bffb17 	ldw	r2,-20(fp)
  810820:	d0a76515 	stw	r2,-25196(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810824:	e0bffc17 	ldw	r2,-16(fp)
  810828:	10800104 	addi	r2,r2,4
  81082c:	00c001c4 	movi	r3,7
  810830:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  810834:	d8000015 	stw	zero,0(sp)
  810838:	e1fffc17 	ldw	r7,-16(fp)
  81083c:	01802074 	movhi	r6,129
  810840:	3181dd04 	addi	r6,r6,1908
  810844:	e17ffe17 	ldw	r5,-8(fp)
  810848:	e13ffd17 	ldw	r4,-12(fp)
  81084c:	08115980 	call	811598 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  810850:	0001883a 	nop
  810854:	e037883a 	mov	sp,fp
  810858:	dfc00117 	ldw	ra,4(sp)
  81085c:	df000017 	ldw	fp,0(sp)
  810860:	dec00204 	addi	sp,sp,8
  810864:	f800283a 	ret

00810868 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810868:	defffa04 	addi	sp,sp,-24
  81086c:	dfc00515 	stw	ra,20(sp)
  810870:	df000415 	stw	fp,16(sp)
  810874:	df000404 	addi	fp,sp,16
  810878:	e13ffd15 	stw	r4,-12(fp)
  81087c:	e17ffe15 	stw	r5,-8(fp)
  810880:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810884:	e0bffd17 	ldw	r2,-12(fp)
  810888:	10800017 	ldw	r2,0(r2)
  81088c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  810890:	e0bffc17 	ldw	r2,-16(fp)
  810894:	10c00a04 	addi	r3,r2,40
  810898:	e0bffd17 	ldw	r2,-12(fp)
  81089c:	10800217 	ldw	r2,8(r2)
  8108a0:	100f883a 	mov	r7,r2
  8108a4:	e1bfff17 	ldw	r6,-4(fp)
  8108a8:	e17ffe17 	ldw	r5,-8(fp)
  8108ac:	1809883a 	mov	r4,r3
  8108b0:	0810d7c0 	call	810d7c <altera_avalon_uart_read>
      fd->fd_flags);
}
  8108b4:	e037883a 	mov	sp,fp
  8108b8:	dfc00117 	ldw	ra,4(sp)
  8108bc:	df000017 	ldw	fp,0(sp)
  8108c0:	dec00204 	addi	sp,sp,8
  8108c4:	f800283a 	ret

008108c8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8108c8:	defffa04 	addi	sp,sp,-24
  8108cc:	dfc00515 	stw	ra,20(sp)
  8108d0:	df000415 	stw	fp,16(sp)
  8108d4:	df000404 	addi	fp,sp,16
  8108d8:	e13ffd15 	stw	r4,-12(fp)
  8108dc:	e17ffe15 	stw	r5,-8(fp)
  8108e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8108e4:	e0bffd17 	ldw	r2,-12(fp)
  8108e8:	10800017 	ldw	r2,0(r2)
  8108ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8108f0:	e0bffc17 	ldw	r2,-16(fp)
  8108f4:	10c00a04 	addi	r3,r2,40
  8108f8:	e0bffd17 	ldw	r2,-12(fp)
  8108fc:	10800217 	ldw	r2,8(r2)
  810900:	100f883a 	mov	r7,r2
  810904:	e1bfff17 	ldw	r6,-4(fp)
  810908:	e17ffe17 	ldw	r5,-8(fp)
  81090c:	1809883a 	mov	r4,r3
  810910:	0810f940 	call	810f94 <altera_avalon_uart_write>
      fd->fd_flags);
}
  810914:	e037883a 	mov	sp,fp
  810918:	dfc00117 	ldw	ra,4(sp)
  81091c:	df000017 	ldw	fp,0(sp)
  810920:	dec00204 	addi	sp,sp,8
  810924:	f800283a 	ret

00810928 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  810928:	defffc04 	addi	sp,sp,-16
  81092c:	dfc00315 	stw	ra,12(sp)
  810930:	df000215 	stw	fp,8(sp)
  810934:	df000204 	addi	fp,sp,8
  810938:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81093c:	e0bfff17 	ldw	r2,-4(fp)
  810940:	10800017 	ldw	r2,0(r2)
  810944:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  810948:	e0bffe17 	ldw	r2,-8(fp)
  81094c:	10c00a04 	addi	r3,r2,40
  810950:	e0bfff17 	ldw	r2,-4(fp)
  810954:	10800217 	ldw	r2,8(r2)
  810958:	100b883a 	mov	r5,r2
  81095c:	1809883a 	mov	r4,r3
  810960:	0810cec0 	call	810cec <altera_avalon_uart_close>
}
  810964:	e037883a 	mov	sp,fp
  810968:	dfc00117 	ldw	ra,4(sp)
  81096c:	df000017 	ldw	fp,0(sp)
  810970:	dec00204 	addi	sp,sp,8
  810974:	f800283a 	ret

00810978 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  810978:	defff804 	addi	sp,sp,-32
  81097c:	dfc00715 	stw	ra,28(sp)
  810980:	df000615 	stw	fp,24(sp)
  810984:	df000604 	addi	fp,sp,24
  810988:	e13ffd15 	stw	r4,-12(fp)
  81098c:	e17ffe15 	stw	r5,-8(fp)
  810990:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  810994:	e0bffd17 	ldw	r2,-12(fp)
  810998:	10800017 	ldw	r2,0(r2)
  81099c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8109a0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8109a4:	1000041e 	bne	r2,zero,8109b8 <altera_avalon_uart_init+0x40>
  8109a8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8109ac:	1000021e 	bne	r2,zero,8109b8 <altera_avalon_uart_init+0x40>
  8109b0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8109b4:	10000226 	beq	r2,zero,8109c0 <altera_avalon_uart_init+0x48>
  8109b8:	00800044 	movi	r2,1
  8109bc:	00000106 	br	8109c4 <altera_avalon_uart_init+0x4c>
  8109c0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8109c4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8109c8:	e0bffc17 	ldw	r2,-16(fp)
  8109cc:	10000f1e 	bne	r2,zero,810a0c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8109d0:	e0bffd17 	ldw	r2,-12(fp)
  8109d4:	00c32004 	movi	r3,3200
  8109d8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8109dc:	e0bffb17 	ldw	r2,-20(fp)
  8109e0:	10800304 	addi	r2,r2,12
  8109e4:	e0fffd17 	ldw	r3,-12(fp)
  8109e8:	18c00117 	ldw	r3,4(r3)
  8109ec:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8109f0:	d8000015 	stw	zero,0(sp)
  8109f4:	e1fffd17 	ldw	r7,-12(fp)
  8109f8:	01802074 	movhi	r6,129
  8109fc:	31828904 	addi	r6,r6,2596
  810a00:	e17fff17 	ldw	r5,-4(fp)
  810a04:	e13ffe17 	ldw	r4,-8(fp)
  810a08:	08115980 	call	811598 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  810a0c:	0001883a 	nop
  810a10:	e037883a 	mov	sp,fp
  810a14:	dfc00117 	ldw	ra,4(sp)
  810a18:	df000017 	ldw	fp,0(sp)
  810a1c:	dec00204 	addi	sp,sp,8
  810a20:	f800283a 	ret

00810a24 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  810a24:	defffa04 	addi	sp,sp,-24
  810a28:	dfc00515 	stw	ra,20(sp)
  810a2c:	df000415 	stw	fp,16(sp)
  810a30:	df000404 	addi	fp,sp,16
  810a34:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  810a38:	e0bfff17 	ldw	r2,-4(fp)
  810a3c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  810a40:	e0bffc17 	ldw	r2,-16(fp)
  810a44:	10800017 	ldw	r2,0(r2)
  810a48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  810a4c:	e0bffd17 	ldw	r2,-12(fp)
  810a50:	10800204 	addi	r2,r2,8
  810a54:	10800037 	ldwio	r2,0(r2)
  810a58:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  810a5c:	e0bffd17 	ldw	r2,-12(fp)
  810a60:	10800204 	addi	r2,r2,8
  810a64:	0007883a 	mov	r3,zero
  810a68:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  810a6c:	e0bffd17 	ldw	r2,-12(fp)
  810a70:	10800204 	addi	r2,r2,8
  810a74:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  810a78:	e0bffe17 	ldw	r2,-8(fp)
  810a7c:	1080200c 	andi	r2,r2,128
  810a80:	10000326 	beq	r2,zero,810a90 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  810a84:	e17ffe17 	ldw	r5,-8(fp)
  810a88:	e13ffc17 	ldw	r4,-16(fp)
  810a8c:	0810ac00 	call	810ac0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  810a90:	e0bffe17 	ldw	r2,-8(fp)
  810a94:	1081100c 	andi	r2,r2,1088
  810a98:	10000326 	beq	r2,zero,810aa8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  810a9c:	e17ffe17 	ldw	r5,-8(fp)
  810aa0:	e13ffc17 	ldw	r4,-16(fp)
  810aa4:	0810ba40 	call	810ba4 <altera_avalon_uart_txirq>
  }
  

}
  810aa8:	0001883a 	nop
  810aac:	e037883a 	mov	sp,fp
  810ab0:	dfc00117 	ldw	ra,4(sp)
  810ab4:	df000017 	ldw	fp,0(sp)
  810ab8:	dec00204 	addi	sp,sp,8
  810abc:	f800283a 	ret

00810ac0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810ac0:	defffc04 	addi	sp,sp,-16
  810ac4:	df000315 	stw	fp,12(sp)
  810ac8:	df000304 	addi	fp,sp,12
  810acc:	e13ffe15 	stw	r4,-8(fp)
  810ad0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  810ad4:	e0bfff17 	ldw	r2,-4(fp)
  810ad8:	108000cc 	andi	r2,r2,3
  810adc:	10002c1e 	bne	r2,zero,810b90 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  810ae0:	e0bffe17 	ldw	r2,-8(fp)
  810ae4:	10800317 	ldw	r2,12(r2)
  810ae8:	e0bffe17 	ldw	r2,-8(fp)
  810aec:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810af0:	e0bffe17 	ldw	r2,-8(fp)
  810af4:	10800317 	ldw	r2,12(r2)
  810af8:	10800044 	addi	r2,r2,1
  810afc:	10800fcc 	andi	r2,r2,63
  810b00:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  810b04:	e0bffe17 	ldw	r2,-8(fp)
  810b08:	10800317 	ldw	r2,12(r2)
  810b0c:	e0fffe17 	ldw	r3,-8(fp)
  810b10:	18c00017 	ldw	r3,0(r3)
  810b14:	18c00037 	ldwio	r3,0(r3)
  810b18:	1809883a 	mov	r4,r3
  810b1c:	e0fffe17 	ldw	r3,-8(fp)
  810b20:	1885883a 	add	r2,r3,r2
  810b24:	10800704 	addi	r2,r2,28
  810b28:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  810b2c:	e0bffe17 	ldw	r2,-8(fp)
  810b30:	e0fffd17 	ldw	r3,-12(fp)
  810b34:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810b38:	e0bffe17 	ldw	r2,-8(fp)
  810b3c:	10800317 	ldw	r2,12(r2)
  810b40:	10800044 	addi	r2,r2,1
  810b44:	10800fcc 	andi	r2,r2,63
  810b48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  810b4c:	e0bffe17 	ldw	r2,-8(fp)
  810b50:	10c00217 	ldw	r3,8(r2)
  810b54:	e0bffd17 	ldw	r2,-12(fp)
  810b58:	18800e1e 	bne	r3,r2,810b94 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810b5c:	e0bffe17 	ldw	r2,-8(fp)
  810b60:	10c00117 	ldw	r3,4(r2)
  810b64:	00bfdfc4 	movi	r2,-129
  810b68:	1886703a 	and	r3,r3,r2
  810b6c:	e0bffe17 	ldw	r2,-8(fp)
  810b70:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  810b74:	e0bffe17 	ldw	r2,-8(fp)
  810b78:	10800017 	ldw	r2,0(r2)
  810b7c:	10800304 	addi	r2,r2,12
  810b80:	e0fffe17 	ldw	r3,-8(fp)
  810b84:	18c00117 	ldw	r3,4(r3)
  810b88:	10c00035 	stwio	r3,0(r2)
  810b8c:	00000106 	br	810b94 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  810b90:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  810b94:	e037883a 	mov	sp,fp
  810b98:	df000017 	ldw	fp,0(sp)
  810b9c:	dec00104 	addi	sp,sp,4
  810ba0:	f800283a 	ret

00810ba4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810ba4:	defffb04 	addi	sp,sp,-20
  810ba8:	df000415 	stw	fp,16(sp)
  810bac:	df000404 	addi	fp,sp,16
  810bb0:	e13ffc15 	stw	r4,-16(fp)
  810bb4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  810bb8:	e0bffc17 	ldw	r2,-16(fp)
  810bbc:	10c00417 	ldw	r3,16(r2)
  810bc0:	e0bffc17 	ldw	r2,-16(fp)
  810bc4:	10800517 	ldw	r2,20(r2)
  810bc8:	18803226 	beq	r3,r2,810c94 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  810bcc:	e0bffc17 	ldw	r2,-16(fp)
  810bd0:	10800617 	ldw	r2,24(r2)
  810bd4:	1080008c 	andi	r2,r2,2
  810bd8:	10000326 	beq	r2,zero,810be8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810bdc:	e0bffd17 	ldw	r2,-12(fp)
  810be0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  810be4:	10001d26 	beq	r2,zero,810c5c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  810be8:	e0bffc17 	ldw	r2,-16(fp)
  810bec:	10800417 	ldw	r2,16(r2)
  810bf0:	e0bffc17 	ldw	r2,-16(fp)
  810bf4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  810bf8:	e0bffc17 	ldw	r2,-16(fp)
  810bfc:	10800017 	ldw	r2,0(r2)
  810c00:	10800104 	addi	r2,r2,4
  810c04:	e0fffc17 	ldw	r3,-16(fp)
  810c08:	18c00417 	ldw	r3,16(r3)
  810c0c:	e13ffc17 	ldw	r4,-16(fp)
  810c10:	20c7883a 	add	r3,r4,r3
  810c14:	18c01704 	addi	r3,r3,92
  810c18:	18c00003 	ldbu	r3,0(r3)
  810c1c:	18c03fcc 	andi	r3,r3,255
  810c20:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  810c24:	e0bffc17 	ldw	r2,-16(fp)
  810c28:	10800417 	ldw	r2,16(r2)
  810c2c:	10800044 	addi	r2,r2,1
  810c30:	e0fffc17 	ldw	r3,-16(fp)
  810c34:	18800415 	stw	r2,16(r3)
  810c38:	10c00fcc 	andi	r3,r2,63
  810c3c:	e0bffc17 	ldw	r2,-16(fp)
  810c40:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  810c44:	e0bffc17 	ldw	r2,-16(fp)
  810c48:	10800117 	ldw	r2,4(r2)
  810c4c:	10c01014 	ori	r3,r2,64
  810c50:	e0bffc17 	ldw	r2,-16(fp)
  810c54:	10c00115 	stw	r3,4(r2)
  810c58:	00000e06 	br	810c94 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  810c5c:	e0bffc17 	ldw	r2,-16(fp)
  810c60:	10800017 	ldw	r2,0(r2)
  810c64:	10800204 	addi	r2,r2,8
  810c68:	10800037 	ldwio	r2,0(r2)
  810c6c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810c70:	e0bffd17 	ldw	r2,-12(fp)
  810c74:	1082000c 	andi	r2,r2,2048
  810c78:	1000061e 	bne	r2,zero,810c94 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  810c7c:	e0bffc17 	ldw	r2,-16(fp)
  810c80:	10c00117 	ldw	r3,4(r2)
  810c84:	00bfefc4 	movi	r2,-65
  810c88:	1886703a 	and	r3,r3,r2
  810c8c:	e0bffc17 	ldw	r2,-16(fp)
  810c90:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  810c94:	e0bffc17 	ldw	r2,-16(fp)
  810c98:	10c00417 	ldw	r3,16(r2)
  810c9c:	e0bffc17 	ldw	r2,-16(fp)
  810ca0:	10800517 	ldw	r2,20(r2)
  810ca4:	1880061e 	bne	r3,r2,810cc0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810ca8:	e0bffc17 	ldw	r2,-16(fp)
  810cac:	10c00117 	ldw	r3,4(r2)
  810cb0:	00beefc4 	movi	r2,-1089
  810cb4:	1886703a 	and	r3,r3,r2
  810cb8:	e0bffc17 	ldw	r2,-16(fp)
  810cbc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810cc0:	e0bffc17 	ldw	r2,-16(fp)
  810cc4:	10800017 	ldw	r2,0(r2)
  810cc8:	10800304 	addi	r2,r2,12
  810ccc:	e0fffc17 	ldw	r3,-16(fp)
  810cd0:	18c00117 	ldw	r3,4(r3)
  810cd4:	10c00035 	stwio	r3,0(r2)
}
  810cd8:	0001883a 	nop
  810cdc:	e037883a 	mov	sp,fp
  810ce0:	df000017 	ldw	fp,0(sp)
  810ce4:	dec00104 	addi	sp,sp,4
  810ce8:	f800283a 	ret

00810cec <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  810cec:	defffd04 	addi	sp,sp,-12
  810cf0:	df000215 	stw	fp,8(sp)
  810cf4:	df000204 	addi	fp,sp,8
  810cf8:	e13ffe15 	stw	r4,-8(fp)
  810cfc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810d00:	00000506 	br	810d18 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810d04:	e0bfff17 	ldw	r2,-4(fp)
  810d08:	1090000c 	andi	r2,r2,16384
  810d0c:	10000226 	beq	r2,zero,810d18 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810d10:	00bffd44 	movi	r2,-11
  810d14:	00000606 	br	810d30 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810d18:	e0bffe17 	ldw	r2,-8(fp)
  810d1c:	10c00417 	ldw	r3,16(r2)
  810d20:	e0bffe17 	ldw	r2,-8(fp)
  810d24:	10800517 	ldw	r2,20(r2)
  810d28:	18bff61e 	bne	r3,r2,810d04 <__alt_mem_onchip_mem+0xff808d04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810d2c:	0005883a 	mov	r2,zero
}
  810d30:	e037883a 	mov	sp,fp
  810d34:	df000017 	ldw	fp,0(sp)
  810d38:	dec00104 	addi	sp,sp,4
  810d3c:	f800283a 	ret

00810d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810d40:	defffe04 	addi	sp,sp,-8
  810d44:	dfc00115 	stw	ra,4(sp)
  810d48:	df000015 	stw	fp,0(sp)
  810d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810d50:	d0a01117 	ldw	r2,-32700(gp)
  810d54:	10000326 	beq	r2,zero,810d64 <alt_get_errno+0x24>
  810d58:	d0a01117 	ldw	r2,-32700(gp)
  810d5c:	103ee83a 	callr	r2
  810d60:	00000106 	br	810d68 <alt_get_errno+0x28>
  810d64:	d0a75a04 	addi	r2,gp,-25240
}
  810d68:	e037883a 	mov	sp,fp
  810d6c:	dfc00117 	ldw	ra,4(sp)
  810d70:	df000017 	ldw	fp,0(sp)
  810d74:	dec00204 	addi	sp,sp,8
  810d78:	f800283a 	ret

00810d7c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  810d7c:	defff204 	addi	sp,sp,-56
  810d80:	dfc00d15 	stw	ra,52(sp)
  810d84:	df000c15 	stw	fp,48(sp)
  810d88:	df000c04 	addi	fp,sp,48
  810d8c:	e13ffc15 	stw	r4,-16(fp)
  810d90:	e17ffd15 	stw	r5,-12(fp)
  810d94:	e1bffe15 	stw	r6,-8(fp)
  810d98:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  810d9c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  810da0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  810da4:	e0bfff17 	ldw	r2,-4(fp)
  810da8:	1090000c 	andi	r2,r2,16384
  810dac:	1005003a 	cmpeq	r2,r2,zero
  810db0:	10803fcc 	andi	r2,r2,255
  810db4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810db8:	00001306 	br	810e08 <altera_avalon_uart_read+0x8c>
    {
      count++;
  810dbc:	e0bff517 	ldw	r2,-44(fp)
  810dc0:	10800044 	addi	r2,r2,1
  810dc4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  810dc8:	e0bffd17 	ldw	r2,-12(fp)
  810dcc:	10c00044 	addi	r3,r2,1
  810dd0:	e0fffd15 	stw	r3,-12(fp)
  810dd4:	e0fffc17 	ldw	r3,-16(fp)
  810dd8:	18c00217 	ldw	r3,8(r3)
  810ddc:	e13ffc17 	ldw	r4,-16(fp)
  810de0:	20c7883a 	add	r3,r4,r3
  810de4:	18c00704 	addi	r3,r3,28
  810de8:	18c00003 	ldbu	r3,0(r3)
  810dec:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  810df0:	e0bffc17 	ldw	r2,-16(fp)
  810df4:	10800217 	ldw	r2,8(r2)
  810df8:	10800044 	addi	r2,r2,1
  810dfc:	10c00fcc 	andi	r3,r2,63
  810e00:	e0bffc17 	ldw	r2,-16(fp)
  810e04:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810e08:	e0fff517 	ldw	r3,-44(fp)
  810e0c:	e0bffe17 	ldw	r2,-8(fp)
  810e10:	1880050e 	bge	r3,r2,810e28 <altera_avalon_uart_read+0xac>
  810e14:	e0bffc17 	ldw	r2,-16(fp)
  810e18:	10c00217 	ldw	r3,8(r2)
  810e1c:	e0bffc17 	ldw	r2,-16(fp)
  810e20:	10800317 	ldw	r2,12(r2)
  810e24:	18bfe51e 	bne	r3,r2,810dbc <__alt_mem_onchip_mem+0xff808dbc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  810e28:	e0bff517 	ldw	r2,-44(fp)
  810e2c:	1000251e 	bne	r2,zero,810ec4 <altera_avalon_uart_read+0x148>
  810e30:	e0bffc17 	ldw	r2,-16(fp)
  810e34:	10c00217 	ldw	r3,8(r2)
  810e38:	e0bffc17 	ldw	r2,-16(fp)
  810e3c:	10800317 	ldw	r2,12(r2)
  810e40:	1880201e 	bne	r3,r2,810ec4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  810e44:	e0bff617 	ldw	r2,-40(fp)
  810e48:	1000071e 	bne	r2,zero,810e68 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  810e4c:	0810d400 	call	810d40 <alt_get_errno>
  810e50:	1007883a 	mov	r3,r2
  810e54:	008002c4 	movi	r2,11
  810e58:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  810e5c:	00800044 	movi	r2,1
  810e60:	e0bff405 	stb	r2,-48(fp)
        break;
  810e64:	00001b06 	br	810ed4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e68:	0005303a 	rdctl	r2,status
  810e6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e70:	e0fff917 	ldw	r3,-28(fp)
  810e74:	00bfff84 	movi	r2,-2
  810e78:	1884703a 	and	r2,r3,r2
  810e7c:	1001703a 	wrctl	status,r2
  
  return context;
  810e80:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  810e84:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810e88:	e0bffc17 	ldw	r2,-16(fp)
  810e8c:	10800117 	ldw	r2,4(r2)
  810e90:	10c02014 	ori	r3,r2,128
  810e94:	e0bffc17 	ldw	r2,-16(fp)
  810e98:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810e9c:	e0bffc17 	ldw	r2,-16(fp)
  810ea0:	10800017 	ldw	r2,0(r2)
  810ea4:	10800304 	addi	r2,r2,12
  810ea8:	e0fffc17 	ldw	r3,-16(fp)
  810eac:	18c00117 	ldw	r3,4(r3)
  810eb0:	10c00035 	stwio	r3,0(r2)
  810eb4:	e0bff817 	ldw	r2,-32(fp)
  810eb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ebc:	e0bffa17 	ldw	r2,-24(fp)
  810ec0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  810ec4:	e0bff517 	ldw	r2,-44(fp)
  810ec8:	1000021e 	bne	r2,zero,810ed4 <altera_avalon_uart_read+0x158>
  810ecc:	e0bffe17 	ldw	r2,-8(fp)
  810ed0:	103fcd1e 	bne	r2,zero,810e08 <__alt_mem_onchip_mem+0xff808e08>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ed4:	0005303a 	rdctl	r2,status
  810ed8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810edc:	e0fffb17 	ldw	r3,-20(fp)
  810ee0:	00bfff84 	movi	r2,-2
  810ee4:	1884703a 	and	r2,r3,r2
  810ee8:	1001703a 	wrctl	status,r2
  
  return context;
  810eec:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  810ef0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810ef4:	e0bffc17 	ldw	r2,-16(fp)
  810ef8:	10800117 	ldw	r2,4(r2)
  810efc:	10c02014 	ori	r3,r2,128
  810f00:	e0bffc17 	ldw	r2,-16(fp)
  810f04:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810f08:	e0bffc17 	ldw	r2,-16(fp)
  810f0c:	10800017 	ldw	r2,0(r2)
  810f10:	10800304 	addi	r2,r2,12
  810f14:	e0fffc17 	ldw	r3,-16(fp)
  810f18:	18c00117 	ldw	r3,4(r3)
  810f1c:	10c00035 	stwio	r3,0(r2)
  810f20:	e0bff817 	ldw	r2,-32(fp)
  810f24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f28:	e0bff717 	ldw	r2,-36(fp)
  810f2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  810f30:	e0bff403 	ldbu	r2,-48(fp)
  810f34:	10000226 	beq	r2,zero,810f40 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  810f38:	00bffd44 	movi	r2,-11
  810f3c:	00000106 	br	810f44 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  810f40:	e0bff517 	ldw	r2,-44(fp)
  }
}
  810f44:	e037883a 	mov	sp,fp
  810f48:	dfc00117 	ldw	ra,4(sp)
  810f4c:	df000017 	ldw	fp,0(sp)
  810f50:	dec00204 	addi	sp,sp,8
  810f54:	f800283a 	ret

00810f58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810f58:	defffe04 	addi	sp,sp,-8
  810f5c:	dfc00115 	stw	ra,4(sp)
  810f60:	df000015 	stw	fp,0(sp)
  810f64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810f68:	d0a01117 	ldw	r2,-32700(gp)
  810f6c:	10000326 	beq	r2,zero,810f7c <alt_get_errno+0x24>
  810f70:	d0a01117 	ldw	r2,-32700(gp)
  810f74:	103ee83a 	callr	r2
  810f78:	00000106 	br	810f80 <alt_get_errno+0x28>
  810f7c:	d0a75a04 	addi	r2,gp,-25240
}
  810f80:	e037883a 	mov	sp,fp
  810f84:	dfc00117 	ldw	ra,4(sp)
  810f88:	df000017 	ldw	fp,0(sp)
  810f8c:	dec00204 	addi	sp,sp,8
  810f90:	f800283a 	ret

00810f94 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  810f94:	defff204 	addi	sp,sp,-56
  810f98:	dfc00d15 	stw	ra,52(sp)
  810f9c:	df000c15 	stw	fp,48(sp)
  810fa0:	df000c04 	addi	fp,sp,48
  810fa4:	e13ffc15 	stw	r4,-16(fp)
  810fa8:	e17ffd15 	stw	r5,-12(fp)
  810fac:	e1bffe15 	stw	r6,-8(fp)
  810fb0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  810fb4:	e0bffe17 	ldw	r2,-8(fp)
  810fb8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  810fbc:	e0bfff17 	ldw	r2,-4(fp)
  810fc0:	1090000c 	andi	r2,r2,16384
  810fc4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  810fc8:	00003c06 	br	8110bc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810fcc:	e0bffc17 	ldw	r2,-16(fp)
  810fd0:	10800517 	ldw	r2,20(r2)
  810fd4:	10800044 	addi	r2,r2,1
  810fd8:	10800fcc 	andi	r2,r2,63
  810fdc:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  810fe0:	e0bffc17 	ldw	r2,-16(fp)
  810fe4:	10c00417 	ldw	r3,16(r2)
  810fe8:	e0bff717 	ldw	r2,-36(fp)
  810fec:	1880221e 	bne	r3,r2,811078 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  810ff0:	e0bff517 	ldw	r2,-44(fp)
  810ff4:	10000526 	beq	r2,zero,81100c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  810ff8:	0810f580 	call	810f58 <alt_get_errno>
  810ffc:	1007883a 	mov	r3,r2
  811000:	008002c4 	movi	r2,11
  811004:	18800015 	stw	r2,0(r3)
        break;
  811008:	00002e06 	br	8110c4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81100c:	0005303a 	rdctl	r2,status
  811010:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811014:	e0fff917 	ldw	r3,-28(fp)
  811018:	00bfff84 	movi	r2,-2
  81101c:	1884703a 	and	r2,r3,r2
  811020:	1001703a 	wrctl	status,r2
  
  return context;
  811024:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  811028:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81102c:	e0bffc17 	ldw	r2,-16(fp)
  811030:	10800117 	ldw	r2,4(r2)
  811034:	10c11014 	ori	r3,r2,1088
  811038:	e0bffc17 	ldw	r2,-16(fp)
  81103c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811040:	e0bffc17 	ldw	r2,-16(fp)
  811044:	10800017 	ldw	r2,0(r2)
  811048:	10800304 	addi	r2,r2,12
  81104c:	e0fffc17 	ldw	r3,-16(fp)
  811050:	18c00117 	ldw	r3,4(r3)
  811054:	10c00035 	stwio	r3,0(r2)
  811058:	e0bff817 	ldw	r2,-32(fp)
  81105c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811060:	e0bff617 	ldw	r2,-40(fp)
  811064:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  811068:	e0bffc17 	ldw	r2,-16(fp)
  81106c:	10c00417 	ldw	r3,16(r2)
  811070:	e0bff717 	ldw	r2,-36(fp)
  811074:	18bffc26 	beq	r3,r2,811068 <__alt_mem_onchip_mem+0xff809068>
      }
    }

    count--;
  811078:	e0bff417 	ldw	r2,-48(fp)
  81107c:	10bfffc4 	addi	r2,r2,-1
  811080:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  811084:	e0bffc17 	ldw	r2,-16(fp)
  811088:	10c00517 	ldw	r3,20(r2)
  81108c:	e0bffd17 	ldw	r2,-12(fp)
  811090:	11000044 	addi	r4,r2,1
  811094:	e13ffd15 	stw	r4,-12(fp)
  811098:	10800003 	ldbu	r2,0(r2)
  81109c:	1009883a 	mov	r4,r2
  8110a0:	e0bffc17 	ldw	r2,-16(fp)
  8110a4:	10c5883a 	add	r2,r2,r3
  8110a8:	10801704 	addi	r2,r2,92
  8110ac:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8110b0:	e0bffc17 	ldw	r2,-16(fp)
  8110b4:	e0fff717 	ldw	r3,-36(fp)
  8110b8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8110bc:	e0bff417 	ldw	r2,-48(fp)
  8110c0:	103fc21e 	bne	r2,zero,810fcc <__alt_mem_onchip_mem+0xff808fcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8110c4:	0005303a 	rdctl	r2,status
  8110c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8110cc:	e0fffb17 	ldw	r3,-20(fp)
  8110d0:	00bfff84 	movi	r2,-2
  8110d4:	1884703a 	and	r2,r3,r2
  8110d8:	1001703a 	wrctl	status,r2
  
  return context;
  8110dc:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8110e0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8110e4:	e0bffc17 	ldw	r2,-16(fp)
  8110e8:	10800117 	ldw	r2,4(r2)
  8110ec:	10c11014 	ori	r3,r2,1088
  8110f0:	e0bffc17 	ldw	r2,-16(fp)
  8110f4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8110f8:	e0bffc17 	ldw	r2,-16(fp)
  8110fc:	10800017 	ldw	r2,0(r2)
  811100:	10800304 	addi	r2,r2,12
  811104:	e0fffc17 	ldw	r3,-16(fp)
  811108:	18c00117 	ldw	r3,4(r3)
  81110c:	10c00035 	stwio	r3,0(r2)
  811110:	e0bff817 	ldw	r2,-32(fp)
  811114:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811118:	e0bffa17 	ldw	r2,-24(fp)
  81111c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  811120:	e0fffe17 	ldw	r3,-8(fp)
  811124:	e0bff417 	ldw	r2,-48(fp)
  811128:	1885c83a 	sub	r2,r3,r2
}
  81112c:	e037883a 	mov	sp,fp
  811130:	dfc00117 	ldw	ra,4(sp)
  811134:	df000017 	ldw	fp,0(sp)
  811138:	dec00204 	addi	sp,sp,8
  81113c:	f800283a 	ret

00811140 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811140:	defffe04 	addi	sp,sp,-8
  811144:	df000115 	stw	fp,4(sp)
  811148:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81114c:	e03fff15 	stw	zero,-4(fp)
  811150:	00000506 	br	811168 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811154:	e0bfff17 	ldw	r2,-4(fp)
  811158:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81115c:	e0bfff17 	ldw	r2,-4(fp)
  811160:	10800804 	addi	r2,r2,32
  811164:	e0bfff15 	stw	r2,-4(fp)
  811168:	e0bfff17 	ldw	r2,-4(fp)
  81116c:	10820030 	cmpltui	r2,r2,2048
  811170:	103ff81e 	bne	r2,zero,811154 <__alt_mem_onchip_mem+0xff809154>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811174:	0001883a 	nop
  811178:	e037883a 	mov	sp,fp
  81117c:	df000017 	ldw	fp,0(sp)
  811180:	dec00104 	addi	sp,sp,4
  811184:	f800283a 	ret

00811188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811188:	defffe04 	addi	sp,sp,-8
  81118c:	dfc00115 	stw	ra,4(sp)
  811190:	df000015 	stw	fp,0(sp)
  811194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811198:	d0a01117 	ldw	r2,-32700(gp)
  81119c:	10000326 	beq	r2,zero,8111ac <alt_get_errno+0x24>
  8111a0:	d0a01117 	ldw	r2,-32700(gp)
  8111a4:	103ee83a 	callr	r2
  8111a8:	00000106 	br	8111b0 <alt_get_errno+0x28>
  8111ac:	d0a75a04 	addi	r2,gp,-25240
}
  8111b0:	e037883a 	mov	sp,fp
  8111b4:	dfc00117 	ldw	ra,4(sp)
  8111b8:	df000017 	ldw	fp,0(sp)
  8111bc:	dec00204 	addi	sp,sp,8
  8111c0:	f800283a 	ret

008111c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8111c4:	defffa04 	addi	sp,sp,-24
  8111c8:	dfc00515 	stw	ra,20(sp)
  8111cc:	df000415 	stw	fp,16(sp)
  8111d0:	df000404 	addi	fp,sp,16
  8111d4:	e13ffe15 	stw	r4,-8(fp)
  8111d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8111dc:	e0bffe17 	ldw	r2,-8(fp)
  8111e0:	10000326 	beq	r2,zero,8111f0 <alt_dev_llist_insert+0x2c>
  8111e4:	e0bffe17 	ldw	r2,-8(fp)
  8111e8:	10800217 	ldw	r2,8(r2)
  8111ec:	1000061e 	bne	r2,zero,811208 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8111f0:	08111880 	call	811188 <alt_get_errno>
  8111f4:	1007883a 	mov	r3,r2
  8111f8:	00800584 	movi	r2,22
  8111fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  811200:	00bffa84 	movi	r2,-22
  811204:	00001306 	br	811254 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  811208:	e0bffe17 	ldw	r2,-8(fp)
  81120c:	e0ffff17 	ldw	r3,-4(fp)
  811210:	e0fffc15 	stw	r3,-16(fp)
  811214:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  811218:	e0bffd17 	ldw	r2,-12(fp)
  81121c:	e0fffc17 	ldw	r3,-16(fp)
  811220:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  811224:	e0bffc17 	ldw	r2,-16(fp)
  811228:	10c00017 	ldw	r3,0(r2)
  81122c:	e0bffd17 	ldw	r2,-12(fp)
  811230:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  811234:	e0bffc17 	ldw	r2,-16(fp)
  811238:	10800017 	ldw	r2,0(r2)
  81123c:	e0fffd17 	ldw	r3,-12(fp)
  811240:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  811244:	e0bffc17 	ldw	r2,-16(fp)
  811248:	e0fffd17 	ldw	r3,-12(fp)
  81124c:	10c00015 	stw	r3,0(r2)

  return 0;  
  811250:	0005883a 	mov	r2,zero
}
  811254:	e037883a 	mov	sp,fp
  811258:	dfc00117 	ldw	ra,4(sp)
  81125c:	df000017 	ldw	fp,0(sp)
  811260:	dec00204 	addi	sp,sp,8
  811264:	f800283a 	ret

00811268 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811268:	defffd04 	addi	sp,sp,-12
  81126c:	dfc00215 	stw	ra,8(sp)
  811270:	df000115 	stw	fp,4(sp)
  811274:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811278:	00802074 	movhi	r2,129
  81127c:	1087f804 	addi	r2,r2,8160
  811280:	e0bfff15 	stw	r2,-4(fp)
  811284:	00000606 	br	8112a0 <_do_ctors+0x38>
        (*ctor) (); 
  811288:	e0bfff17 	ldw	r2,-4(fp)
  81128c:	10800017 	ldw	r2,0(r2)
  811290:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811294:	e0bfff17 	ldw	r2,-4(fp)
  811298:	10bfff04 	addi	r2,r2,-4
  81129c:	e0bfff15 	stw	r2,-4(fp)
  8112a0:	e0ffff17 	ldw	r3,-4(fp)
  8112a4:	00802074 	movhi	r2,129
  8112a8:	1087f904 	addi	r2,r2,8164
  8112ac:	18bff62e 	bgeu	r3,r2,811288 <__alt_mem_onchip_mem+0xff809288>
        (*ctor) (); 
}
  8112b0:	0001883a 	nop
  8112b4:	e037883a 	mov	sp,fp
  8112b8:	dfc00117 	ldw	ra,4(sp)
  8112bc:	df000017 	ldw	fp,0(sp)
  8112c0:	dec00204 	addi	sp,sp,8
  8112c4:	f800283a 	ret

008112c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8112c8:	defffd04 	addi	sp,sp,-12
  8112cc:	dfc00215 	stw	ra,8(sp)
  8112d0:	df000115 	stw	fp,4(sp)
  8112d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8112d8:	00802074 	movhi	r2,129
  8112dc:	1087f804 	addi	r2,r2,8160
  8112e0:	e0bfff15 	stw	r2,-4(fp)
  8112e4:	00000606 	br	811300 <_do_dtors+0x38>
        (*dtor) (); 
  8112e8:	e0bfff17 	ldw	r2,-4(fp)
  8112ec:	10800017 	ldw	r2,0(r2)
  8112f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8112f4:	e0bfff17 	ldw	r2,-4(fp)
  8112f8:	10bfff04 	addi	r2,r2,-4
  8112fc:	e0bfff15 	stw	r2,-4(fp)
  811300:	e0ffff17 	ldw	r3,-4(fp)
  811304:	00802074 	movhi	r2,129
  811308:	1087f904 	addi	r2,r2,8164
  81130c:	18bff62e 	bgeu	r3,r2,8112e8 <__alt_mem_onchip_mem+0xff8092e8>
        (*dtor) (); 
}
  811310:	0001883a 	nop
  811314:	e037883a 	mov	sp,fp
  811318:	dfc00117 	ldw	ra,4(sp)
  81131c:	df000017 	ldw	fp,0(sp)
  811320:	dec00204 	addi	sp,sp,8
  811324:	f800283a 	ret

00811328 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  811328:	defffa04 	addi	sp,sp,-24
  81132c:	dfc00515 	stw	ra,20(sp)
  811330:	df000415 	stw	fp,16(sp)
  811334:	df000404 	addi	fp,sp,16
  811338:	e13ffe15 	stw	r4,-8(fp)
  81133c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  811340:	e0bfff17 	ldw	r2,-4(fp)
  811344:	10800017 	ldw	r2,0(r2)
  811348:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81134c:	e13ffe17 	ldw	r4,-8(fp)
  811350:	08083c40 	call	8083c4 <strlen>
  811354:	10800044 	addi	r2,r2,1
  811358:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81135c:	00000d06 	br	811394 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  811360:	e0bffc17 	ldw	r2,-16(fp)
  811364:	10800217 	ldw	r2,8(r2)
  811368:	e0fffd17 	ldw	r3,-12(fp)
  81136c:	180d883a 	mov	r6,r3
  811370:	e17ffe17 	ldw	r5,-8(fp)
  811374:	1009883a 	mov	r4,r2
  811378:	0811c9c0 	call	811c9c <memcmp>
  81137c:	1000021e 	bne	r2,zero,811388 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811380:	e0bffc17 	ldw	r2,-16(fp)
  811384:	00000706 	br	8113a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811388:	e0bffc17 	ldw	r2,-16(fp)
  81138c:	10800017 	ldw	r2,0(r2)
  811390:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811394:	e0fffc17 	ldw	r3,-16(fp)
  811398:	e0bfff17 	ldw	r2,-4(fp)
  81139c:	18bff01e 	bne	r3,r2,811360 <__alt_mem_onchip_mem+0xff809360>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8113a0:	0005883a 	mov	r2,zero
}
  8113a4:	e037883a 	mov	sp,fp
  8113a8:	dfc00117 	ldw	ra,4(sp)
  8113ac:	df000017 	ldw	fp,0(sp)
  8113b0:	dec00204 	addi	sp,sp,8
  8113b4:	f800283a 	ret

008113b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8113b8:	defffb04 	addi	sp,sp,-20
  8113bc:	dfc00415 	stw	ra,16(sp)
  8113c0:	df000315 	stw	fp,12(sp)
  8113c4:	df000304 	addi	fp,sp,12
  8113c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8113cc:	d0a00c17 	ldw	r2,-32720(gp)
  8113d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8113d4:	00003106 	br	81149c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8113d8:	e0bffd17 	ldw	r2,-12(fp)
  8113dc:	10800217 	ldw	r2,8(r2)
  8113e0:	1009883a 	mov	r4,r2
  8113e4:	08083c40 	call	8083c4 <strlen>
  8113e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8113ec:	e0bffd17 	ldw	r2,-12(fp)
  8113f0:	10c00217 	ldw	r3,8(r2)
  8113f4:	e0bffe17 	ldw	r2,-8(fp)
  8113f8:	10bfffc4 	addi	r2,r2,-1
  8113fc:	1885883a 	add	r2,r3,r2
  811400:	10800003 	ldbu	r2,0(r2)
  811404:	10803fcc 	andi	r2,r2,255
  811408:	1080201c 	xori	r2,r2,128
  81140c:	10bfe004 	addi	r2,r2,-128
  811410:	10800bd8 	cmpnei	r2,r2,47
  811414:	1000031e 	bne	r2,zero,811424 <alt_find_file+0x6c>
    {
      len -= 1;
  811418:	e0bffe17 	ldw	r2,-8(fp)
  81141c:	10bfffc4 	addi	r2,r2,-1
  811420:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811424:	e0bffe17 	ldw	r2,-8(fp)
  811428:	e0ffff17 	ldw	r3,-4(fp)
  81142c:	1885883a 	add	r2,r3,r2
  811430:	10800003 	ldbu	r2,0(r2)
  811434:	10803fcc 	andi	r2,r2,255
  811438:	1080201c 	xori	r2,r2,128
  81143c:	10bfe004 	addi	r2,r2,-128
  811440:	10800be0 	cmpeqi	r2,r2,47
  811444:	1000081e 	bne	r2,zero,811468 <alt_find_file+0xb0>
  811448:	e0bffe17 	ldw	r2,-8(fp)
  81144c:	e0ffff17 	ldw	r3,-4(fp)
  811450:	1885883a 	add	r2,r3,r2
  811454:	10800003 	ldbu	r2,0(r2)
  811458:	10803fcc 	andi	r2,r2,255
  81145c:	1080201c 	xori	r2,r2,128
  811460:	10bfe004 	addi	r2,r2,-128
  811464:	10000a1e 	bne	r2,zero,811490 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  811468:	e0bffd17 	ldw	r2,-12(fp)
  81146c:	10800217 	ldw	r2,8(r2)
  811470:	e0fffe17 	ldw	r3,-8(fp)
  811474:	180d883a 	mov	r6,r3
  811478:	e17fff17 	ldw	r5,-4(fp)
  81147c:	1009883a 	mov	r4,r2
  811480:	0811c9c0 	call	811c9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811484:	1000021e 	bne	r2,zero,811490 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811488:	e0bffd17 	ldw	r2,-12(fp)
  81148c:	00000706 	br	8114ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  811490:	e0bffd17 	ldw	r2,-12(fp)
  811494:	10800017 	ldw	r2,0(r2)
  811498:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81149c:	e0fffd17 	ldw	r3,-12(fp)
  8114a0:	d0a00c04 	addi	r2,gp,-32720
  8114a4:	18bfcc1e 	bne	r3,r2,8113d8 <__alt_mem_onchip_mem+0xff8093d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8114a8:	0005883a 	mov	r2,zero
}
  8114ac:	e037883a 	mov	sp,fp
  8114b0:	dfc00117 	ldw	ra,4(sp)
  8114b4:	df000017 	ldw	fp,0(sp)
  8114b8:	dec00204 	addi	sp,sp,8
  8114bc:	f800283a 	ret

008114c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8114c0:	defffc04 	addi	sp,sp,-16
  8114c4:	df000315 	stw	fp,12(sp)
  8114c8:	df000304 	addi	fp,sp,12
  8114cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8114d0:	00bffa04 	movi	r2,-24
  8114d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8114d8:	e03ffd15 	stw	zero,-12(fp)
  8114dc:	00001906 	br	811544 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  8114e0:	00802074 	movhi	r2,129
  8114e4:	108b9f04 	addi	r2,r2,11900
  8114e8:	e0fffd17 	ldw	r3,-12(fp)
  8114ec:	18c00324 	muli	r3,r3,12
  8114f0:	10c5883a 	add	r2,r2,r3
  8114f4:	10800017 	ldw	r2,0(r2)
  8114f8:	10000f1e 	bne	r2,zero,811538 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  8114fc:	00802074 	movhi	r2,129
  811500:	108b9f04 	addi	r2,r2,11900
  811504:	e0fffd17 	ldw	r3,-12(fp)
  811508:	18c00324 	muli	r3,r3,12
  81150c:	10c5883a 	add	r2,r2,r3
  811510:	e0ffff17 	ldw	r3,-4(fp)
  811514:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  811518:	d0e01017 	ldw	r3,-32704(gp)
  81151c:	e0bffd17 	ldw	r2,-12(fp)
  811520:	1880020e 	bge	r3,r2,81152c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  811524:	e0bffd17 	ldw	r2,-12(fp)
  811528:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
  81152c:	e0bffd17 	ldw	r2,-12(fp)
  811530:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  811534:	00000606 	br	811550 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811538:	e0bffd17 	ldw	r2,-12(fp)
  81153c:	10800044 	addi	r2,r2,1
  811540:	e0bffd15 	stw	r2,-12(fp)
  811544:	e0bffd17 	ldw	r2,-12(fp)
  811548:	10800810 	cmplti	r2,r2,32
  81154c:	103fe41e 	bne	r2,zero,8114e0 <__alt_mem_onchip_mem+0xff8094e0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811550:	e0bffe17 	ldw	r2,-8(fp)
}
  811554:	e037883a 	mov	sp,fp
  811558:	df000017 	ldw	fp,0(sp)
  81155c:	dec00104 	addi	sp,sp,4
  811560:	f800283a 	ret

00811564 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811564:	defffe04 	addi	sp,sp,-8
  811568:	dfc00115 	stw	ra,4(sp)
  81156c:	df000015 	stw	fp,0(sp)
  811570:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811574:	01440004 	movi	r5,4096
  811578:	0009883a 	mov	r4,zero
  81157c:	0811b240 	call	811b24 <alt_icache_flush>
#endif
}
  811580:	0001883a 	nop
  811584:	e037883a 	mov	sp,fp
  811588:	dfc00117 	ldw	ra,4(sp)
  81158c:	df000017 	ldw	fp,0(sp)
  811590:	dec00204 	addi	sp,sp,8
  811594:	f800283a 	ret

00811598 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811598:	defff904 	addi	sp,sp,-28
  81159c:	dfc00615 	stw	ra,24(sp)
  8115a0:	df000515 	stw	fp,20(sp)
  8115a4:	df000504 	addi	fp,sp,20
  8115a8:	e13ffc15 	stw	r4,-16(fp)
  8115ac:	e17ffd15 	stw	r5,-12(fp)
  8115b0:	e1bffe15 	stw	r6,-8(fp)
  8115b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8115b8:	e0800217 	ldw	r2,8(fp)
  8115bc:	d8800015 	stw	r2,0(sp)
  8115c0:	e1ffff17 	ldw	r7,-4(fp)
  8115c4:	e1bffe17 	ldw	r6,-8(fp)
  8115c8:	e17ffd17 	ldw	r5,-12(fp)
  8115cc:	e13ffc17 	ldw	r4,-16(fp)
  8115d0:	08117480 	call	811748 <alt_iic_isr_register>
}  
  8115d4:	e037883a 	mov	sp,fp
  8115d8:	dfc00117 	ldw	ra,4(sp)
  8115dc:	df000017 	ldw	fp,0(sp)
  8115e0:	dec00204 	addi	sp,sp,8
  8115e4:	f800283a 	ret

008115e8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8115e8:	defff904 	addi	sp,sp,-28
  8115ec:	df000615 	stw	fp,24(sp)
  8115f0:	df000604 	addi	fp,sp,24
  8115f4:	e13ffe15 	stw	r4,-8(fp)
  8115f8:	e17fff15 	stw	r5,-4(fp)
  8115fc:	e0bfff17 	ldw	r2,-4(fp)
  811600:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811604:	0005303a 	rdctl	r2,status
  811608:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81160c:	e0fffb17 	ldw	r3,-20(fp)
  811610:	00bfff84 	movi	r2,-2
  811614:	1884703a 	and	r2,r3,r2
  811618:	1001703a 	wrctl	status,r2
  
  return context;
  81161c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811620:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  811624:	00c00044 	movi	r3,1
  811628:	e0bffa17 	ldw	r2,-24(fp)
  81162c:	1884983a 	sll	r2,r3,r2
  811630:	1007883a 	mov	r3,r2
  811634:	d0a76117 	ldw	r2,-25212(gp)
  811638:	1884b03a 	or	r2,r3,r2
  81163c:	d0a76115 	stw	r2,-25212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811640:	d0a76117 	ldw	r2,-25212(gp)
  811644:	100170fa 	wrctl	ienable,r2
  811648:	e0bffc17 	ldw	r2,-16(fp)
  81164c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811650:	e0bffd17 	ldw	r2,-12(fp)
  811654:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811658:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  81165c:	0001883a 	nop
}
  811660:	e037883a 	mov	sp,fp
  811664:	df000017 	ldw	fp,0(sp)
  811668:	dec00104 	addi	sp,sp,4
  81166c:	f800283a 	ret

00811670 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811670:	defff904 	addi	sp,sp,-28
  811674:	df000615 	stw	fp,24(sp)
  811678:	df000604 	addi	fp,sp,24
  81167c:	e13ffe15 	stw	r4,-8(fp)
  811680:	e17fff15 	stw	r5,-4(fp)
  811684:	e0bfff17 	ldw	r2,-4(fp)
  811688:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81168c:	0005303a 	rdctl	r2,status
  811690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811694:	e0fffb17 	ldw	r3,-20(fp)
  811698:	00bfff84 	movi	r2,-2
  81169c:	1884703a 	and	r2,r3,r2
  8116a0:	1001703a 	wrctl	status,r2
  
  return context;
  8116a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8116a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8116ac:	00c00044 	movi	r3,1
  8116b0:	e0bffa17 	ldw	r2,-24(fp)
  8116b4:	1884983a 	sll	r2,r3,r2
  8116b8:	0084303a 	nor	r2,zero,r2
  8116bc:	1007883a 	mov	r3,r2
  8116c0:	d0a76117 	ldw	r2,-25212(gp)
  8116c4:	1884703a 	and	r2,r3,r2
  8116c8:	d0a76115 	stw	r2,-25212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8116cc:	d0a76117 	ldw	r2,-25212(gp)
  8116d0:	100170fa 	wrctl	ienable,r2
  8116d4:	e0bffc17 	ldw	r2,-16(fp)
  8116d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8116dc:	e0bffd17 	ldw	r2,-12(fp)
  8116e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8116e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8116e8:	0001883a 	nop
}
  8116ec:	e037883a 	mov	sp,fp
  8116f0:	df000017 	ldw	fp,0(sp)
  8116f4:	dec00104 	addi	sp,sp,4
  8116f8:	f800283a 	ret

008116fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8116fc:	defffc04 	addi	sp,sp,-16
  811700:	df000315 	stw	fp,12(sp)
  811704:	df000304 	addi	fp,sp,12
  811708:	e13ffe15 	stw	r4,-8(fp)
  81170c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  811710:	000530fa 	rdctl	r2,ienable
  811714:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  811718:	00c00044 	movi	r3,1
  81171c:	e0bfff17 	ldw	r2,-4(fp)
  811720:	1884983a 	sll	r2,r3,r2
  811724:	1007883a 	mov	r3,r2
  811728:	e0bffd17 	ldw	r2,-12(fp)
  81172c:	1884703a 	and	r2,r3,r2
  811730:	1004c03a 	cmpne	r2,r2,zero
  811734:	10803fcc 	andi	r2,r2,255
}
  811738:	e037883a 	mov	sp,fp
  81173c:	df000017 	ldw	fp,0(sp)
  811740:	dec00104 	addi	sp,sp,4
  811744:	f800283a 	ret

00811748 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811748:	defff504 	addi	sp,sp,-44
  81174c:	dfc00a15 	stw	ra,40(sp)
  811750:	df000915 	stw	fp,36(sp)
  811754:	df000904 	addi	fp,sp,36
  811758:	e13ffc15 	stw	r4,-16(fp)
  81175c:	e17ffd15 	stw	r5,-12(fp)
  811760:	e1bffe15 	stw	r6,-8(fp)
  811764:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  811768:	00bffa84 	movi	r2,-22
  81176c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811770:	e0bffd17 	ldw	r2,-12(fp)
  811774:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811778:	e0bff817 	ldw	r2,-32(fp)
  81177c:	10800808 	cmpgei	r2,r2,32
  811780:	1000271e 	bne	r2,zero,811820 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811784:	0005303a 	rdctl	r2,status
  811788:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81178c:	e0fffb17 	ldw	r3,-20(fp)
  811790:	00bfff84 	movi	r2,-2
  811794:	1884703a 	and	r2,r3,r2
  811798:	1001703a 	wrctl	status,r2
  
  return context;
  81179c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8117a0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8117a4:	00802074 	movhi	r2,129
  8117a8:	10980804 	addi	r2,r2,24608
  8117ac:	e0fff817 	ldw	r3,-32(fp)
  8117b0:	180690fa 	slli	r3,r3,3
  8117b4:	10c5883a 	add	r2,r2,r3
  8117b8:	e0fffe17 	ldw	r3,-8(fp)
  8117bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8117c0:	00802074 	movhi	r2,129
  8117c4:	10980804 	addi	r2,r2,24608
  8117c8:	e0fff817 	ldw	r3,-32(fp)
  8117cc:	180690fa 	slli	r3,r3,3
  8117d0:	10c5883a 	add	r2,r2,r3
  8117d4:	10800104 	addi	r2,r2,4
  8117d8:	e0ffff17 	ldw	r3,-4(fp)
  8117dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8117e0:	e0bffe17 	ldw	r2,-8(fp)
  8117e4:	10000526 	beq	r2,zero,8117fc <alt_iic_isr_register+0xb4>
  8117e8:	e0bff817 	ldw	r2,-32(fp)
  8117ec:	100b883a 	mov	r5,r2
  8117f0:	e13ffc17 	ldw	r4,-16(fp)
  8117f4:	08115e80 	call	8115e8 <alt_ic_irq_enable>
  8117f8:	00000406 	br	81180c <alt_iic_isr_register+0xc4>
  8117fc:	e0bff817 	ldw	r2,-32(fp)
  811800:	100b883a 	mov	r5,r2
  811804:	e13ffc17 	ldw	r4,-16(fp)
  811808:	08116700 	call	811670 <alt_ic_irq_disable>
  81180c:	e0bff715 	stw	r2,-36(fp)
  811810:	e0bffa17 	ldw	r2,-24(fp)
  811814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811818:	e0bff917 	ldw	r2,-28(fp)
  81181c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  811820:	e0bff717 	ldw	r2,-36(fp)
}
  811824:	e037883a 	mov	sp,fp
  811828:	dfc00117 	ldw	ra,4(sp)
  81182c:	df000017 	ldw	fp,0(sp)
  811830:	dec00204 	addi	sp,sp,8
  811834:	f800283a 	ret

00811838 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811838:	defff904 	addi	sp,sp,-28
  81183c:	dfc00615 	stw	ra,24(sp)
  811840:	df000515 	stw	fp,20(sp)
  811844:	df000504 	addi	fp,sp,20
  811848:	e13ffc15 	stw	r4,-16(fp)
  81184c:	e17ffd15 	stw	r5,-12(fp)
  811850:	e1bffe15 	stw	r6,-8(fp)
  811854:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  811858:	e1bfff17 	ldw	r6,-4(fp)
  81185c:	e17ffe17 	ldw	r5,-8(fp)
  811860:	e13ffd17 	ldw	r4,-12(fp)
  811864:	080e6b40 	call	80e6b4 <open>
  811868:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81186c:	e0bffb17 	ldw	r2,-20(fp)
  811870:	10001c16 	blt	r2,zero,8118e4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  811874:	00802074 	movhi	r2,129
  811878:	108b9f04 	addi	r2,r2,11900
  81187c:	e0fffb17 	ldw	r3,-20(fp)
  811880:	18c00324 	muli	r3,r3,12
  811884:	10c5883a 	add	r2,r2,r3
  811888:	10c00017 	ldw	r3,0(r2)
  81188c:	e0bffc17 	ldw	r2,-16(fp)
  811890:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811894:	00802074 	movhi	r2,129
  811898:	108b9f04 	addi	r2,r2,11900
  81189c:	e0fffb17 	ldw	r3,-20(fp)
  8118a0:	18c00324 	muli	r3,r3,12
  8118a4:	10c5883a 	add	r2,r2,r3
  8118a8:	10800104 	addi	r2,r2,4
  8118ac:	10c00017 	ldw	r3,0(r2)
  8118b0:	e0bffc17 	ldw	r2,-16(fp)
  8118b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8118b8:	00802074 	movhi	r2,129
  8118bc:	108b9f04 	addi	r2,r2,11900
  8118c0:	e0fffb17 	ldw	r3,-20(fp)
  8118c4:	18c00324 	muli	r3,r3,12
  8118c8:	10c5883a 	add	r2,r2,r3
  8118cc:	10800204 	addi	r2,r2,8
  8118d0:	10c00017 	ldw	r3,0(r2)
  8118d4:	e0bffc17 	ldw	r2,-16(fp)
  8118d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8118dc:	e13ffb17 	ldw	r4,-20(fp)
  8118e0:	080e9400 	call	80e940 <alt_release_fd>
  }
} 
  8118e4:	0001883a 	nop
  8118e8:	e037883a 	mov	sp,fp
  8118ec:	dfc00117 	ldw	ra,4(sp)
  8118f0:	df000017 	ldw	fp,0(sp)
  8118f4:	dec00204 	addi	sp,sp,8
  8118f8:	f800283a 	ret

008118fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8118fc:	defffb04 	addi	sp,sp,-20
  811900:	dfc00415 	stw	ra,16(sp)
  811904:	df000315 	stw	fp,12(sp)
  811908:	df000304 	addi	fp,sp,12
  81190c:	e13ffd15 	stw	r4,-12(fp)
  811910:	e17ffe15 	stw	r5,-8(fp)
  811914:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811918:	01c07fc4 	movi	r7,511
  81191c:	01800044 	movi	r6,1
  811920:	e17ffd17 	ldw	r5,-12(fp)
  811924:	01002074 	movhi	r4,129
  811928:	210ba204 	addi	r4,r4,11912
  81192c:	08118380 	call	811838 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811930:	01c07fc4 	movi	r7,511
  811934:	000d883a 	mov	r6,zero
  811938:	e17ffe17 	ldw	r5,-8(fp)
  81193c:	01002074 	movhi	r4,129
  811940:	210b9f04 	addi	r4,r4,11900
  811944:	08118380 	call	811838 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811948:	01c07fc4 	movi	r7,511
  81194c:	01800044 	movi	r6,1
  811950:	e17fff17 	ldw	r5,-4(fp)
  811954:	01002074 	movhi	r4,129
  811958:	210ba504 	addi	r4,r4,11924
  81195c:	08118380 	call	811838 <alt_open_fd>
}  
  811960:	0001883a 	nop
  811964:	e037883a 	mov	sp,fp
  811968:	dfc00117 	ldw	ra,4(sp)
  81196c:	df000017 	ldw	fp,0(sp)
  811970:	dec00204 	addi	sp,sp,8
  811974:	f800283a 	ret

00811978 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  811978:	defffd04 	addi	sp,sp,-12
  81197c:	dfc00215 	stw	ra,8(sp)
  811980:	df000115 	stw	fp,4(sp)
  811984:	df000104 	addi	fp,sp,4
  811988:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81198c:	e13fff17 	ldw	r4,-4(fp)
  811990:	08119cc0 	call	8119cc <alt_busy_sleep>
}
  811994:	e037883a 	mov	sp,fp
  811998:	dfc00117 	ldw	ra,4(sp)
  81199c:	df000017 	ldw	fp,0(sp)
  8119a0:	dec00204 	addi	sp,sp,8
  8119a4:	f800283a 	ret

008119a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8119a8:	deffff04 	addi	sp,sp,-4
  8119ac:	df000015 	stw	fp,0(sp)
  8119b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8119b4:	000170fa 	wrctl	ienable,zero
}
  8119b8:	0001883a 	nop
  8119bc:	e037883a 	mov	sp,fp
  8119c0:	df000017 	ldw	fp,0(sp)
  8119c4:	dec00104 	addi	sp,sp,4
  8119c8:	f800283a 	ret

008119cc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8119cc:	defffa04 	addi	sp,sp,-24
  8119d0:	dfc00515 	stw	ra,20(sp)
  8119d4:	df000415 	stw	fp,16(sp)
  8119d8:	df000404 	addi	fp,sp,16
  8119dc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8119e0:	008000c4 	movi	r2,3
  8119e4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8119e8:	e0fffd17 	ldw	r3,-12(fp)
  8119ec:	008003f4 	movhi	r2,15
  8119f0:	10909004 	addi	r2,r2,16960
  8119f4:	1885383a 	mul	r2,r3,r2
  8119f8:	100b883a 	mov	r5,r2
  8119fc:	0100bef4 	movhi	r4,763
  811a00:	213c2004 	addi	r4,r4,-3968
  811a04:	0800b9c0 	call	800b9c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  811a08:	100b883a 	mov	r5,r2
  811a0c:	01200034 	movhi	r4,32768
  811a10:	213fffc4 	addi	r4,r4,-1
  811a14:	0800b9c0 	call	800b9c <__udivsi3>
  811a18:	100b883a 	mov	r5,r2
  811a1c:	e13fff17 	ldw	r4,-4(fp)
  811a20:	0800b9c0 	call	800b9c <__udivsi3>
  811a24:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  811a28:	e0bffe17 	ldw	r2,-8(fp)
  811a2c:	10002a26 	beq	r2,zero,811ad8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  811a30:	e03ffc15 	stw	zero,-16(fp)
  811a34:	00001706 	br	811a94 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  811a38:	00a00034 	movhi	r2,32768
  811a3c:	10bfffc4 	addi	r2,r2,-1
  811a40:	10bfffc4 	addi	r2,r2,-1
  811a44:	103ffe1e 	bne	r2,zero,811a40 <__alt_mem_onchip_mem+0xff809a40>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  811a48:	e0fffd17 	ldw	r3,-12(fp)
  811a4c:	008003f4 	movhi	r2,15
  811a50:	10909004 	addi	r2,r2,16960
  811a54:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  811a58:	100b883a 	mov	r5,r2
  811a5c:	0100bef4 	movhi	r4,763
  811a60:	213c2004 	addi	r4,r4,-3968
  811a64:	0800b9c0 	call	800b9c <__udivsi3>
  811a68:	100b883a 	mov	r5,r2
  811a6c:	01200034 	movhi	r4,32768
  811a70:	213fffc4 	addi	r4,r4,-1
  811a74:	0800b9c0 	call	800b9c <__udivsi3>
  811a78:	1007883a 	mov	r3,r2
  811a7c:	e0bfff17 	ldw	r2,-4(fp)
  811a80:	10c5c83a 	sub	r2,r2,r3
  811a84:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  811a88:	e0bffc17 	ldw	r2,-16(fp)
  811a8c:	10800044 	addi	r2,r2,1
  811a90:	e0bffc15 	stw	r2,-16(fp)
  811a94:	e0fffc17 	ldw	r3,-16(fp)
  811a98:	e0bffe17 	ldw	r2,-8(fp)
  811a9c:	18bfe616 	blt	r3,r2,811a38 <__alt_mem_onchip_mem+0xff809a38>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811aa0:	e0fffd17 	ldw	r3,-12(fp)
  811aa4:	008003f4 	movhi	r2,15
  811aa8:	10909004 	addi	r2,r2,16960
  811aac:	1885383a 	mul	r2,r3,r2
  811ab0:	100b883a 	mov	r5,r2
  811ab4:	0100bef4 	movhi	r4,763
  811ab8:	213c2004 	addi	r4,r4,-3968
  811abc:	0800b9c0 	call	800b9c <__udivsi3>
  811ac0:	1007883a 	mov	r3,r2
  811ac4:	e0bfff17 	ldw	r2,-4(fp)
  811ac8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811acc:	10bfffc4 	addi	r2,r2,-1
  811ad0:	103ffe1e 	bne	r2,zero,811acc <__alt_mem_onchip_mem+0xff809acc>
  811ad4:	00000d06 	br	811b0c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811ad8:	e0fffd17 	ldw	r3,-12(fp)
  811adc:	008003f4 	movhi	r2,15
  811ae0:	10909004 	addi	r2,r2,16960
  811ae4:	1885383a 	mul	r2,r3,r2
  811ae8:	100b883a 	mov	r5,r2
  811aec:	0100bef4 	movhi	r4,763
  811af0:	213c2004 	addi	r4,r4,-3968
  811af4:	0800b9c0 	call	800b9c <__udivsi3>
  811af8:	1007883a 	mov	r3,r2
  811afc:	e0bfff17 	ldw	r2,-4(fp)
  811b00:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811b04:	10bfffc4 	addi	r2,r2,-1
  811b08:	00bffe16 	blt	zero,r2,811b04 <__alt_mem_onchip_mem+0xff809b04>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  811b0c:	0005883a 	mov	r2,zero
}
  811b10:	e037883a 	mov	sp,fp
  811b14:	dfc00117 	ldw	ra,4(sp)
  811b18:	df000017 	ldw	fp,0(sp)
  811b1c:	dec00204 	addi	sp,sp,8
  811b20:	f800283a 	ret

00811b24 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811b24:	defffb04 	addi	sp,sp,-20
  811b28:	df000415 	stw	fp,16(sp)
  811b2c:	df000404 	addi	fp,sp,16
  811b30:	e13ffe15 	stw	r4,-8(fp)
  811b34:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811b38:	e0bfff17 	ldw	r2,-4(fp)
  811b3c:	10840070 	cmpltui	r2,r2,4097
  811b40:	1000021e 	bne	r2,zero,811b4c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811b44:	00840004 	movi	r2,4096
  811b48:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  811b4c:	e0fffe17 	ldw	r3,-8(fp)
  811b50:	e0bfff17 	ldw	r2,-4(fp)
  811b54:	1885883a 	add	r2,r3,r2
  811b58:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811b5c:	e0bffe17 	ldw	r2,-8(fp)
  811b60:	e0bffc15 	stw	r2,-16(fp)
  811b64:	00000506 	br	811b7c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811b68:	e0bffc17 	ldw	r2,-16(fp)
  811b6c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811b70:	e0bffc17 	ldw	r2,-16(fp)
  811b74:	10800804 	addi	r2,r2,32
  811b78:	e0bffc15 	stw	r2,-16(fp)
  811b7c:	e0fffc17 	ldw	r3,-16(fp)
  811b80:	e0bffd17 	ldw	r2,-12(fp)
  811b84:	18bff836 	bltu	r3,r2,811b68 <__alt_mem_onchip_mem+0xff809b68>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811b88:	e0bffe17 	ldw	r2,-8(fp)
  811b8c:	108007cc 	andi	r2,r2,31
  811b90:	10000226 	beq	r2,zero,811b9c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811b94:	e0bffc17 	ldw	r2,-16(fp)
  811b98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811b9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811ba0:	0001883a 	nop
  811ba4:	e037883a 	mov	sp,fp
  811ba8:	df000017 	ldw	fp,0(sp)
  811bac:	dec00104 	addi	sp,sp,4
  811bb0:	f800283a 	ret

00811bb4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  811bb4:	defffe04 	addi	sp,sp,-8
  811bb8:	df000115 	stw	fp,4(sp)
  811bbc:	df000104 	addi	fp,sp,4
  811bc0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  811bc4:	e0bfff17 	ldw	r2,-4(fp)
  811bc8:	10bffe84 	addi	r2,r2,-6
  811bcc:	10c00428 	cmpgeui	r3,r2,16
  811bd0:	18001a1e 	bne	r3,zero,811c3c <alt_exception_cause_generated_bad_addr+0x88>
  811bd4:	100690ba 	slli	r3,r2,2
  811bd8:	00802074 	movhi	r2,129
  811bdc:	1086fb04 	addi	r2,r2,7148
  811be0:	1885883a 	add	r2,r3,r2
  811be4:	10800017 	ldw	r2,0(r2)
  811be8:	1000683a 	jmp	r2
  811bec:	00811c2c 	andhi	r2,zero,1136
  811bf0:	00811c2c 	andhi	r2,zero,1136
  811bf4:	00811c3c 	xorhi	r2,zero,1136
  811bf8:	00811c3c 	xorhi	r2,zero,1136
  811bfc:	00811c3c 	xorhi	r2,zero,1136
  811c00:	00811c2c 	andhi	r2,zero,1136
  811c04:	00811c34 	movhi	r2,1136
  811c08:	00811c3c 	xorhi	r2,zero,1136
  811c0c:	00811c2c 	andhi	r2,zero,1136
  811c10:	00811c2c 	andhi	r2,zero,1136
  811c14:	00811c3c 	xorhi	r2,zero,1136
  811c18:	00811c2c 	andhi	r2,zero,1136
  811c1c:	00811c34 	movhi	r2,1136
  811c20:	00811c3c 	xorhi	r2,zero,1136
  811c24:	00811c3c 	xorhi	r2,zero,1136
  811c28:	00811c2c 	andhi	r2,zero,1136
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  811c2c:	00800044 	movi	r2,1
  811c30:	00000306 	br	811c40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  811c34:	0005883a 	mov	r2,zero
  811c38:	00000106 	br	811c40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  811c3c:	0005883a 	mov	r2,zero
  }
}
  811c40:	e037883a 	mov	sp,fp
  811c44:	df000017 	ldw	fp,0(sp)
  811c48:	dec00104 	addi	sp,sp,4
  811c4c:	f800283a 	ret

00811c50 <atexit>:
  811c50:	200b883a 	mov	r5,r4
  811c54:	000f883a 	mov	r7,zero
  811c58:	000d883a 	mov	r6,zero
  811c5c:	0009883a 	mov	r4,zero
  811c60:	0811d181 	jmpi	811d18 <__register_exitproc>

00811c64 <exit>:
  811c64:	defffe04 	addi	sp,sp,-8
  811c68:	000b883a 	mov	r5,zero
  811c6c:	dc000015 	stw	r16,0(sp)
  811c70:	dfc00115 	stw	ra,4(sp)
  811c74:	2021883a 	mov	r16,r4
  811c78:	0811e300 	call	811e30 <__call_exitprocs>
  811c7c:	00802074 	movhi	r2,129
  811c80:	10909604 	addi	r2,r2,16984
  811c84:	11000017 	ldw	r4,0(r2)
  811c88:	20800f17 	ldw	r2,60(r4)
  811c8c:	10000126 	beq	r2,zero,811c94 <exit+0x30>
  811c90:	103ee83a 	callr	r2
  811c94:	8009883a 	mov	r4,r16
  811c98:	0811fb00 	call	811fb0 <_exit>

00811c9c <memcmp>:
  811c9c:	01c000c4 	movi	r7,3
  811ca0:	3980192e 	bgeu	r7,r6,811d08 <memcmp+0x6c>
  811ca4:	2144b03a 	or	r2,r4,r5
  811ca8:	11c4703a 	and	r2,r2,r7
  811cac:	10000f26 	beq	r2,zero,811cec <memcmp+0x50>
  811cb0:	20800003 	ldbu	r2,0(r4)
  811cb4:	28c00003 	ldbu	r3,0(r5)
  811cb8:	10c0151e 	bne	r2,r3,811d10 <memcmp+0x74>
  811cbc:	31bfff84 	addi	r6,r6,-2
  811cc0:	01ffffc4 	movi	r7,-1
  811cc4:	00000406 	br	811cd8 <memcmp+0x3c>
  811cc8:	20800003 	ldbu	r2,0(r4)
  811ccc:	28c00003 	ldbu	r3,0(r5)
  811cd0:	31bfffc4 	addi	r6,r6,-1
  811cd4:	10c00e1e 	bne	r2,r3,811d10 <memcmp+0x74>
  811cd8:	21000044 	addi	r4,r4,1
  811cdc:	29400044 	addi	r5,r5,1
  811ce0:	31fff91e 	bne	r6,r7,811cc8 <__alt_mem_onchip_mem+0xff809cc8>
  811ce4:	0005883a 	mov	r2,zero
  811ce8:	f800283a 	ret
  811cec:	20c00017 	ldw	r3,0(r4)
  811cf0:	28800017 	ldw	r2,0(r5)
  811cf4:	18bfee1e 	bne	r3,r2,811cb0 <__alt_mem_onchip_mem+0xff809cb0>
  811cf8:	31bfff04 	addi	r6,r6,-4
  811cfc:	21000104 	addi	r4,r4,4
  811d00:	29400104 	addi	r5,r5,4
  811d04:	39bff936 	bltu	r7,r6,811cec <__alt_mem_onchip_mem+0xff809cec>
  811d08:	303fe91e 	bne	r6,zero,811cb0 <__alt_mem_onchip_mem+0xff809cb0>
  811d0c:	003ff506 	br	811ce4 <__alt_mem_onchip_mem+0xff809ce4>
  811d10:	10c5c83a 	sub	r2,r2,r3
  811d14:	f800283a 	ret

00811d18 <__register_exitproc>:
  811d18:	defffa04 	addi	sp,sp,-24
  811d1c:	dc000315 	stw	r16,12(sp)
  811d20:	04002074 	movhi	r16,129
  811d24:	84109604 	addi	r16,r16,16984
  811d28:	80c00017 	ldw	r3,0(r16)
  811d2c:	dc400415 	stw	r17,16(sp)
  811d30:	dfc00515 	stw	ra,20(sp)
  811d34:	18805217 	ldw	r2,328(r3)
  811d38:	2023883a 	mov	r17,r4
  811d3c:	10003726 	beq	r2,zero,811e1c <__register_exitproc+0x104>
  811d40:	10c00117 	ldw	r3,4(r2)
  811d44:	010007c4 	movi	r4,31
  811d48:	20c00e16 	blt	r4,r3,811d84 <__register_exitproc+0x6c>
  811d4c:	1a000044 	addi	r8,r3,1
  811d50:	8800221e 	bne	r17,zero,811ddc <__register_exitproc+0xc4>
  811d54:	18c00084 	addi	r3,r3,2
  811d58:	18c7883a 	add	r3,r3,r3
  811d5c:	18c7883a 	add	r3,r3,r3
  811d60:	12000115 	stw	r8,4(r2)
  811d64:	10c7883a 	add	r3,r2,r3
  811d68:	19400015 	stw	r5,0(r3)
  811d6c:	0005883a 	mov	r2,zero
  811d70:	dfc00517 	ldw	ra,20(sp)
  811d74:	dc400417 	ldw	r17,16(sp)
  811d78:	dc000317 	ldw	r16,12(sp)
  811d7c:	dec00604 	addi	sp,sp,24
  811d80:	f800283a 	ret
  811d84:	00800034 	movhi	r2,0
  811d88:	10800004 	addi	r2,r2,0
  811d8c:	10002626 	beq	r2,zero,811e28 <__register_exitproc+0x110>
  811d90:	01006404 	movi	r4,400
  811d94:	d9400015 	stw	r5,0(sp)
  811d98:	d9800115 	stw	r6,4(sp)
  811d9c:	d9c00215 	stw	r7,8(sp)
  811da0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  811da4:	d9400017 	ldw	r5,0(sp)
  811da8:	d9800117 	ldw	r6,4(sp)
  811dac:	d9c00217 	ldw	r7,8(sp)
  811db0:	10001d26 	beq	r2,zero,811e28 <__register_exitproc+0x110>
  811db4:	81000017 	ldw	r4,0(r16)
  811db8:	10000115 	stw	zero,4(r2)
  811dbc:	02000044 	movi	r8,1
  811dc0:	22405217 	ldw	r9,328(r4)
  811dc4:	0007883a 	mov	r3,zero
  811dc8:	12400015 	stw	r9,0(r2)
  811dcc:	20805215 	stw	r2,328(r4)
  811dd0:	10006215 	stw	zero,392(r2)
  811dd4:	10006315 	stw	zero,396(r2)
  811dd8:	883fde26 	beq	r17,zero,811d54 <__alt_mem_onchip_mem+0xff809d54>
  811ddc:	18c9883a 	add	r4,r3,r3
  811de0:	2109883a 	add	r4,r4,r4
  811de4:	1109883a 	add	r4,r2,r4
  811de8:	21802215 	stw	r6,136(r4)
  811dec:	01800044 	movi	r6,1
  811df0:	12406217 	ldw	r9,392(r2)
  811df4:	30cc983a 	sll	r6,r6,r3
  811df8:	4992b03a 	or	r9,r9,r6
  811dfc:	12406215 	stw	r9,392(r2)
  811e00:	21c04215 	stw	r7,264(r4)
  811e04:	01000084 	movi	r4,2
  811e08:	893fd21e 	bne	r17,r4,811d54 <__alt_mem_onchip_mem+0xff809d54>
  811e0c:	11006317 	ldw	r4,396(r2)
  811e10:	218cb03a 	or	r6,r4,r6
  811e14:	11806315 	stw	r6,396(r2)
  811e18:	003fce06 	br	811d54 <__alt_mem_onchip_mem+0xff809d54>
  811e1c:	18805304 	addi	r2,r3,332
  811e20:	18805215 	stw	r2,328(r3)
  811e24:	003fc606 	br	811d40 <__alt_mem_onchip_mem+0xff809d40>
  811e28:	00bfffc4 	movi	r2,-1
  811e2c:	003fd006 	br	811d70 <__alt_mem_onchip_mem+0xff809d70>

00811e30 <__call_exitprocs>:
  811e30:	defff504 	addi	sp,sp,-44
  811e34:	df000915 	stw	fp,36(sp)
  811e38:	dd400615 	stw	r21,24(sp)
  811e3c:	dc800315 	stw	r18,12(sp)
  811e40:	dfc00a15 	stw	ra,40(sp)
  811e44:	ddc00815 	stw	r23,32(sp)
  811e48:	dd800715 	stw	r22,28(sp)
  811e4c:	dd000515 	stw	r20,20(sp)
  811e50:	dcc00415 	stw	r19,16(sp)
  811e54:	dc400215 	stw	r17,8(sp)
  811e58:	dc000115 	stw	r16,4(sp)
  811e5c:	d9000015 	stw	r4,0(sp)
  811e60:	2839883a 	mov	fp,r5
  811e64:	04800044 	movi	r18,1
  811e68:	057fffc4 	movi	r21,-1
  811e6c:	00802074 	movhi	r2,129
  811e70:	10909604 	addi	r2,r2,16984
  811e74:	12000017 	ldw	r8,0(r2)
  811e78:	45005217 	ldw	r20,328(r8)
  811e7c:	44c05204 	addi	r19,r8,328
  811e80:	a0001c26 	beq	r20,zero,811ef4 <__call_exitprocs+0xc4>
  811e84:	a0800117 	ldw	r2,4(r20)
  811e88:	15ffffc4 	addi	r23,r2,-1
  811e8c:	b8000d16 	blt	r23,zero,811ec4 <__call_exitprocs+0x94>
  811e90:	14000044 	addi	r16,r2,1
  811e94:	8421883a 	add	r16,r16,r16
  811e98:	8421883a 	add	r16,r16,r16
  811e9c:	84402004 	addi	r17,r16,128
  811ea0:	a463883a 	add	r17,r20,r17
  811ea4:	a421883a 	add	r16,r20,r16
  811ea8:	e0001e26 	beq	fp,zero,811f24 <__call_exitprocs+0xf4>
  811eac:	80804017 	ldw	r2,256(r16)
  811eb0:	e0801c26 	beq	fp,r2,811f24 <__call_exitprocs+0xf4>
  811eb4:	bdffffc4 	addi	r23,r23,-1
  811eb8:	843fff04 	addi	r16,r16,-4
  811ebc:	8c7fff04 	addi	r17,r17,-4
  811ec0:	bd7ff91e 	bne	r23,r21,811ea8 <__alt_mem_onchip_mem+0xff809ea8>
  811ec4:	00800034 	movhi	r2,0
  811ec8:	10800004 	addi	r2,r2,0
  811ecc:	10000926 	beq	r2,zero,811ef4 <__call_exitprocs+0xc4>
  811ed0:	a0800117 	ldw	r2,4(r20)
  811ed4:	1000301e 	bne	r2,zero,811f98 <__call_exitprocs+0x168>
  811ed8:	a0800017 	ldw	r2,0(r20)
  811edc:	10003226 	beq	r2,zero,811fa8 <__call_exitprocs+0x178>
  811ee0:	a009883a 	mov	r4,r20
  811ee4:	98800015 	stw	r2,0(r19)
  811ee8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  811eec:	9d000017 	ldw	r20,0(r19)
  811ef0:	a03fe41e 	bne	r20,zero,811e84 <__alt_mem_onchip_mem+0xff809e84>
  811ef4:	dfc00a17 	ldw	ra,40(sp)
  811ef8:	df000917 	ldw	fp,36(sp)
  811efc:	ddc00817 	ldw	r23,32(sp)
  811f00:	dd800717 	ldw	r22,28(sp)
  811f04:	dd400617 	ldw	r21,24(sp)
  811f08:	dd000517 	ldw	r20,20(sp)
  811f0c:	dcc00417 	ldw	r19,16(sp)
  811f10:	dc800317 	ldw	r18,12(sp)
  811f14:	dc400217 	ldw	r17,8(sp)
  811f18:	dc000117 	ldw	r16,4(sp)
  811f1c:	dec00b04 	addi	sp,sp,44
  811f20:	f800283a 	ret
  811f24:	a0800117 	ldw	r2,4(r20)
  811f28:	80c00017 	ldw	r3,0(r16)
  811f2c:	10bfffc4 	addi	r2,r2,-1
  811f30:	15c01426 	beq	r2,r23,811f84 <__call_exitprocs+0x154>
  811f34:	80000015 	stw	zero,0(r16)
  811f38:	183fde26 	beq	r3,zero,811eb4 <__alt_mem_onchip_mem+0xff809eb4>
  811f3c:	95c8983a 	sll	r4,r18,r23
  811f40:	a0806217 	ldw	r2,392(r20)
  811f44:	a5800117 	ldw	r22,4(r20)
  811f48:	2084703a 	and	r2,r4,r2
  811f4c:	10000b26 	beq	r2,zero,811f7c <__call_exitprocs+0x14c>
  811f50:	a0806317 	ldw	r2,396(r20)
  811f54:	2088703a 	and	r4,r4,r2
  811f58:	20000c1e 	bne	r4,zero,811f8c <__call_exitprocs+0x15c>
  811f5c:	89400017 	ldw	r5,0(r17)
  811f60:	d9000017 	ldw	r4,0(sp)
  811f64:	183ee83a 	callr	r3
  811f68:	a0800117 	ldw	r2,4(r20)
  811f6c:	15bfbf1e 	bne	r2,r22,811e6c <__alt_mem_onchip_mem+0xff809e6c>
  811f70:	98800017 	ldw	r2,0(r19)
  811f74:	153fcf26 	beq	r2,r20,811eb4 <__alt_mem_onchip_mem+0xff809eb4>
  811f78:	003fbc06 	br	811e6c <__alt_mem_onchip_mem+0xff809e6c>
  811f7c:	183ee83a 	callr	r3
  811f80:	003ff906 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  811f84:	a5c00115 	stw	r23,4(r20)
  811f88:	003feb06 	br	811f38 <__alt_mem_onchip_mem+0xff809f38>
  811f8c:	89000017 	ldw	r4,0(r17)
  811f90:	183ee83a 	callr	r3
  811f94:	003ff406 	br	811f68 <__alt_mem_onchip_mem+0xff809f68>
  811f98:	a0800017 	ldw	r2,0(r20)
  811f9c:	a027883a 	mov	r19,r20
  811fa0:	1029883a 	mov	r20,r2
  811fa4:	003fb606 	br	811e80 <__alt_mem_onchip_mem+0xff809e80>
  811fa8:	0005883a 	mov	r2,zero
  811fac:	003ffb06 	br	811f9c <__alt_mem_onchip_mem+0xff809f9c>

00811fb0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811fb0:	defffd04 	addi	sp,sp,-12
  811fb4:	df000215 	stw	fp,8(sp)
  811fb8:	df000204 	addi	fp,sp,8
  811fbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  811fc0:	0001883a 	nop
  811fc4:	e0bfff17 	ldw	r2,-4(fp)
  811fc8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  811fcc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811fd0:	10000226 	beq	r2,zero,811fdc <_exit+0x2c>
    ALT_SIM_FAIL();
  811fd4:	002af070 	cmpltui	zero,zero,43969
  811fd8:	00000106 	br	811fe0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  811fdc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811fe0:	003fff06 	br	811fe0 <__alt_mem_onchip_mem+0xff809fe0>
